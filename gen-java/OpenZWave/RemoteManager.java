/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package OpenZWave;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RemoteManager {

  public interface Iface {

    /**
     * \name Configuration
     * For saving the Z-Wave network configuration so that the entire network does not need to be
     * polled every time the application starts.
     * 
     * @param _homeId
     */
    public void WriteConfig(int _homeId) throws org.apache.thrift.TException;

    /**
     * \name Drivers
     * Methods for adding and removing drivers and obtaining basic controller information.
     * 
     * @param _homeId
     */
    public byte GetControllerNodeId(int _homeId) throws org.apache.thrift.TException;

    public boolean IsPrimaryController(int _homeId) throws org.apache.thrift.TException;

    public boolean IsStaticUpdateController(int _homeId) throws org.apache.thrift.TException;

    public boolean IsBridgeController(int _homeId) throws org.apache.thrift.TException;

    public String GetLibraryVersion(int _homeId) throws org.apache.thrift.TException;

    public String GetLibraryTypeName(int _homeId) throws org.apache.thrift.TException;

    public int GetSendQueueCount(int _homeId) throws org.apache.thrift.TException;

    public void LogDriverStatistics(int _homeId) throws org.apache.thrift.TException;

    public int GetPollInterval() throws org.apache.thrift.TException;

    public void SetPollInterval(int _milliseconds, boolean _bIntervalBetweenPolls) throws org.apache.thrift.TException;

    public boolean EnablePoll(RemoteValueID _valueId, byte _intensity) throws org.apache.thrift.TException;

    public boolean DisablePoll(RemoteValueID _valueId) throws org.apache.thrift.TException;

    public boolean isPolled(RemoteValueID _valueId) throws org.apache.thrift.TException;

    public void SetPollIntensity(RemoteValueID _valueId, byte _intensity) throws org.apache.thrift.TException;

    public boolean RefreshNodeInfo(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean RequestNodeState(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean RequestNodeDynamic(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean IsNodeListeningDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean IsNodeFrequentListeningDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean IsNodeBeamingDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean IsNodeRoutingDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public boolean IsNodeSecurityDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public int GetNodeMaxBaudRate(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public byte GetNodeVersion(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public byte GetNodeSecurity(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public byte GetNodeBasic(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public byte GetNodeGeneric(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public byte GetNodeSpecific(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeType(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public UInt32_ListByte GetNodeNeighbors(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeManufacturerName(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeProductName(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeName(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeLocation(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeManufacturerId(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeProductType(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public String GetNodeProductId(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public void SetNodeManufacturerName(int _homeId, byte _nodeId, String _manufacturerName) throws org.apache.thrift.TException;

    public void SetNodeProductName(int _homeId, byte _nodeId, String _productName) throws org.apache.thrift.TException;

    public void SetNodeName(int _homeId, byte _nodeId, String _nodeName) throws org.apache.thrift.TException;

    public void SetNodeLocation(int _homeId, byte _nodeId, String _location) throws org.apache.thrift.TException;

    public void SetNodeOn(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public void SetNodeOff(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public void SetNodeLevel(int _homeId, byte _nodeId, byte _level) throws org.apache.thrift.TException;

    public boolean IsNodeInfoReceived(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public Bool_GetNodeClassInformation GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId) throws org.apache.thrift.TException;

    public String GetValueLabel(RemoteValueID _id) throws org.apache.thrift.TException;

    public void SetValueLabel(RemoteValueID _id, String _value) throws org.apache.thrift.TException;

    public String GetValueUnits(RemoteValueID _id) throws org.apache.thrift.TException;

    public void SetValueUnits(RemoteValueID _id, String _value) throws org.apache.thrift.TException;

    public String GetValueHelp(RemoteValueID _id) throws org.apache.thrift.TException;

    public void SetValueHelp(RemoteValueID _id, String _value) throws org.apache.thrift.TException;

    public int GetValueMin(RemoteValueID _id) throws org.apache.thrift.TException;

    public int GetValueMax(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean IsValueReadOnly(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean IsValueWriteOnly(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean IsValueSet(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean IsValuePolled(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_Bool GetValueAsBool(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_UInt8 GetValueAsByte(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_Float GetValueAsFloat(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_Int GetValueAsInt(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_Int16 GetValueAsShort(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_String GetValueAsString(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_String GetValueListSelection_String(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_Int GetValueListSelection_Int32(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_ListString GetValueListItems(RemoteValueID _id) throws org.apache.thrift.TException;

    public Bool_UInt8 GetValueFloatPrecision(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean SetValue_Bool(RemoteValueID _id, boolean _value) throws org.apache.thrift.TException;

    public boolean SetValue_UInt8(RemoteValueID _id, byte _value) throws org.apache.thrift.TException;

    public boolean SetValue_Float(RemoteValueID _id, double _value) throws org.apache.thrift.TException;

    public boolean SetValue_Int32(RemoteValueID _id, int _value) throws org.apache.thrift.TException;

    public boolean SetValue_Int16(RemoteValueID _id, short _value) throws org.apache.thrift.TException;

    public boolean SetValue_String(RemoteValueID _id, String _value) throws org.apache.thrift.TException;

    public boolean SetValueListSelection(RemoteValueID _id, String _selectedItem) throws org.apache.thrift.TException;

    public boolean RefreshValue(RemoteValueID _id) throws org.apache.thrift.TException;

    public void SetChangeVerified(RemoteValueID _id, boolean _verify) throws org.apache.thrift.TException;

    public boolean PressButton(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean ReleaseButton(RemoteValueID _id) throws org.apache.thrift.TException;

    public byte GetNumSwitchPoints(RemoteValueID _id) throws org.apache.thrift.TException;

    public boolean SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback) throws org.apache.thrift.TException;

    public boolean RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes) throws org.apache.thrift.TException;

    public void ClearSwitchPoints(RemoteValueID _id) throws org.apache.thrift.TException;

    public GetSwitchPointReturnStruct GetSwitchPoint(RemoteValueID _id, byte _idx) throws org.apache.thrift.TException;

    public void SwitchAllOn(int _homeId) throws org.apache.thrift.TException;

    public void SwitchAllOff(int _homeId) throws org.apache.thrift.TException;

    public boolean SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size) throws org.apache.thrift.TException;

    public void RequestConfigParam(int _homeId, byte _nodeId, byte _param) throws org.apache.thrift.TException;

    public void RequestAllConfigParams(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public byte GetNumGroups(int _homeId, byte _nodeId) throws org.apache.thrift.TException;

    public GetAssociationsReturnStruct GetAssociations(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException;

    public byte GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException;

    public String GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException;

    public void AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId) throws org.apache.thrift.TException;

    public void RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId) throws org.apache.thrift.TException;

    public void ResetController(int _homeId) throws org.apache.thrift.TException;

    public void SoftReset(int _homeId) throws org.apache.thrift.TException;

    public boolean BeginControllerCommand(int _homeId, DriverControllerCommand _command, boolean _highPower, byte _nodeId, byte _arg) throws org.apache.thrift.TException;

    public boolean CancelControllerCommand(int _homeId) throws org.apache.thrift.TException;

    public byte GetNumScenes() throws org.apache.thrift.TException;

    public GetAllScenesReturnStruct GetAllScenes() throws org.apache.thrift.TException;

    public byte CreateScene() throws org.apache.thrift.TException;

    public boolean RemoveScene(byte _sceneId) throws org.apache.thrift.TException;

    public boolean AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value) throws org.apache.thrift.TException;

    public boolean AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value) throws org.apache.thrift.TException;

    public boolean AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value) throws org.apache.thrift.TException;

    public boolean AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException;

    public boolean AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value) throws org.apache.thrift.TException;

    public boolean AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException;

    public boolean AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException;

    public boolean AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException;

    public boolean RemoveSceneValue(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public SceneGetValuesReturnStruct SceneGetValues(byte _sceneId) throws org.apache.thrift.TException;

    public Bool_Bool SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_UInt8 SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_Float SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_Int SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_Int16 SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_String SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_String SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public Bool_Int SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException;

    public boolean SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value) throws org.apache.thrift.TException;

    public boolean SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value) throws org.apache.thrift.TException;

    public boolean SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value) throws org.apache.thrift.TException;

    public boolean SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException;

    public boolean SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value) throws org.apache.thrift.TException;

    public boolean SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException;

    public boolean SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException;

    public boolean SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException;

    public String GetSceneLabel(byte _sceneId) throws org.apache.thrift.TException;

    public void SetSceneLabel(byte _sceneId, String _value) throws org.apache.thrift.TException;

    public boolean SceneExists(byte _sceneId) throws org.apache.thrift.TException;

    public boolean ActivateScene(byte _sceneId) throws org.apache.thrift.TException;

    public GetDriverStatisticsReturnStruct GetDriverStatistics(int _homeId) throws org.apache.thrift.TException;

    public void SendAllValues() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void WriteConfig(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.WriteConfig_call> resultHandler) throws org.apache.thrift.TException;

    public void GetControllerNodeId(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetControllerNodeId_call> resultHandler) throws org.apache.thrift.TException;

    public void IsPrimaryController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsPrimaryController_call> resultHandler) throws org.apache.thrift.TException;

    public void IsStaticUpdateController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsStaticUpdateController_call> resultHandler) throws org.apache.thrift.TException;

    public void IsBridgeController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsBridgeController_call> resultHandler) throws org.apache.thrift.TException;

    public void GetLibraryVersion(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetLibraryVersion_call> resultHandler) throws org.apache.thrift.TException;

    public void GetLibraryTypeName(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetLibraryTypeName_call> resultHandler) throws org.apache.thrift.TException;

    public void GetSendQueueCount(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetSendQueueCount_call> resultHandler) throws org.apache.thrift.TException;

    public void LogDriverStatistics(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.LogDriverStatistics_call> resultHandler) throws org.apache.thrift.TException;

    public void GetPollInterval(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetPollInterval_call> resultHandler) throws org.apache.thrift.TException;

    public void SetPollInterval(int _milliseconds, boolean _bIntervalBetweenPolls, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetPollInterval_call> resultHandler) throws org.apache.thrift.TException;

    public void EnablePoll(RemoteValueID _valueId, byte _intensity, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.EnablePoll_call> resultHandler) throws org.apache.thrift.TException;

    public void DisablePoll(RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DisablePoll_call> resultHandler) throws org.apache.thrift.TException;

    public void isPolled(RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isPolled_call> resultHandler) throws org.apache.thrift.TException;

    public void SetPollIntensity(RemoteValueID _valueId, byte _intensity, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetPollIntensity_call> resultHandler) throws org.apache.thrift.TException;

    public void RefreshNodeInfo(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RefreshNodeInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void RequestNodeState(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RequestNodeState_call> resultHandler) throws org.apache.thrift.TException;

    public void RequestNodeDynamic(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RequestNodeDynamic_call> resultHandler) throws org.apache.thrift.TException;

    public void IsNodeListeningDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsNodeListeningDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void IsNodeFrequentListeningDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsNodeFrequentListeningDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void IsNodeBeamingDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsNodeBeamingDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void IsNodeRoutingDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsNodeRoutingDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void IsNodeSecurityDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsNodeSecurityDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeMaxBaudRate(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeMaxBaudRate_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeVersion(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeVersion_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeSecurity(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeSecurity_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeBasic(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeBasic_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeGeneric(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeGeneric_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeSpecific(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeSpecific_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeType(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeType_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeNeighbors(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeNeighbors_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeManufacturerName(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeManufacturerName_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeProductName(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeProductName_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeName(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeName_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeLocation(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeLocation_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeManufacturerId(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeManufacturerId_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeProductType(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeProductType_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeProductId(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeProductId_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeManufacturerName(int _homeId, byte _nodeId, String _manufacturerName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeManufacturerName_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeProductName(int _homeId, byte _nodeId, String _productName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeProductName_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeName(int _homeId, byte _nodeId, String _nodeName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeName_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeLocation(int _homeId, byte _nodeId, String _location, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeLocation_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeOn(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeOn_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeOff(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeOff_call> resultHandler) throws org.apache.thrift.TException;

    public void SetNodeLevel(int _homeId, byte _nodeId, byte _level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetNodeLevel_call> resultHandler) throws org.apache.thrift.TException;

    public void IsNodeInfoReceived(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsNodeInfoReceived_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNodeClassInformation_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueLabel(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueLabel_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValueLabel(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValueLabel_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueUnits(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueUnits_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValueUnits(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValueUnits_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueHelp(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueHelp_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValueHelp(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValueHelp_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueMin(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueMin_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueMax(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueMax_call> resultHandler) throws org.apache.thrift.TException;

    public void IsValueReadOnly(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsValueReadOnly_call> resultHandler) throws org.apache.thrift.TException;

    public void IsValueWriteOnly(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsValueWriteOnly_call> resultHandler) throws org.apache.thrift.TException;

    public void IsValueSet(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsValueSet_call> resultHandler) throws org.apache.thrift.TException;

    public void IsValuePolled(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsValuePolled_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueAsBool(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueAsBool_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueAsByte(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueAsByte_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueAsFloat(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueAsFloat_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueAsInt(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueAsInt_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueAsShort(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueAsShort_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueAsString(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueAsString_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueListSelection_String(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueListSelection_Int32(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueListItems(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueListItems_call> resultHandler) throws org.apache.thrift.TException;

    public void GetValueFloatPrecision(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetValueFloatPrecision_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValue_Bool(RemoteValueID _id, boolean _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValue_Bool_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValue_UInt8(RemoteValueID _id, byte _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValue_UInt8_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValue_Float(RemoteValueID _id, double _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValue_Float_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValue_Int32(RemoteValueID _id, int _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValue_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValue_Int16(RemoteValueID _id, short _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValue_Int16_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValue_String(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValue_String_call> resultHandler) throws org.apache.thrift.TException;

    public void SetValueListSelection(RemoteValueID _id, String _selectedItem, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetValueListSelection_call> resultHandler) throws org.apache.thrift.TException;

    public void RefreshValue(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RefreshValue_call> resultHandler) throws org.apache.thrift.TException;

    public void SetChangeVerified(RemoteValueID _id, boolean _verify, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetChangeVerified_call> resultHandler) throws org.apache.thrift.TException;

    public void PressButton(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.PressButton_call> resultHandler) throws org.apache.thrift.TException;

    public void ReleaseButton(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ReleaseButton_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNumSwitchPoints(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNumSwitchPoints_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSwitchPoint_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveSwitchPoint_call> resultHandler) throws org.apache.thrift.TException;

    public void ClearSwitchPoints(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ClearSwitchPoints_call> resultHandler) throws org.apache.thrift.TException;

    public void GetSwitchPoint(RemoteValueID _id, byte _idx, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetSwitchPoint_call> resultHandler) throws org.apache.thrift.TException;

    public void SwitchAllOn(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SwitchAllOn_call> resultHandler) throws org.apache.thrift.TException;

    public void SwitchAllOff(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SwitchAllOff_call> resultHandler) throws org.apache.thrift.TException;

    public void SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetConfigParam_call> resultHandler) throws org.apache.thrift.TException;

    public void RequestConfigParam(int _homeId, byte _nodeId, byte _param, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RequestConfigParam_call> resultHandler) throws org.apache.thrift.TException;

    public void RequestAllConfigParams(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RequestAllConfigParams_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNumGroups(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNumGroups_call> resultHandler) throws org.apache.thrift.TException;

    public void GetAssociations(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAssociations_call> resultHandler) throws org.apache.thrift.TException;

    public void GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetMaxAssociations_call> resultHandler) throws org.apache.thrift.TException;

    public void GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetGroupLabel_call> resultHandler) throws org.apache.thrift.TException;

    public void AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddAssociation_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveAssociation_call> resultHandler) throws org.apache.thrift.TException;

    public void ResetController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ResetController_call> resultHandler) throws org.apache.thrift.TException;

    public void SoftReset(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SoftReset_call> resultHandler) throws org.apache.thrift.TException;

    public void BeginControllerCommand(int _homeId, DriverControllerCommand _command, boolean _highPower, byte _nodeId, byte _arg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.BeginControllerCommand_call> resultHandler) throws org.apache.thrift.TException;

    public void CancelControllerCommand(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CancelControllerCommand_call> resultHandler) throws org.apache.thrift.TException;

    public void GetNumScenes(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetNumScenes_call> resultHandler) throws org.apache.thrift.TException;

    public void GetAllScenes(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAllScenes_call> resultHandler) throws org.apache.thrift.TException;

    public void CreateScene(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CreateScene_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveScene(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveScene_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValue_Bool_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValue_Uint8_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValue_Float_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValue_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValue_Int16_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValue_String_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException;

    public void AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddSceneValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void RemoveSceneValue(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RemoveSceneValue_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValues(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValues_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueAsBool_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueAsByte_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueAsFloat_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueAsInt_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueAsShort_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueAsString_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneGetValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValue_Bool_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValue_Uint8_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValue_Float_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValue_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValue_Int16_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValue_String_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException;

    public void GetSceneLabel(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetSceneLabel_call> resultHandler) throws org.apache.thrift.TException;

    public void SetSceneLabel(byte _sceneId, String _value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SetSceneLabel_call> resultHandler) throws org.apache.thrift.TException;

    public void SceneExists(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SceneExists_call> resultHandler) throws org.apache.thrift.TException;

    public void ActivateScene(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ActivateScene_call> resultHandler) throws org.apache.thrift.TException;

    public void GetDriverStatistics(int _homeId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetDriverStatistics_call> resultHandler) throws org.apache.thrift.TException;

    public void SendAllValues(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.SendAllValues_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void WriteConfig(int _homeId) throws org.apache.thrift.TException
    {
      send_WriteConfig(_homeId);
      recv_WriteConfig();
    }

    public void send_WriteConfig(int _homeId) throws org.apache.thrift.TException
    {
      WriteConfig_args args = new WriteConfig_args();
      args.set_homeId(_homeId);
      sendBase("WriteConfig", args);
    }

    public void recv_WriteConfig() throws org.apache.thrift.TException
    {
      WriteConfig_result result = new WriteConfig_result();
      receiveBase(result, "WriteConfig");
      return;
    }

    public byte GetControllerNodeId(int _homeId) throws org.apache.thrift.TException
    {
      send_GetControllerNodeId(_homeId);
      return recv_GetControllerNodeId();
    }

    public void send_GetControllerNodeId(int _homeId) throws org.apache.thrift.TException
    {
      GetControllerNodeId_args args = new GetControllerNodeId_args();
      args.set_homeId(_homeId);
      sendBase("GetControllerNodeId", args);
    }

    public byte recv_GetControllerNodeId() throws org.apache.thrift.TException
    {
      GetControllerNodeId_result result = new GetControllerNodeId_result();
      receiveBase(result, "GetControllerNodeId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetControllerNodeId failed: unknown result");
    }

    public boolean IsPrimaryController(int _homeId) throws org.apache.thrift.TException
    {
      send_IsPrimaryController(_homeId);
      return recv_IsPrimaryController();
    }

    public void send_IsPrimaryController(int _homeId) throws org.apache.thrift.TException
    {
      IsPrimaryController_args args = new IsPrimaryController_args();
      args.set_homeId(_homeId);
      sendBase("IsPrimaryController", args);
    }

    public boolean recv_IsPrimaryController() throws org.apache.thrift.TException
    {
      IsPrimaryController_result result = new IsPrimaryController_result();
      receiveBase(result, "IsPrimaryController");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsPrimaryController failed: unknown result");
    }

    public boolean IsStaticUpdateController(int _homeId) throws org.apache.thrift.TException
    {
      send_IsStaticUpdateController(_homeId);
      return recv_IsStaticUpdateController();
    }

    public void send_IsStaticUpdateController(int _homeId) throws org.apache.thrift.TException
    {
      IsStaticUpdateController_args args = new IsStaticUpdateController_args();
      args.set_homeId(_homeId);
      sendBase("IsStaticUpdateController", args);
    }

    public boolean recv_IsStaticUpdateController() throws org.apache.thrift.TException
    {
      IsStaticUpdateController_result result = new IsStaticUpdateController_result();
      receiveBase(result, "IsStaticUpdateController");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsStaticUpdateController failed: unknown result");
    }

    public boolean IsBridgeController(int _homeId) throws org.apache.thrift.TException
    {
      send_IsBridgeController(_homeId);
      return recv_IsBridgeController();
    }

    public void send_IsBridgeController(int _homeId) throws org.apache.thrift.TException
    {
      IsBridgeController_args args = new IsBridgeController_args();
      args.set_homeId(_homeId);
      sendBase("IsBridgeController", args);
    }

    public boolean recv_IsBridgeController() throws org.apache.thrift.TException
    {
      IsBridgeController_result result = new IsBridgeController_result();
      receiveBase(result, "IsBridgeController");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsBridgeController failed: unknown result");
    }

    public String GetLibraryVersion(int _homeId) throws org.apache.thrift.TException
    {
      send_GetLibraryVersion(_homeId);
      return recv_GetLibraryVersion();
    }

    public void send_GetLibraryVersion(int _homeId) throws org.apache.thrift.TException
    {
      GetLibraryVersion_args args = new GetLibraryVersion_args();
      args.set_homeId(_homeId);
      sendBase("GetLibraryVersion", args);
    }

    public String recv_GetLibraryVersion() throws org.apache.thrift.TException
    {
      GetLibraryVersion_result result = new GetLibraryVersion_result();
      receiveBase(result, "GetLibraryVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetLibraryVersion failed: unknown result");
    }

    public String GetLibraryTypeName(int _homeId) throws org.apache.thrift.TException
    {
      send_GetLibraryTypeName(_homeId);
      return recv_GetLibraryTypeName();
    }

    public void send_GetLibraryTypeName(int _homeId) throws org.apache.thrift.TException
    {
      GetLibraryTypeName_args args = new GetLibraryTypeName_args();
      args.set_homeId(_homeId);
      sendBase("GetLibraryTypeName", args);
    }

    public String recv_GetLibraryTypeName() throws org.apache.thrift.TException
    {
      GetLibraryTypeName_result result = new GetLibraryTypeName_result();
      receiveBase(result, "GetLibraryTypeName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetLibraryTypeName failed: unknown result");
    }

    public int GetSendQueueCount(int _homeId) throws org.apache.thrift.TException
    {
      send_GetSendQueueCount(_homeId);
      return recv_GetSendQueueCount();
    }

    public void send_GetSendQueueCount(int _homeId) throws org.apache.thrift.TException
    {
      GetSendQueueCount_args args = new GetSendQueueCount_args();
      args.set_homeId(_homeId);
      sendBase("GetSendQueueCount", args);
    }

    public int recv_GetSendQueueCount() throws org.apache.thrift.TException
    {
      GetSendQueueCount_result result = new GetSendQueueCount_result();
      receiveBase(result, "GetSendQueueCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSendQueueCount failed: unknown result");
    }

    public void LogDriverStatistics(int _homeId) throws org.apache.thrift.TException
    {
      send_LogDriverStatistics(_homeId);
      recv_LogDriverStatistics();
    }

    public void send_LogDriverStatistics(int _homeId) throws org.apache.thrift.TException
    {
      LogDriverStatistics_args args = new LogDriverStatistics_args();
      args.set_homeId(_homeId);
      sendBase("LogDriverStatistics", args);
    }

    public void recv_LogDriverStatistics() throws org.apache.thrift.TException
    {
      LogDriverStatistics_result result = new LogDriverStatistics_result();
      receiveBase(result, "LogDriverStatistics");
      return;
    }

    public int GetPollInterval() throws org.apache.thrift.TException
    {
      send_GetPollInterval();
      return recv_GetPollInterval();
    }

    public void send_GetPollInterval() throws org.apache.thrift.TException
    {
      GetPollInterval_args args = new GetPollInterval_args();
      sendBase("GetPollInterval", args);
    }

    public int recv_GetPollInterval() throws org.apache.thrift.TException
    {
      GetPollInterval_result result = new GetPollInterval_result();
      receiveBase(result, "GetPollInterval");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetPollInterval failed: unknown result");
    }

    public void SetPollInterval(int _milliseconds, boolean _bIntervalBetweenPolls) throws org.apache.thrift.TException
    {
      send_SetPollInterval(_milliseconds, _bIntervalBetweenPolls);
      recv_SetPollInterval();
    }

    public void send_SetPollInterval(int _milliseconds, boolean _bIntervalBetweenPolls) throws org.apache.thrift.TException
    {
      SetPollInterval_args args = new SetPollInterval_args();
      args.set_milliseconds(_milliseconds);
      args.set_bIntervalBetweenPolls(_bIntervalBetweenPolls);
      sendBase("SetPollInterval", args);
    }

    public void recv_SetPollInterval() throws org.apache.thrift.TException
    {
      SetPollInterval_result result = new SetPollInterval_result();
      receiveBase(result, "SetPollInterval");
      return;
    }

    public boolean EnablePoll(RemoteValueID _valueId, byte _intensity) throws org.apache.thrift.TException
    {
      send_EnablePoll(_valueId, _intensity);
      return recv_EnablePoll();
    }

    public void send_EnablePoll(RemoteValueID _valueId, byte _intensity) throws org.apache.thrift.TException
    {
      EnablePoll_args args = new EnablePoll_args();
      args.set_valueId(_valueId);
      args.set_intensity(_intensity);
      sendBase("EnablePoll", args);
    }

    public boolean recv_EnablePoll() throws org.apache.thrift.TException
    {
      EnablePoll_result result = new EnablePoll_result();
      receiveBase(result, "EnablePoll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EnablePoll failed: unknown result");
    }

    public boolean DisablePoll(RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_DisablePoll(_valueId);
      return recv_DisablePoll();
    }

    public void send_DisablePoll(RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      DisablePoll_args args = new DisablePoll_args();
      args.set_valueId(_valueId);
      sendBase("DisablePoll", args);
    }

    public boolean recv_DisablePoll() throws org.apache.thrift.TException
    {
      DisablePoll_result result = new DisablePoll_result();
      receiveBase(result, "DisablePoll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DisablePoll failed: unknown result");
    }

    public boolean isPolled(RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_isPolled(_valueId);
      return recv_isPolled();
    }

    public void send_isPolled(RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      isPolled_args args = new isPolled_args();
      args.set_valueId(_valueId);
      sendBase("isPolled", args);
    }

    public boolean recv_isPolled() throws org.apache.thrift.TException
    {
      isPolled_result result = new isPolled_result();
      receiveBase(result, "isPolled");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isPolled failed: unknown result");
    }

    public void SetPollIntensity(RemoteValueID _valueId, byte _intensity) throws org.apache.thrift.TException
    {
      send_SetPollIntensity(_valueId, _intensity);
      recv_SetPollIntensity();
    }

    public void send_SetPollIntensity(RemoteValueID _valueId, byte _intensity) throws org.apache.thrift.TException
    {
      SetPollIntensity_args args = new SetPollIntensity_args();
      args.set_valueId(_valueId);
      args.set_intensity(_intensity);
      sendBase("SetPollIntensity", args);
    }

    public void recv_SetPollIntensity() throws org.apache.thrift.TException
    {
      SetPollIntensity_result result = new SetPollIntensity_result();
      receiveBase(result, "SetPollIntensity");
      return;
    }

    public boolean RefreshNodeInfo(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_RefreshNodeInfo(_homeId, _nodeId);
      return recv_RefreshNodeInfo();
    }

    public void send_RefreshNodeInfo(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      RefreshNodeInfo_args args = new RefreshNodeInfo_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("RefreshNodeInfo", args);
    }

    public boolean recv_RefreshNodeInfo() throws org.apache.thrift.TException
    {
      RefreshNodeInfo_result result = new RefreshNodeInfo_result();
      receiveBase(result, "RefreshNodeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RefreshNodeInfo failed: unknown result");
    }

    public boolean RequestNodeState(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_RequestNodeState(_homeId, _nodeId);
      return recv_RequestNodeState();
    }

    public void send_RequestNodeState(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      RequestNodeState_args args = new RequestNodeState_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("RequestNodeState", args);
    }

    public boolean recv_RequestNodeState() throws org.apache.thrift.TException
    {
      RequestNodeState_result result = new RequestNodeState_result();
      receiveBase(result, "RequestNodeState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestNodeState failed: unknown result");
    }

    public boolean RequestNodeDynamic(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_RequestNodeDynamic(_homeId, _nodeId);
      return recv_RequestNodeDynamic();
    }

    public void send_RequestNodeDynamic(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      RequestNodeDynamic_args args = new RequestNodeDynamic_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("RequestNodeDynamic", args);
    }

    public boolean recv_RequestNodeDynamic() throws org.apache.thrift.TException
    {
      RequestNodeDynamic_result result = new RequestNodeDynamic_result();
      receiveBase(result, "RequestNodeDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestNodeDynamic failed: unknown result");
    }

    public boolean IsNodeListeningDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_IsNodeListeningDevice(_homeId, _nodeId);
      return recv_IsNodeListeningDevice();
    }

    public void send_IsNodeListeningDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      IsNodeListeningDevice_args args = new IsNodeListeningDevice_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("IsNodeListeningDevice", args);
    }

    public boolean recv_IsNodeListeningDevice() throws org.apache.thrift.TException
    {
      IsNodeListeningDevice_result result = new IsNodeListeningDevice_result();
      receiveBase(result, "IsNodeListeningDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsNodeListeningDevice failed: unknown result");
    }

    public boolean IsNodeFrequentListeningDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_IsNodeFrequentListeningDevice(_homeId, _nodeId);
      return recv_IsNodeFrequentListeningDevice();
    }

    public void send_IsNodeFrequentListeningDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      IsNodeFrequentListeningDevice_args args = new IsNodeFrequentListeningDevice_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("IsNodeFrequentListeningDevice", args);
    }

    public boolean recv_IsNodeFrequentListeningDevice() throws org.apache.thrift.TException
    {
      IsNodeFrequentListeningDevice_result result = new IsNodeFrequentListeningDevice_result();
      receiveBase(result, "IsNodeFrequentListeningDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsNodeFrequentListeningDevice failed: unknown result");
    }

    public boolean IsNodeBeamingDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_IsNodeBeamingDevice(_homeId, _nodeId);
      return recv_IsNodeBeamingDevice();
    }

    public void send_IsNodeBeamingDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      IsNodeBeamingDevice_args args = new IsNodeBeamingDevice_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("IsNodeBeamingDevice", args);
    }

    public boolean recv_IsNodeBeamingDevice() throws org.apache.thrift.TException
    {
      IsNodeBeamingDevice_result result = new IsNodeBeamingDevice_result();
      receiveBase(result, "IsNodeBeamingDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsNodeBeamingDevice failed: unknown result");
    }

    public boolean IsNodeRoutingDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_IsNodeRoutingDevice(_homeId, _nodeId);
      return recv_IsNodeRoutingDevice();
    }

    public void send_IsNodeRoutingDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      IsNodeRoutingDevice_args args = new IsNodeRoutingDevice_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("IsNodeRoutingDevice", args);
    }

    public boolean recv_IsNodeRoutingDevice() throws org.apache.thrift.TException
    {
      IsNodeRoutingDevice_result result = new IsNodeRoutingDevice_result();
      receiveBase(result, "IsNodeRoutingDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsNodeRoutingDevice failed: unknown result");
    }

    public boolean IsNodeSecurityDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_IsNodeSecurityDevice(_homeId, _nodeId);
      return recv_IsNodeSecurityDevice();
    }

    public void send_IsNodeSecurityDevice(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      IsNodeSecurityDevice_args args = new IsNodeSecurityDevice_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("IsNodeSecurityDevice", args);
    }

    public boolean recv_IsNodeSecurityDevice() throws org.apache.thrift.TException
    {
      IsNodeSecurityDevice_result result = new IsNodeSecurityDevice_result();
      receiveBase(result, "IsNodeSecurityDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsNodeSecurityDevice failed: unknown result");
    }

    public int GetNodeMaxBaudRate(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeMaxBaudRate(_homeId, _nodeId);
      return recv_GetNodeMaxBaudRate();
    }

    public void send_GetNodeMaxBaudRate(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeMaxBaudRate_args args = new GetNodeMaxBaudRate_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeMaxBaudRate", args);
    }

    public int recv_GetNodeMaxBaudRate() throws org.apache.thrift.TException
    {
      GetNodeMaxBaudRate_result result = new GetNodeMaxBaudRate_result();
      receiveBase(result, "GetNodeMaxBaudRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeMaxBaudRate failed: unknown result");
    }

    public byte GetNodeVersion(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeVersion(_homeId, _nodeId);
      return recv_GetNodeVersion();
    }

    public void send_GetNodeVersion(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeVersion_args args = new GetNodeVersion_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeVersion", args);
    }

    public byte recv_GetNodeVersion() throws org.apache.thrift.TException
    {
      GetNodeVersion_result result = new GetNodeVersion_result();
      receiveBase(result, "GetNodeVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeVersion failed: unknown result");
    }

    public byte GetNodeSecurity(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeSecurity(_homeId, _nodeId);
      return recv_GetNodeSecurity();
    }

    public void send_GetNodeSecurity(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeSecurity_args args = new GetNodeSecurity_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeSecurity", args);
    }

    public byte recv_GetNodeSecurity() throws org.apache.thrift.TException
    {
      GetNodeSecurity_result result = new GetNodeSecurity_result();
      receiveBase(result, "GetNodeSecurity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeSecurity failed: unknown result");
    }

    public byte GetNodeBasic(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeBasic(_homeId, _nodeId);
      return recv_GetNodeBasic();
    }

    public void send_GetNodeBasic(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeBasic_args args = new GetNodeBasic_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeBasic", args);
    }

    public byte recv_GetNodeBasic() throws org.apache.thrift.TException
    {
      GetNodeBasic_result result = new GetNodeBasic_result();
      receiveBase(result, "GetNodeBasic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeBasic failed: unknown result");
    }

    public byte GetNodeGeneric(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeGeneric(_homeId, _nodeId);
      return recv_GetNodeGeneric();
    }

    public void send_GetNodeGeneric(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeGeneric_args args = new GetNodeGeneric_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeGeneric", args);
    }

    public byte recv_GetNodeGeneric() throws org.apache.thrift.TException
    {
      GetNodeGeneric_result result = new GetNodeGeneric_result();
      receiveBase(result, "GetNodeGeneric");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeGeneric failed: unknown result");
    }

    public byte GetNodeSpecific(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeSpecific(_homeId, _nodeId);
      return recv_GetNodeSpecific();
    }

    public void send_GetNodeSpecific(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeSpecific_args args = new GetNodeSpecific_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeSpecific", args);
    }

    public byte recv_GetNodeSpecific() throws org.apache.thrift.TException
    {
      GetNodeSpecific_result result = new GetNodeSpecific_result();
      receiveBase(result, "GetNodeSpecific");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeSpecific failed: unknown result");
    }

    public String GetNodeType(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeType(_homeId, _nodeId);
      return recv_GetNodeType();
    }

    public void send_GetNodeType(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeType_args args = new GetNodeType_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeType", args);
    }

    public String recv_GetNodeType() throws org.apache.thrift.TException
    {
      GetNodeType_result result = new GetNodeType_result();
      receiveBase(result, "GetNodeType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeType failed: unknown result");
    }

    public UInt32_ListByte GetNodeNeighbors(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeNeighbors(_homeId, _nodeId);
      return recv_GetNodeNeighbors();
    }

    public void send_GetNodeNeighbors(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeNeighbors_args args = new GetNodeNeighbors_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeNeighbors", args);
    }

    public UInt32_ListByte recv_GetNodeNeighbors() throws org.apache.thrift.TException
    {
      GetNodeNeighbors_result result = new GetNodeNeighbors_result();
      receiveBase(result, "GetNodeNeighbors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeNeighbors failed: unknown result");
    }

    public String GetNodeManufacturerName(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeManufacturerName(_homeId, _nodeId);
      return recv_GetNodeManufacturerName();
    }

    public void send_GetNodeManufacturerName(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeManufacturerName_args args = new GetNodeManufacturerName_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeManufacturerName", args);
    }

    public String recv_GetNodeManufacturerName() throws org.apache.thrift.TException
    {
      GetNodeManufacturerName_result result = new GetNodeManufacturerName_result();
      receiveBase(result, "GetNodeManufacturerName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeManufacturerName failed: unknown result");
    }

    public String GetNodeProductName(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeProductName(_homeId, _nodeId);
      return recv_GetNodeProductName();
    }

    public void send_GetNodeProductName(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeProductName_args args = new GetNodeProductName_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeProductName", args);
    }

    public String recv_GetNodeProductName() throws org.apache.thrift.TException
    {
      GetNodeProductName_result result = new GetNodeProductName_result();
      receiveBase(result, "GetNodeProductName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeProductName failed: unknown result");
    }

    public String GetNodeName(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeName(_homeId, _nodeId);
      return recv_GetNodeName();
    }

    public void send_GetNodeName(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeName_args args = new GetNodeName_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeName", args);
    }

    public String recv_GetNodeName() throws org.apache.thrift.TException
    {
      GetNodeName_result result = new GetNodeName_result();
      receiveBase(result, "GetNodeName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeName failed: unknown result");
    }

    public String GetNodeLocation(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeLocation(_homeId, _nodeId);
      return recv_GetNodeLocation();
    }

    public void send_GetNodeLocation(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeLocation_args args = new GetNodeLocation_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeLocation", args);
    }

    public String recv_GetNodeLocation() throws org.apache.thrift.TException
    {
      GetNodeLocation_result result = new GetNodeLocation_result();
      receiveBase(result, "GetNodeLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeLocation failed: unknown result");
    }

    public String GetNodeManufacturerId(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeManufacturerId(_homeId, _nodeId);
      return recv_GetNodeManufacturerId();
    }

    public void send_GetNodeManufacturerId(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeManufacturerId_args args = new GetNodeManufacturerId_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeManufacturerId", args);
    }

    public String recv_GetNodeManufacturerId() throws org.apache.thrift.TException
    {
      GetNodeManufacturerId_result result = new GetNodeManufacturerId_result();
      receiveBase(result, "GetNodeManufacturerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeManufacturerId failed: unknown result");
    }

    public String GetNodeProductType(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeProductType(_homeId, _nodeId);
      return recv_GetNodeProductType();
    }

    public void send_GetNodeProductType(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeProductType_args args = new GetNodeProductType_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeProductType", args);
    }

    public String recv_GetNodeProductType() throws org.apache.thrift.TException
    {
      GetNodeProductType_result result = new GetNodeProductType_result();
      receiveBase(result, "GetNodeProductType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeProductType failed: unknown result");
    }

    public String GetNodeProductId(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNodeProductId(_homeId, _nodeId);
      return recv_GetNodeProductId();
    }

    public void send_GetNodeProductId(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNodeProductId_args args = new GetNodeProductId_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNodeProductId", args);
    }

    public String recv_GetNodeProductId() throws org.apache.thrift.TException
    {
      GetNodeProductId_result result = new GetNodeProductId_result();
      receiveBase(result, "GetNodeProductId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeProductId failed: unknown result");
    }

    public void SetNodeManufacturerName(int _homeId, byte _nodeId, String _manufacturerName) throws org.apache.thrift.TException
    {
      send_SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName);
      recv_SetNodeManufacturerName();
    }

    public void send_SetNodeManufacturerName(int _homeId, byte _nodeId, String _manufacturerName) throws org.apache.thrift.TException
    {
      SetNodeManufacturerName_args args = new SetNodeManufacturerName_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_manufacturerName(_manufacturerName);
      sendBase("SetNodeManufacturerName", args);
    }

    public void recv_SetNodeManufacturerName() throws org.apache.thrift.TException
    {
      SetNodeManufacturerName_result result = new SetNodeManufacturerName_result();
      receiveBase(result, "SetNodeManufacturerName");
      return;
    }

    public void SetNodeProductName(int _homeId, byte _nodeId, String _productName) throws org.apache.thrift.TException
    {
      send_SetNodeProductName(_homeId, _nodeId, _productName);
      recv_SetNodeProductName();
    }

    public void send_SetNodeProductName(int _homeId, byte _nodeId, String _productName) throws org.apache.thrift.TException
    {
      SetNodeProductName_args args = new SetNodeProductName_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_productName(_productName);
      sendBase("SetNodeProductName", args);
    }

    public void recv_SetNodeProductName() throws org.apache.thrift.TException
    {
      SetNodeProductName_result result = new SetNodeProductName_result();
      receiveBase(result, "SetNodeProductName");
      return;
    }

    public void SetNodeName(int _homeId, byte _nodeId, String _nodeName) throws org.apache.thrift.TException
    {
      send_SetNodeName(_homeId, _nodeId, _nodeName);
      recv_SetNodeName();
    }

    public void send_SetNodeName(int _homeId, byte _nodeId, String _nodeName) throws org.apache.thrift.TException
    {
      SetNodeName_args args = new SetNodeName_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_nodeName(_nodeName);
      sendBase("SetNodeName", args);
    }

    public void recv_SetNodeName() throws org.apache.thrift.TException
    {
      SetNodeName_result result = new SetNodeName_result();
      receiveBase(result, "SetNodeName");
      return;
    }

    public void SetNodeLocation(int _homeId, byte _nodeId, String _location) throws org.apache.thrift.TException
    {
      send_SetNodeLocation(_homeId, _nodeId, _location);
      recv_SetNodeLocation();
    }

    public void send_SetNodeLocation(int _homeId, byte _nodeId, String _location) throws org.apache.thrift.TException
    {
      SetNodeLocation_args args = new SetNodeLocation_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_location(_location);
      sendBase("SetNodeLocation", args);
    }

    public void recv_SetNodeLocation() throws org.apache.thrift.TException
    {
      SetNodeLocation_result result = new SetNodeLocation_result();
      receiveBase(result, "SetNodeLocation");
      return;
    }

    public void SetNodeOn(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_SetNodeOn(_homeId, _nodeId);
      recv_SetNodeOn();
    }

    public void send_SetNodeOn(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      SetNodeOn_args args = new SetNodeOn_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("SetNodeOn", args);
    }

    public void recv_SetNodeOn() throws org.apache.thrift.TException
    {
      SetNodeOn_result result = new SetNodeOn_result();
      receiveBase(result, "SetNodeOn");
      return;
    }

    public void SetNodeOff(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_SetNodeOff(_homeId, _nodeId);
      recv_SetNodeOff();
    }

    public void send_SetNodeOff(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      SetNodeOff_args args = new SetNodeOff_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("SetNodeOff", args);
    }

    public void recv_SetNodeOff() throws org.apache.thrift.TException
    {
      SetNodeOff_result result = new SetNodeOff_result();
      receiveBase(result, "SetNodeOff");
      return;
    }

    public void SetNodeLevel(int _homeId, byte _nodeId, byte _level) throws org.apache.thrift.TException
    {
      send_SetNodeLevel(_homeId, _nodeId, _level);
      recv_SetNodeLevel();
    }

    public void send_SetNodeLevel(int _homeId, byte _nodeId, byte _level) throws org.apache.thrift.TException
    {
      SetNodeLevel_args args = new SetNodeLevel_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_level(_level);
      sendBase("SetNodeLevel", args);
    }

    public void recv_SetNodeLevel() throws org.apache.thrift.TException
    {
      SetNodeLevel_result result = new SetNodeLevel_result();
      receiveBase(result, "SetNodeLevel");
      return;
    }

    public boolean IsNodeInfoReceived(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_IsNodeInfoReceived(_homeId, _nodeId);
      return recv_IsNodeInfoReceived();
    }

    public void send_IsNodeInfoReceived(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      IsNodeInfoReceived_args args = new IsNodeInfoReceived_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("IsNodeInfoReceived", args);
    }

    public boolean recv_IsNodeInfoReceived() throws org.apache.thrift.TException
    {
      IsNodeInfoReceived_result result = new IsNodeInfoReceived_result();
      receiveBase(result, "IsNodeInfoReceived");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsNodeInfoReceived failed: unknown result");
    }

    public Bool_GetNodeClassInformation GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId) throws org.apache.thrift.TException
    {
      send_GetNodeClassInformation(_homeId, _nodeId, _commandClassId);
      return recv_GetNodeClassInformation();
    }

    public void send_GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId) throws org.apache.thrift.TException
    {
      GetNodeClassInformation_args args = new GetNodeClassInformation_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_commandClassId(_commandClassId);
      sendBase("GetNodeClassInformation", args);
    }

    public Bool_GetNodeClassInformation recv_GetNodeClassInformation() throws org.apache.thrift.TException
    {
      GetNodeClassInformation_result result = new GetNodeClassInformation_result();
      receiveBase(result, "GetNodeClassInformation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNodeClassInformation failed: unknown result");
    }

    public String GetValueLabel(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueLabel(_id);
      return recv_GetValueLabel();
    }

    public void send_GetValueLabel(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueLabel_args args = new GetValueLabel_args();
      args.set_id(_id);
      sendBase("GetValueLabel", args);
    }

    public String recv_GetValueLabel() throws org.apache.thrift.TException
    {
      GetValueLabel_result result = new GetValueLabel_result();
      receiveBase(result, "GetValueLabel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueLabel failed: unknown result");
    }

    public void SetValueLabel(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      send_SetValueLabel(_id, _value);
      recv_SetValueLabel();
    }

    public void send_SetValueLabel(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      SetValueLabel_args args = new SetValueLabel_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValueLabel", args);
    }

    public void recv_SetValueLabel() throws org.apache.thrift.TException
    {
      SetValueLabel_result result = new SetValueLabel_result();
      receiveBase(result, "SetValueLabel");
      return;
    }

    public String GetValueUnits(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueUnits(_id);
      return recv_GetValueUnits();
    }

    public void send_GetValueUnits(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueUnits_args args = new GetValueUnits_args();
      args.set_id(_id);
      sendBase("GetValueUnits", args);
    }

    public String recv_GetValueUnits() throws org.apache.thrift.TException
    {
      GetValueUnits_result result = new GetValueUnits_result();
      receiveBase(result, "GetValueUnits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueUnits failed: unknown result");
    }

    public void SetValueUnits(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      send_SetValueUnits(_id, _value);
      recv_SetValueUnits();
    }

    public void send_SetValueUnits(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      SetValueUnits_args args = new SetValueUnits_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValueUnits", args);
    }

    public void recv_SetValueUnits() throws org.apache.thrift.TException
    {
      SetValueUnits_result result = new SetValueUnits_result();
      receiveBase(result, "SetValueUnits");
      return;
    }

    public String GetValueHelp(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueHelp(_id);
      return recv_GetValueHelp();
    }

    public void send_GetValueHelp(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueHelp_args args = new GetValueHelp_args();
      args.set_id(_id);
      sendBase("GetValueHelp", args);
    }

    public String recv_GetValueHelp() throws org.apache.thrift.TException
    {
      GetValueHelp_result result = new GetValueHelp_result();
      receiveBase(result, "GetValueHelp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueHelp failed: unknown result");
    }

    public void SetValueHelp(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      send_SetValueHelp(_id, _value);
      recv_SetValueHelp();
    }

    public void send_SetValueHelp(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      SetValueHelp_args args = new SetValueHelp_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValueHelp", args);
    }

    public void recv_SetValueHelp() throws org.apache.thrift.TException
    {
      SetValueHelp_result result = new SetValueHelp_result();
      receiveBase(result, "SetValueHelp");
      return;
    }

    public int GetValueMin(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueMin(_id);
      return recv_GetValueMin();
    }

    public void send_GetValueMin(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueMin_args args = new GetValueMin_args();
      args.set_id(_id);
      sendBase("GetValueMin", args);
    }

    public int recv_GetValueMin() throws org.apache.thrift.TException
    {
      GetValueMin_result result = new GetValueMin_result();
      receiveBase(result, "GetValueMin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueMin failed: unknown result");
    }

    public int GetValueMax(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueMax(_id);
      return recv_GetValueMax();
    }

    public void send_GetValueMax(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueMax_args args = new GetValueMax_args();
      args.set_id(_id);
      sendBase("GetValueMax", args);
    }

    public int recv_GetValueMax() throws org.apache.thrift.TException
    {
      GetValueMax_result result = new GetValueMax_result();
      receiveBase(result, "GetValueMax");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueMax failed: unknown result");
    }

    public boolean IsValueReadOnly(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_IsValueReadOnly(_id);
      return recv_IsValueReadOnly();
    }

    public void send_IsValueReadOnly(RemoteValueID _id) throws org.apache.thrift.TException
    {
      IsValueReadOnly_args args = new IsValueReadOnly_args();
      args.set_id(_id);
      sendBase("IsValueReadOnly", args);
    }

    public boolean recv_IsValueReadOnly() throws org.apache.thrift.TException
    {
      IsValueReadOnly_result result = new IsValueReadOnly_result();
      receiveBase(result, "IsValueReadOnly");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsValueReadOnly failed: unknown result");
    }

    public boolean IsValueWriteOnly(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_IsValueWriteOnly(_id);
      return recv_IsValueWriteOnly();
    }

    public void send_IsValueWriteOnly(RemoteValueID _id) throws org.apache.thrift.TException
    {
      IsValueWriteOnly_args args = new IsValueWriteOnly_args();
      args.set_id(_id);
      sendBase("IsValueWriteOnly", args);
    }

    public boolean recv_IsValueWriteOnly() throws org.apache.thrift.TException
    {
      IsValueWriteOnly_result result = new IsValueWriteOnly_result();
      receiveBase(result, "IsValueWriteOnly");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsValueWriteOnly failed: unknown result");
    }

    public boolean IsValueSet(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_IsValueSet(_id);
      return recv_IsValueSet();
    }

    public void send_IsValueSet(RemoteValueID _id) throws org.apache.thrift.TException
    {
      IsValueSet_args args = new IsValueSet_args();
      args.set_id(_id);
      sendBase("IsValueSet", args);
    }

    public boolean recv_IsValueSet() throws org.apache.thrift.TException
    {
      IsValueSet_result result = new IsValueSet_result();
      receiveBase(result, "IsValueSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsValueSet failed: unknown result");
    }

    public boolean IsValuePolled(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_IsValuePolled(_id);
      return recv_IsValuePolled();
    }

    public void send_IsValuePolled(RemoteValueID _id) throws org.apache.thrift.TException
    {
      IsValuePolled_args args = new IsValuePolled_args();
      args.set_id(_id);
      sendBase("IsValuePolled", args);
    }

    public boolean recv_IsValuePolled() throws org.apache.thrift.TException
    {
      IsValuePolled_result result = new IsValuePolled_result();
      receiveBase(result, "IsValuePolled");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsValuePolled failed: unknown result");
    }

    public Bool_Bool GetValueAsBool(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueAsBool(_id);
      return recv_GetValueAsBool();
    }

    public void send_GetValueAsBool(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueAsBool_args args = new GetValueAsBool_args();
      args.set_id(_id);
      sendBase("GetValueAsBool", args);
    }

    public Bool_Bool recv_GetValueAsBool() throws org.apache.thrift.TException
    {
      GetValueAsBool_result result = new GetValueAsBool_result();
      receiveBase(result, "GetValueAsBool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueAsBool failed: unknown result");
    }

    public Bool_UInt8 GetValueAsByte(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueAsByte(_id);
      return recv_GetValueAsByte();
    }

    public void send_GetValueAsByte(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueAsByte_args args = new GetValueAsByte_args();
      args.set_id(_id);
      sendBase("GetValueAsByte", args);
    }

    public Bool_UInt8 recv_GetValueAsByte() throws org.apache.thrift.TException
    {
      GetValueAsByte_result result = new GetValueAsByte_result();
      receiveBase(result, "GetValueAsByte");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueAsByte failed: unknown result");
    }

    public Bool_Float GetValueAsFloat(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueAsFloat(_id);
      return recv_GetValueAsFloat();
    }

    public void send_GetValueAsFloat(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueAsFloat_args args = new GetValueAsFloat_args();
      args.set_id(_id);
      sendBase("GetValueAsFloat", args);
    }

    public Bool_Float recv_GetValueAsFloat() throws org.apache.thrift.TException
    {
      GetValueAsFloat_result result = new GetValueAsFloat_result();
      receiveBase(result, "GetValueAsFloat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueAsFloat failed: unknown result");
    }

    public Bool_Int GetValueAsInt(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueAsInt(_id);
      return recv_GetValueAsInt();
    }

    public void send_GetValueAsInt(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueAsInt_args args = new GetValueAsInt_args();
      args.set_id(_id);
      sendBase("GetValueAsInt", args);
    }

    public Bool_Int recv_GetValueAsInt() throws org.apache.thrift.TException
    {
      GetValueAsInt_result result = new GetValueAsInt_result();
      receiveBase(result, "GetValueAsInt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueAsInt failed: unknown result");
    }

    public Bool_Int16 GetValueAsShort(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueAsShort(_id);
      return recv_GetValueAsShort();
    }

    public void send_GetValueAsShort(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueAsShort_args args = new GetValueAsShort_args();
      args.set_id(_id);
      sendBase("GetValueAsShort", args);
    }

    public Bool_Int16 recv_GetValueAsShort() throws org.apache.thrift.TException
    {
      GetValueAsShort_result result = new GetValueAsShort_result();
      receiveBase(result, "GetValueAsShort");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueAsShort failed: unknown result");
    }

    public Bool_String GetValueAsString(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueAsString(_id);
      return recv_GetValueAsString();
    }

    public void send_GetValueAsString(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueAsString_args args = new GetValueAsString_args();
      args.set_id(_id);
      sendBase("GetValueAsString", args);
    }

    public Bool_String recv_GetValueAsString() throws org.apache.thrift.TException
    {
      GetValueAsString_result result = new GetValueAsString_result();
      receiveBase(result, "GetValueAsString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueAsString failed: unknown result");
    }

    public Bool_String GetValueListSelection_String(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueListSelection_String(_id);
      return recv_GetValueListSelection_String();
    }

    public void send_GetValueListSelection_String(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueListSelection_String_args args = new GetValueListSelection_String_args();
      args.set_id(_id);
      sendBase("GetValueListSelection_String", args);
    }

    public Bool_String recv_GetValueListSelection_String() throws org.apache.thrift.TException
    {
      GetValueListSelection_String_result result = new GetValueListSelection_String_result();
      receiveBase(result, "GetValueListSelection_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueListSelection_String failed: unknown result");
    }

    public Bool_Int GetValueListSelection_Int32(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueListSelection_Int32(_id);
      return recv_GetValueListSelection_Int32();
    }

    public void send_GetValueListSelection_Int32(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueListSelection_Int32_args args = new GetValueListSelection_Int32_args();
      args.set_id(_id);
      sendBase("GetValueListSelection_Int32", args);
    }

    public Bool_Int recv_GetValueListSelection_Int32() throws org.apache.thrift.TException
    {
      GetValueListSelection_Int32_result result = new GetValueListSelection_Int32_result();
      receiveBase(result, "GetValueListSelection_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueListSelection_Int32 failed: unknown result");
    }

    public Bool_ListString GetValueListItems(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueListItems(_id);
      return recv_GetValueListItems();
    }

    public void send_GetValueListItems(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueListItems_args args = new GetValueListItems_args();
      args.set_id(_id);
      sendBase("GetValueListItems", args);
    }

    public Bool_ListString recv_GetValueListItems() throws org.apache.thrift.TException
    {
      GetValueListItems_result result = new GetValueListItems_result();
      receiveBase(result, "GetValueListItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueListItems failed: unknown result");
    }

    public Bool_UInt8 GetValueFloatPrecision(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetValueFloatPrecision(_id);
      return recv_GetValueFloatPrecision();
    }

    public void send_GetValueFloatPrecision(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetValueFloatPrecision_args args = new GetValueFloatPrecision_args();
      args.set_id(_id);
      sendBase("GetValueFloatPrecision", args);
    }

    public Bool_UInt8 recv_GetValueFloatPrecision() throws org.apache.thrift.TException
    {
      GetValueFloatPrecision_result result = new GetValueFloatPrecision_result();
      receiveBase(result, "GetValueFloatPrecision");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetValueFloatPrecision failed: unknown result");
    }

    public boolean SetValue_Bool(RemoteValueID _id, boolean _value) throws org.apache.thrift.TException
    {
      send_SetValue_Bool(_id, _value);
      return recv_SetValue_Bool();
    }

    public void send_SetValue_Bool(RemoteValueID _id, boolean _value) throws org.apache.thrift.TException
    {
      SetValue_Bool_args args = new SetValue_Bool_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValue_Bool", args);
    }

    public boolean recv_SetValue_Bool() throws org.apache.thrift.TException
    {
      SetValue_Bool_result result = new SetValue_Bool_result();
      receiveBase(result, "SetValue_Bool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValue_Bool failed: unknown result");
    }

    public boolean SetValue_UInt8(RemoteValueID _id, byte _value) throws org.apache.thrift.TException
    {
      send_SetValue_UInt8(_id, _value);
      return recv_SetValue_UInt8();
    }

    public void send_SetValue_UInt8(RemoteValueID _id, byte _value) throws org.apache.thrift.TException
    {
      SetValue_UInt8_args args = new SetValue_UInt8_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValue_UInt8", args);
    }

    public boolean recv_SetValue_UInt8() throws org.apache.thrift.TException
    {
      SetValue_UInt8_result result = new SetValue_UInt8_result();
      receiveBase(result, "SetValue_UInt8");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValue_UInt8 failed: unknown result");
    }

    public boolean SetValue_Float(RemoteValueID _id, double _value) throws org.apache.thrift.TException
    {
      send_SetValue_Float(_id, _value);
      return recv_SetValue_Float();
    }

    public void send_SetValue_Float(RemoteValueID _id, double _value) throws org.apache.thrift.TException
    {
      SetValue_Float_args args = new SetValue_Float_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValue_Float", args);
    }

    public boolean recv_SetValue_Float() throws org.apache.thrift.TException
    {
      SetValue_Float_result result = new SetValue_Float_result();
      receiveBase(result, "SetValue_Float");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValue_Float failed: unknown result");
    }

    public boolean SetValue_Int32(RemoteValueID _id, int _value) throws org.apache.thrift.TException
    {
      send_SetValue_Int32(_id, _value);
      return recv_SetValue_Int32();
    }

    public void send_SetValue_Int32(RemoteValueID _id, int _value) throws org.apache.thrift.TException
    {
      SetValue_Int32_args args = new SetValue_Int32_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValue_Int32", args);
    }

    public boolean recv_SetValue_Int32() throws org.apache.thrift.TException
    {
      SetValue_Int32_result result = new SetValue_Int32_result();
      receiveBase(result, "SetValue_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValue_Int32 failed: unknown result");
    }

    public boolean SetValue_Int16(RemoteValueID _id, short _value) throws org.apache.thrift.TException
    {
      send_SetValue_Int16(_id, _value);
      return recv_SetValue_Int16();
    }

    public void send_SetValue_Int16(RemoteValueID _id, short _value) throws org.apache.thrift.TException
    {
      SetValue_Int16_args args = new SetValue_Int16_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValue_Int16", args);
    }

    public boolean recv_SetValue_Int16() throws org.apache.thrift.TException
    {
      SetValue_Int16_result result = new SetValue_Int16_result();
      receiveBase(result, "SetValue_Int16");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValue_Int16 failed: unknown result");
    }

    public boolean SetValue_String(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      send_SetValue_String(_id, _value);
      return recv_SetValue_String();
    }

    public void send_SetValue_String(RemoteValueID _id, String _value) throws org.apache.thrift.TException
    {
      SetValue_String_args args = new SetValue_String_args();
      args.set_id(_id);
      args.set_value(_value);
      sendBase("SetValue_String", args);
    }

    public boolean recv_SetValue_String() throws org.apache.thrift.TException
    {
      SetValue_String_result result = new SetValue_String_result();
      receiveBase(result, "SetValue_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValue_String failed: unknown result");
    }

    public boolean SetValueListSelection(RemoteValueID _id, String _selectedItem) throws org.apache.thrift.TException
    {
      send_SetValueListSelection(_id, _selectedItem);
      return recv_SetValueListSelection();
    }

    public void send_SetValueListSelection(RemoteValueID _id, String _selectedItem) throws org.apache.thrift.TException
    {
      SetValueListSelection_args args = new SetValueListSelection_args();
      args.set_id(_id);
      args.set_selectedItem(_selectedItem);
      sendBase("SetValueListSelection", args);
    }

    public boolean recv_SetValueListSelection() throws org.apache.thrift.TException
    {
      SetValueListSelection_result result = new SetValueListSelection_result();
      receiveBase(result, "SetValueListSelection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetValueListSelection failed: unknown result");
    }

    public boolean RefreshValue(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_RefreshValue(_id);
      return recv_RefreshValue();
    }

    public void send_RefreshValue(RemoteValueID _id) throws org.apache.thrift.TException
    {
      RefreshValue_args args = new RefreshValue_args();
      args.set_id(_id);
      sendBase("RefreshValue", args);
    }

    public boolean recv_RefreshValue() throws org.apache.thrift.TException
    {
      RefreshValue_result result = new RefreshValue_result();
      receiveBase(result, "RefreshValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RefreshValue failed: unknown result");
    }

    public void SetChangeVerified(RemoteValueID _id, boolean _verify) throws org.apache.thrift.TException
    {
      send_SetChangeVerified(_id, _verify);
      recv_SetChangeVerified();
    }

    public void send_SetChangeVerified(RemoteValueID _id, boolean _verify) throws org.apache.thrift.TException
    {
      SetChangeVerified_args args = new SetChangeVerified_args();
      args.set_id(_id);
      args.set_verify(_verify);
      sendBase("SetChangeVerified", args);
    }

    public void recv_SetChangeVerified() throws org.apache.thrift.TException
    {
      SetChangeVerified_result result = new SetChangeVerified_result();
      receiveBase(result, "SetChangeVerified");
      return;
    }

    public boolean PressButton(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_PressButton(_id);
      return recv_PressButton();
    }

    public void send_PressButton(RemoteValueID _id) throws org.apache.thrift.TException
    {
      PressButton_args args = new PressButton_args();
      args.set_id(_id);
      sendBase("PressButton", args);
    }

    public boolean recv_PressButton() throws org.apache.thrift.TException
    {
      PressButton_result result = new PressButton_result();
      receiveBase(result, "PressButton");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PressButton failed: unknown result");
    }

    public boolean ReleaseButton(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_ReleaseButton(_id);
      return recv_ReleaseButton();
    }

    public void send_ReleaseButton(RemoteValueID _id) throws org.apache.thrift.TException
    {
      ReleaseButton_args args = new ReleaseButton_args();
      args.set_id(_id);
      sendBase("ReleaseButton", args);
    }

    public boolean recv_ReleaseButton() throws org.apache.thrift.TException
    {
      ReleaseButton_result result = new ReleaseButton_result();
      receiveBase(result, "ReleaseButton");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReleaseButton failed: unknown result");
    }

    public byte GetNumSwitchPoints(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_GetNumSwitchPoints(_id);
      return recv_GetNumSwitchPoints();
    }

    public void send_GetNumSwitchPoints(RemoteValueID _id) throws org.apache.thrift.TException
    {
      GetNumSwitchPoints_args args = new GetNumSwitchPoints_args();
      args.set_id(_id);
      sendBase("GetNumSwitchPoints", args);
    }

    public byte recv_GetNumSwitchPoints() throws org.apache.thrift.TException
    {
      GetNumSwitchPoints_result result = new GetNumSwitchPoints_result();
      receiveBase(result, "GetNumSwitchPoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNumSwitchPoints failed: unknown result");
    }

    public boolean SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback) throws org.apache.thrift.TException
    {
      send_SetSwitchPoint(_id, _hours, _minutes, _setback);
      return recv_SetSwitchPoint();
    }

    public void send_SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback) throws org.apache.thrift.TException
    {
      SetSwitchPoint_args args = new SetSwitchPoint_args();
      args.set_id(_id);
      args.set_hours(_hours);
      args.set_minutes(_minutes);
      args.set_setback(_setback);
      sendBase("SetSwitchPoint", args);
    }

    public boolean recv_SetSwitchPoint() throws org.apache.thrift.TException
    {
      SetSwitchPoint_result result = new SetSwitchPoint_result();
      receiveBase(result, "SetSwitchPoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSwitchPoint failed: unknown result");
    }

    public boolean RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes) throws org.apache.thrift.TException
    {
      send_RemoveSwitchPoint(_id, _hours, _minutes);
      return recv_RemoveSwitchPoint();
    }

    public void send_RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes) throws org.apache.thrift.TException
    {
      RemoveSwitchPoint_args args = new RemoveSwitchPoint_args();
      args.set_id(_id);
      args.set_hours(_hours);
      args.set_minutes(_minutes);
      sendBase("RemoveSwitchPoint", args);
    }

    public boolean recv_RemoveSwitchPoint() throws org.apache.thrift.TException
    {
      RemoveSwitchPoint_result result = new RemoveSwitchPoint_result();
      receiveBase(result, "RemoveSwitchPoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveSwitchPoint failed: unknown result");
    }

    public void ClearSwitchPoints(RemoteValueID _id) throws org.apache.thrift.TException
    {
      send_ClearSwitchPoints(_id);
      recv_ClearSwitchPoints();
    }

    public void send_ClearSwitchPoints(RemoteValueID _id) throws org.apache.thrift.TException
    {
      ClearSwitchPoints_args args = new ClearSwitchPoints_args();
      args.set_id(_id);
      sendBase("ClearSwitchPoints", args);
    }

    public void recv_ClearSwitchPoints() throws org.apache.thrift.TException
    {
      ClearSwitchPoints_result result = new ClearSwitchPoints_result();
      receiveBase(result, "ClearSwitchPoints");
      return;
    }

    public GetSwitchPointReturnStruct GetSwitchPoint(RemoteValueID _id, byte _idx) throws org.apache.thrift.TException
    {
      send_GetSwitchPoint(_id, _idx);
      return recv_GetSwitchPoint();
    }

    public void send_GetSwitchPoint(RemoteValueID _id, byte _idx) throws org.apache.thrift.TException
    {
      GetSwitchPoint_args args = new GetSwitchPoint_args();
      args.set_id(_id);
      args.set_idx(_idx);
      sendBase("GetSwitchPoint", args);
    }

    public GetSwitchPointReturnStruct recv_GetSwitchPoint() throws org.apache.thrift.TException
    {
      GetSwitchPoint_result result = new GetSwitchPoint_result();
      receiveBase(result, "GetSwitchPoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSwitchPoint failed: unknown result");
    }

    public void SwitchAllOn(int _homeId) throws org.apache.thrift.TException
    {
      send_SwitchAllOn(_homeId);
      recv_SwitchAllOn();
    }

    public void send_SwitchAllOn(int _homeId) throws org.apache.thrift.TException
    {
      SwitchAllOn_args args = new SwitchAllOn_args();
      args.set_homeId(_homeId);
      sendBase("SwitchAllOn", args);
    }

    public void recv_SwitchAllOn() throws org.apache.thrift.TException
    {
      SwitchAllOn_result result = new SwitchAllOn_result();
      receiveBase(result, "SwitchAllOn");
      return;
    }

    public void SwitchAllOff(int _homeId) throws org.apache.thrift.TException
    {
      send_SwitchAllOff(_homeId);
      recv_SwitchAllOff();
    }

    public void send_SwitchAllOff(int _homeId) throws org.apache.thrift.TException
    {
      SwitchAllOff_args args = new SwitchAllOff_args();
      args.set_homeId(_homeId);
      sendBase("SwitchAllOff", args);
    }

    public void recv_SwitchAllOff() throws org.apache.thrift.TException
    {
      SwitchAllOff_result result = new SwitchAllOff_result();
      receiveBase(result, "SwitchAllOff");
      return;
    }

    public boolean SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size) throws org.apache.thrift.TException
    {
      send_SetConfigParam(_homeId, _nodeId, _param, _value, _size);
      return recv_SetConfigParam();
    }

    public void send_SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size) throws org.apache.thrift.TException
    {
      SetConfigParam_args args = new SetConfigParam_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_param(_param);
      args.set_value(_value);
      args.set_size(_size);
      sendBase("SetConfigParam", args);
    }

    public boolean recv_SetConfigParam() throws org.apache.thrift.TException
    {
      SetConfigParam_result result = new SetConfigParam_result();
      receiveBase(result, "SetConfigParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetConfigParam failed: unknown result");
    }

    public void RequestConfigParam(int _homeId, byte _nodeId, byte _param) throws org.apache.thrift.TException
    {
      send_RequestConfigParam(_homeId, _nodeId, _param);
      recv_RequestConfigParam();
    }

    public void send_RequestConfigParam(int _homeId, byte _nodeId, byte _param) throws org.apache.thrift.TException
    {
      RequestConfigParam_args args = new RequestConfigParam_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_param(_param);
      sendBase("RequestConfigParam", args);
    }

    public void recv_RequestConfigParam() throws org.apache.thrift.TException
    {
      RequestConfigParam_result result = new RequestConfigParam_result();
      receiveBase(result, "RequestConfigParam");
      return;
    }

    public void RequestAllConfigParams(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_RequestAllConfigParams(_homeId, _nodeId);
      recv_RequestAllConfigParams();
    }

    public void send_RequestAllConfigParams(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      RequestAllConfigParams_args args = new RequestAllConfigParams_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("RequestAllConfigParams", args);
    }

    public void recv_RequestAllConfigParams() throws org.apache.thrift.TException
    {
      RequestAllConfigParams_result result = new RequestAllConfigParams_result();
      receiveBase(result, "RequestAllConfigParams");
      return;
    }

    public byte GetNumGroups(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      send_GetNumGroups(_homeId, _nodeId);
      return recv_GetNumGroups();
    }

    public void send_GetNumGroups(int _homeId, byte _nodeId) throws org.apache.thrift.TException
    {
      GetNumGroups_args args = new GetNumGroups_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      sendBase("GetNumGroups", args);
    }

    public byte recv_GetNumGroups() throws org.apache.thrift.TException
    {
      GetNumGroups_result result = new GetNumGroups_result();
      receiveBase(result, "GetNumGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNumGroups failed: unknown result");
    }

    public GetAssociationsReturnStruct GetAssociations(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException
    {
      send_GetAssociations(_homeId, _nodeId, _groupIdx);
      return recv_GetAssociations();
    }

    public void send_GetAssociations(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException
    {
      GetAssociations_args args = new GetAssociations_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_groupIdx(_groupIdx);
      sendBase("GetAssociations", args);
    }

    public GetAssociationsReturnStruct recv_GetAssociations() throws org.apache.thrift.TException
    {
      GetAssociations_result result = new GetAssociations_result();
      receiveBase(result, "GetAssociations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAssociations failed: unknown result");
    }

    public byte GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException
    {
      send_GetMaxAssociations(_homeId, _nodeId, _groupIdx);
      return recv_GetMaxAssociations();
    }

    public void send_GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException
    {
      GetMaxAssociations_args args = new GetMaxAssociations_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_groupIdx(_groupIdx);
      sendBase("GetMaxAssociations", args);
    }

    public byte recv_GetMaxAssociations() throws org.apache.thrift.TException
    {
      GetMaxAssociations_result result = new GetMaxAssociations_result();
      receiveBase(result, "GetMaxAssociations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMaxAssociations failed: unknown result");
    }

    public String GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException
    {
      send_GetGroupLabel(_homeId, _nodeId, _groupIdx);
      return recv_GetGroupLabel();
    }

    public void send_GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx) throws org.apache.thrift.TException
    {
      GetGroupLabel_args args = new GetGroupLabel_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_groupIdx(_groupIdx);
      sendBase("GetGroupLabel", args);
    }

    public String recv_GetGroupLabel() throws org.apache.thrift.TException
    {
      GetGroupLabel_result result = new GetGroupLabel_result();
      receiveBase(result, "GetGroupLabel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetGroupLabel failed: unknown result");
    }

    public void AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId) throws org.apache.thrift.TException
    {
      send_AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
      recv_AddAssociation();
    }

    public void send_AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId) throws org.apache.thrift.TException
    {
      AddAssociation_args args = new AddAssociation_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_groupIdx(_groupIdx);
      args.set_targetNodeId(_targetNodeId);
      sendBase("AddAssociation", args);
    }

    public void recv_AddAssociation() throws org.apache.thrift.TException
    {
      AddAssociation_result result = new AddAssociation_result();
      receiveBase(result, "AddAssociation");
      return;
    }

    public void RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId) throws org.apache.thrift.TException
    {
      send_RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
      recv_RemoveAssociation();
    }

    public void send_RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId) throws org.apache.thrift.TException
    {
      RemoveAssociation_args args = new RemoveAssociation_args();
      args.set_homeId(_homeId);
      args.set_nodeId(_nodeId);
      args.set_groupIdx(_groupIdx);
      args.set_targetNodeId(_targetNodeId);
      sendBase("RemoveAssociation", args);
    }

    public void recv_RemoveAssociation() throws org.apache.thrift.TException
    {
      RemoveAssociation_result result = new RemoveAssociation_result();
      receiveBase(result, "RemoveAssociation");
      return;
    }

    public void ResetController(int _homeId) throws org.apache.thrift.TException
    {
      send_ResetController(_homeId);
      recv_ResetController();
    }

    public void send_ResetController(int _homeId) throws org.apache.thrift.TException
    {
      ResetController_args args = new ResetController_args();
      args.set_homeId(_homeId);
      sendBase("ResetController", args);
    }

    public void recv_ResetController() throws org.apache.thrift.TException
    {
      ResetController_result result = new ResetController_result();
      receiveBase(result, "ResetController");
      return;
    }

    public void SoftReset(int _homeId) throws org.apache.thrift.TException
    {
      send_SoftReset(_homeId);
      recv_SoftReset();
    }

    public void send_SoftReset(int _homeId) throws org.apache.thrift.TException
    {
      SoftReset_args args = new SoftReset_args();
      args.set_homeId(_homeId);
      sendBase("SoftReset", args);
    }

    public void recv_SoftReset() throws org.apache.thrift.TException
    {
      SoftReset_result result = new SoftReset_result();
      receiveBase(result, "SoftReset");
      return;
    }

    public boolean BeginControllerCommand(int _homeId, DriverControllerCommand _command, boolean _highPower, byte _nodeId, byte _arg) throws org.apache.thrift.TException
    {
      send_BeginControllerCommand(_homeId, _command, _highPower, _nodeId, _arg);
      return recv_BeginControllerCommand();
    }

    public void send_BeginControllerCommand(int _homeId, DriverControllerCommand _command, boolean _highPower, byte _nodeId, byte _arg) throws org.apache.thrift.TException
    {
      BeginControllerCommand_args args = new BeginControllerCommand_args();
      args.set_homeId(_homeId);
      args.set_command(_command);
      args.set_highPower(_highPower);
      args.set_nodeId(_nodeId);
      args.set_arg(_arg);
      sendBase("BeginControllerCommand", args);
    }

    public boolean recv_BeginControllerCommand() throws org.apache.thrift.TException
    {
      BeginControllerCommand_result result = new BeginControllerCommand_result();
      receiveBase(result, "BeginControllerCommand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BeginControllerCommand failed: unknown result");
    }

    public boolean CancelControllerCommand(int _homeId) throws org.apache.thrift.TException
    {
      send_CancelControllerCommand(_homeId);
      return recv_CancelControllerCommand();
    }

    public void send_CancelControllerCommand(int _homeId) throws org.apache.thrift.TException
    {
      CancelControllerCommand_args args = new CancelControllerCommand_args();
      args.set_homeId(_homeId);
      sendBase("CancelControllerCommand", args);
    }

    public boolean recv_CancelControllerCommand() throws org.apache.thrift.TException
    {
      CancelControllerCommand_result result = new CancelControllerCommand_result();
      receiveBase(result, "CancelControllerCommand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CancelControllerCommand failed: unknown result");
    }

    public byte GetNumScenes() throws org.apache.thrift.TException
    {
      send_GetNumScenes();
      return recv_GetNumScenes();
    }

    public void send_GetNumScenes() throws org.apache.thrift.TException
    {
      GetNumScenes_args args = new GetNumScenes_args();
      sendBase("GetNumScenes", args);
    }

    public byte recv_GetNumScenes() throws org.apache.thrift.TException
    {
      GetNumScenes_result result = new GetNumScenes_result();
      receiveBase(result, "GetNumScenes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetNumScenes failed: unknown result");
    }

    public GetAllScenesReturnStruct GetAllScenes() throws org.apache.thrift.TException
    {
      send_GetAllScenes();
      return recv_GetAllScenes();
    }

    public void send_GetAllScenes() throws org.apache.thrift.TException
    {
      GetAllScenes_args args = new GetAllScenes_args();
      sendBase("GetAllScenes", args);
    }

    public GetAllScenesReturnStruct recv_GetAllScenes() throws org.apache.thrift.TException
    {
      GetAllScenes_result result = new GetAllScenes_result();
      receiveBase(result, "GetAllScenes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllScenes failed: unknown result");
    }

    public byte CreateScene() throws org.apache.thrift.TException
    {
      send_CreateScene();
      return recv_CreateScene();
    }

    public void send_CreateScene() throws org.apache.thrift.TException
    {
      CreateScene_args args = new CreateScene_args();
      sendBase("CreateScene", args);
    }

    public byte recv_CreateScene() throws org.apache.thrift.TException
    {
      CreateScene_result result = new CreateScene_result();
      receiveBase(result, "CreateScene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateScene failed: unknown result");
    }

    public boolean RemoveScene(byte _sceneId) throws org.apache.thrift.TException
    {
      send_RemoveScene(_sceneId);
      return recv_RemoveScene();
    }

    public void send_RemoveScene(byte _sceneId) throws org.apache.thrift.TException
    {
      RemoveScene_args args = new RemoveScene_args();
      args.set_sceneId(_sceneId);
      sendBase("RemoveScene", args);
    }

    public boolean recv_RemoveScene() throws org.apache.thrift.TException
    {
      RemoveScene_result result = new RemoveScene_result();
      receiveBase(result, "RemoveScene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveScene failed: unknown result");
    }

    public boolean AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value) throws org.apache.thrift.TException
    {
      send_AddSceneValue_Bool(_sceneId, _valueId, _value);
      return recv_AddSceneValue_Bool();
    }

    public void send_AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value) throws org.apache.thrift.TException
    {
      AddSceneValue_Bool_args args = new AddSceneValue_Bool_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValue_Bool", args);
    }

    public boolean recv_AddSceneValue_Bool() throws org.apache.thrift.TException
    {
      AddSceneValue_Bool_result result = new AddSceneValue_Bool_result();
      receiveBase(result, "AddSceneValue_Bool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValue_Bool failed: unknown result");
    }

    public boolean AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value) throws org.apache.thrift.TException
    {
      send_AddSceneValue_Uint8(_sceneId, _valueId, _value);
      return recv_AddSceneValue_Uint8();
    }

    public void send_AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value) throws org.apache.thrift.TException
    {
      AddSceneValue_Uint8_args args = new AddSceneValue_Uint8_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValue_Uint8", args);
    }

    public boolean recv_AddSceneValue_Uint8() throws org.apache.thrift.TException
    {
      AddSceneValue_Uint8_result result = new AddSceneValue_Uint8_result();
      receiveBase(result, "AddSceneValue_Uint8");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValue_Uint8 failed: unknown result");
    }

    public boolean AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value) throws org.apache.thrift.TException
    {
      send_AddSceneValue_Float(_sceneId, _valueId, _value);
      return recv_AddSceneValue_Float();
    }

    public void send_AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value) throws org.apache.thrift.TException
    {
      AddSceneValue_Float_args args = new AddSceneValue_Float_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValue_Float", args);
    }

    public boolean recv_AddSceneValue_Float() throws org.apache.thrift.TException
    {
      AddSceneValue_Float_result result = new AddSceneValue_Float_result();
      receiveBase(result, "AddSceneValue_Float");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValue_Float failed: unknown result");
    }

    public boolean AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      send_AddSceneValue_Int32(_sceneId, _valueId, _value);
      return recv_AddSceneValue_Int32();
    }

    public void send_AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      AddSceneValue_Int32_args args = new AddSceneValue_Int32_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValue_Int32", args);
    }

    public boolean recv_AddSceneValue_Int32() throws org.apache.thrift.TException
    {
      AddSceneValue_Int32_result result = new AddSceneValue_Int32_result();
      receiveBase(result, "AddSceneValue_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValue_Int32 failed: unknown result");
    }

    public boolean AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value) throws org.apache.thrift.TException
    {
      send_AddSceneValue_Int16(_sceneId, _valueId, _value);
      return recv_AddSceneValue_Int16();
    }

    public void send_AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value) throws org.apache.thrift.TException
    {
      AddSceneValue_Int16_args args = new AddSceneValue_Int16_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValue_Int16", args);
    }

    public boolean recv_AddSceneValue_Int16() throws org.apache.thrift.TException
    {
      AddSceneValue_Int16_result result = new AddSceneValue_Int16_result();
      receiveBase(result, "AddSceneValue_Int16");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValue_Int16 failed: unknown result");
    }

    public boolean AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      send_AddSceneValue_String(_sceneId, _valueId, _value);
      return recv_AddSceneValue_String();
    }

    public void send_AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      AddSceneValue_String_args args = new AddSceneValue_String_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValue_String", args);
    }

    public boolean recv_AddSceneValue_String() throws org.apache.thrift.TException
    {
      AddSceneValue_String_result result = new AddSceneValue_String_result();
      receiveBase(result, "AddSceneValue_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValue_String failed: unknown result");
    }

    public boolean AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      send_AddSceneValueListSelection_String(_sceneId, _valueId, _value);
      return recv_AddSceneValueListSelection_String();
    }

    public void send_AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      AddSceneValueListSelection_String_args args = new AddSceneValueListSelection_String_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValueListSelection_String", args);
    }

    public boolean recv_AddSceneValueListSelection_String() throws org.apache.thrift.TException
    {
      AddSceneValueListSelection_String_result result = new AddSceneValueListSelection_String_result();
      receiveBase(result, "AddSceneValueListSelection_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValueListSelection_String failed: unknown result");
    }

    public boolean AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      send_AddSceneValueListSelection_Int32(_sceneId, _valueId, _value);
      return recv_AddSceneValueListSelection_Int32();
    }

    public void send_AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      AddSceneValueListSelection_Int32_args args = new AddSceneValueListSelection_Int32_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("AddSceneValueListSelection_Int32", args);
    }

    public boolean recv_AddSceneValueListSelection_Int32() throws org.apache.thrift.TException
    {
      AddSceneValueListSelection_Int32_result result = new AddSceneValueListSelection_Int32_result();
      receiveBase(result, "AddSceneValueListSelection_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddSceneValueListSelection_Int32 failed: unknown result");
    }

    public boolean RemoveSceneValue(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_RemoveSceneValue(_sceneId, _valueId);
      return recv_RemoveSceneValue();
    }

    public void send_RemoveSceneValue(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      RemoveSceneValue_args args = new RemoveSceneValue_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("RemoveSceneValue", args);
    }

    public boolean recv_RemoveSceneValue() throws org.apache.thrift.TException
    {
      RemoveSceneValue_result result = new RemoveSceneValue_result();
      receiveBase(result, "RemoveSceneValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RemoveSceneValue failed: unknown result");
    }

    public SceneGetValuesReturnStruct SceneGetValues(byte _sceneId) throws org.apache.thrift.TException
    {
      send_SceneGetValues(_sceneId);
      return recv_SceneGetValues();
    }

    public void send_SceneGetValues(byte _sceneId) throws org.apache.thrift.TException
    {
      SceneGetValues_args args = new SceneGetValues_args();
      args.set_sceneId(_sceneId);
      sendBase("SceneGetValues", args);
    }

    public SceneGetValuesReturnStruct recv_SceneGetValues() throws org.apache.thrift.TException
    {
      SceneGetValues_result result = new SceneGetValues_result();
      receiveBase(result, "SceneGetValues");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValues failed: unknown result");
    }

    public Bool_Bool SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueAsBool(_sceneId, _valueId);
      return recv_SceneGetValueAsBool();
    }

    public void send_SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueAsBool_args args = new SceneGetValueAsBool_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueAsBool", args);
    }

    public Bool_Bool recv_SceneGetValueAsBool() throws org.apache.thrift.TException
    {
      SceneGetValueAsBool_result result = new SceneGetValueAsBool_result();
      receiveBase(result, "SceneGetValueAsBool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueAsBool failed: unknown result");
    }

    public Bool_UInt8 SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueAsByte(_sceneId, _valueId);
      return recv_SceneGetValueAsByte();
    }

    public void send_SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueAsByte_args args = new SceneGetValueAsByte_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueAsByte", args);
    }

    public Bool_UInt8 recv_SceneGetValueAsByte() throws org.apache.thrift.TException
    {
      SceneGetValueAsByte_result result = new SceneGetValueAsByte_result();
      receiveBase(result, "SceneGetValueAsByte");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueAsByte failed: unknown result");
    }

    public Bool_Float SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueAsFloat(_sceneId, _valueId);
      return recv_SceneGetValueAsFloat();
    }

    public void send_SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueAsFloat_args args = new SceneGetValueAsFloat_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueAsFloat", args);
    }

    public Bool_Float recv_SceneGetValueAsFloat() throws org.apache.thrift.TException
    {
      SceneGetValueAsFloat_result result = new SceneGetValueAsFloat_result();
      receiveBase(result, "SceneGetValueAsFloat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueAsFloat failed: unknown result");
    }

    public Bool_Int SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueAsInt(_sceneId, _valueId);
      return recv_SceneGetValueAsInt();
    }

    public void send_SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueAsInt_args args = new SceneGetValueAsInt_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueAsInt", args);
    }

    public Bool_Int recv_SceneGetValueAsInt() throws org.apache.thrift.TException
    {
      SceneGetValueAsInt_result result = new SceneGetValueAsInt_result();
      receiveBase(result, "SceneGetValueAsInt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueAsInt failed: unknown result");
    }

    public Bool_Int16 SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueAsShort(_sceneId, _valueId);
      return recv_SceneGetValueAsShort();
    }

    public void send_SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueAsShort_args args = new SceneGetValueAsShort_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueAsShort", args);
    }

    public Bool_Int16 recv_SceneGetValueAsShort() throws org.apache.thrift.TException
    {
      SceneGetValueAsShort_result result = new SceneGetValueAsShort_result();
      receiveBase(result, "SceneGetValueAsShort");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueAsShort failed: unknown result");
    }

    public Bool_String SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueAsString(_sceneId, _valueId);
      return recv_SceneGetValueAsString();
    }

    public void send_SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueAsString_args args = new SceneGetValueAsString_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueAsString", args);
    }

    public Bool_String recv_SceneGetValueAsString() throws org.apache.thrift.TException
    {
      SceneGetValueAsString_result result = new SceneGetValueAsString_result();
      receiveBase(result, "SceneGetValueAsString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueAsString failed: unknown result");
    }

    public Bool_String SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueListSelection_String(_sceneId, _valueId);
      return recv_SceneGetValueListSelection_String();
    }

    public void send_SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueListSelection_String_args args = new SceneGetValueListSelection_String_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueListSelection_String", args);
    }

    public Bool_String recv_SceneGetValueListSelection_String() throws org.apache.thrift.TException
    {
      SceneGetValueListSelection_String_result result = new SceneGetValueListSelection_String_result();
      receiveBase(result, "SceneGetValueListSelection_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueListSelection_String failed: unknown result");
    }

    public Bool_Int SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      send_SceneGetValueListSelection_Int32(_sceneId, _valueId);
      return recv_SceneGetValueListSelection_Int32();
    }

    public void send_SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId) throws org.apache.thrift.TException
    {
      SceneGetValueListSelection_Int32_args args = new SceneGetValueListSelection_Int32_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      sendBase("SceneGetValueListSelection_Int32", args);
    }

    public Bool_Int recv_SceneGetValueListSelection_Int32() throws org.apache.thrift.TException
    {
      SceneGetValueListSelection_Int32_result result = new SceneGetValueListSelection_Int32_result();
      receiveBase(result, "SceneGetValueListSelection_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneGetValueListSelection_Int32 failed: unknown result");
    }

    public boolean SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value) throws org.apache.thrift.TException
    {
      send_SetSceneValue_Bool(_sceneId, _valueId, _value);
      return recv_SetSceneValue_Bool();
    }

    public void send_SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value) throws org.apache.thrift.TException
    {
      SetSceneValue_Bool_args args = new SetSceneValue_Bool_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValue_Bool", args);
    }

    public boolean recv_SetSceneValue_Bool() throws org.apache.thrift.TException
    {
      SetSceneValue_Bool_result result = new SetSceneValue_Bool_result();
      receiveBase(result, "SetSceneValue_Bool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValue_Bool failed: unknown result");
    }

    public boolean SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value) throws org.apache.thrift.TException
    {
      send_SetSceneValue_Uint8(_sceneId, _valueId, _value);
      return recv_SetSceneValue_Uint8();
    }

    public void send_SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value) throws org.apache.thrift.TException
    {
      SetSceneValue_Uint8_args args = new SetSceneValue_Uint8_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValue_Uint8", args);
    }

    public boolean recv_SetSceneValue_Uint8() throws org.apache.thrift.TException
    {
      SetSceneValue_Uint8_result result = new SetSceneValue_Uint8_result();
      receiveBase(result, "SetSceneValue_Uint8");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValue_Uint8 failed: unknown result");
    }

    public boolean SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value) throws org.apache.thrift.TException
    {
      send_SetSceneValue_Float(_sceneId, _valueId, _value);
      return recv_SetSceneValue_Float();
    }

    public void send_SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value) throws org.apache.thrift.TException
    {
      SetSceneValue_Float_args args = new SetSceneValue_Float_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValue_Float", args);
    }

    public boolean recv_SetSceneValue_Float() throws org.apache.thrift.TException
    {
      SetSceneValue_Float_result result = new SetSceneValue_Float_result();
      receiveBase(result, "SetSceneValue_Float");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValue_Float failed: unknown result");
    }

    public boolean SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      send_SetSceneValue_Int32(_sceneId, _valueId, _value);
      return recv_SetSceneValue_Int32();
    }

    public void send_SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      SetSceneValue_Int32_args args = new SetSceneValue_Int32_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValue_Int32", args);
    }

    public boolean recv_SetSceneValue_Int32() throws org.apache.thrift.TException
    {
      SetSceneValue_Int32_result result = new SetSceneValue_Int32_result();
      receiveBase(result, "SetSceneValue_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValue_Int32 failed: unknown result");
    }

    public boolean SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value) throws org.apache.thrift.TException
    {
      send_SetSceneValue_Int16(_sceneId, _valueId, _value);
      return recv_SetSceneValue_Int16();
    }

    public void send_SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value) throws org.apache.thrift.TException
    {
      SetSceneValue_Int16_args args = new SetSceneValue_Int16_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValue_Int16", args);
    }

    public boolean recv_SetSceneValue_Int16() throws org.apache.thrift.TException
    {
      SetSceneValue_Int16_result result = new SetSceneValue_Int16_result();
      receiveBase(result, "SetSceneValue_Int16");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValue_Int16 failed: unknown result");
    }

    public boolean SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      send_SetSceneValue_String(_sceneId, _valueId, _value);
      return recv_SetSceneValue_String();
    }

    public void send_SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      SetSceneValue_String_args args = new SetSceneValue_String_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValue_String", args);
    }

    public boolean recv_SetSceneValue_String() throws org.apache.thrift.TException
    {
      SetSceneValue_String_result result = new SetSceneValue_String_result();
      receiveBase(result, "SetSceneValue_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValue_String failed: unknown result");
    }

    public boolean SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      send_SetSceneValueListSelection_String(_sceneId, _valueId, _value);
      return recv_SetSceneValueListSelection_String();
    }

    public void send_SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value) throws org.apache.thrift.TException
    {
      SetSceneValueListSelection_String_args args = new SetSceneValueListSelection_String_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValueListSelection_String", args);
    }

    public boolean recv_SetSceneValueListSelection_String() throws org.apache.thrift.TException
    {
      SetSceneValueListSelection_String_result result = new SetSceneValueListSelection_String_result();
      receiveBase(result, "SetSceneValueListSelection_String");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValueListSelection_String failed: unknown result");
    }

    public boolean SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      send_SetSceneValueListSelection_Int32(_sceneId, _valueId, _value);
      return recv_SetSceneValueListSelection_Int32();
    }

    public void send_SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value) throws org.apache.thrift.TException
    {
      SetSceneValueListSelection_Int32_args args = new SetSceneValueListSelection_Int32_args();
      args.set_sceneId(_sceneId);
      args.set_valueId(_valueId);
      args.set_value(_value);
      sendBase("SetSceneValueListSelection_Int32", args);
    }

    public boolean recv_SetSceneValueListSelection_Int32() throws org.apache.thrift.TException
    {
      SetSceneValueListSelection_Int32_result result = new SetSceneValueListSelection_Int32_result();
      receiveBase(result, "SetSceneValueListSelection_Int32");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SetSceneValueListSelection_Int32 failed: unknown result");
    }

    public String GetSceneLabel(byte _sceneId) throws org.apache.thrift.TException
    {
      send_GetSceneLabel(_sceneId);
      return recv_GetSceneLabel();
    }

    public void send_GetSceneLabel(byte _sceneId) throws org.apache.thrift.TException
    {
      GetSceneLabel_args args = new GetSceneLabel_args();
      args.set_sceneId(_sceneId);
      sendBase("GetSceneLabel", args);
    }

    public String recv_GetSceneLabel() throws org.apache.thrift.TException
    {
      GetSceneLabel_result result = new GetSceneLabel_result();
      receiveBase(result, "GetSceneLabel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSceneLabel failed: unknown result");
    }

    public void SetSceneLabel(byte _sceneId, String _value) throws org.apache.thrift.TException
    {
      send_SetSceneLabel(_sceneId, _value);
      recv_SetSceneLabel();
    }

    public void send_SetSceneLabel(byte _sceneId, String _value) throws org.apache.thrift.TException
    {
      SetSceneLabel_args args = new SetSceneLabel_args();
      args.set_sceneId(_sceneId);
      args.set_value(_value);
      sendBase("SetSceneLabel", args);
    }

    public void recv_SetSceneLabel() throws org.apache.thrift.TException
    {
      SetSceneLabel_result result = new SetSceneLabel_result();
      receiveBase(result, "SetSceneLabel");
      return;
    }

    public boolean SceneExists(byte _sceneId) throws org.apache.thrift.TException
    {
      send_SceneExists(_sceneId);
      return recv_SceneExists();
    }

    public void send_SceneExists(byte _sceneId) throws org.apache.thrift.TException
    {
      SceneExists_args args = new SceneExists_args();
      args.set_sceneId(_sceneId);
      sendBase("SceneExists", args);
    }

    public boolean recv_SceneExists() throws org.apache.thrift.TException
    {
      SceneExists_result result = new SceneExists_result();
      receiveBase(result, "SceneExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SceneExists failed: unknown result");
    }

    public boolean ActivateScene(byte _sceneId) throws org.apache.thrift.TException
    {
      send_ActivateScene(_sceneId);
      return recv_ActivateScene();
    }

    public void send_ActivateScene(byte _sceneId) throws org.apache.thrift.TException
    {
      ActivateScene_args args = new ActivateScene_args();
      args.set_sceneId(_sceneId);
      sendBase("ActivateScene", args);
    }

    public boolean recv_ActivateScene() throws org.apache.thrift.TException
    {
      ActivateScene_result result = new ActivateScene_result();
      receiveBase(result, "ActivateScene");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ActivateScene failed: unknown result");
    }

    public GetDriverStatisticsReturnStruct GetDriverStatistics(int _homeId) throws org.apache.thrift.TException
    {
      send_GetDriverStatistics(_homeId);
      return recv_GetDriverStatistics();
    }

    public void send_GetDriverStatistics(int _homeId) throws org.apache.thrift.TException
    {
      GetDriverStatistics_args args = new GetDriverStatistics_args();
      args.set_homeId(_homeId);
      sendBase("GetDriverStatistics", args);
    }

    public GetDriverStatisticsReturnStruct recv_GetDriverStatistics() throws org.apache.thrift.TException
    {
      GetDriverStatistics_result result = new GetDriverStatistics_result();
      receiveBase(result, "GetDriverStatistics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetDriverStatistics failed: unknown result");
    }

    public void SendAllValues() throws org.apache.thrift.TException
    {
      send_SendAllValues();
      recv_SendAllValues();
    }

    public void send_SendAllValues() throws org.apache.thrift.TException
    {
      SendAllValues_args args = new SendAllValues_args();
      sendBase("SendAllValues", args);
    }

    public void recv_SendAllValues() throws org.apache.thrift.TException
    {
      SendAllValues_result result = new SendAllValues_result();
      receiveBase(result, "SendAllValues");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void WriteConfig(int _homeId, org.apache.thrift.async.AsyncMethodCallback<WriteConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      WriteConfig_call method_call = new WriteConfig_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class WriteConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public WriteConfig_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<WriteConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("WriteConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WriteConfig_args args = new WriteConfig_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_WriteConfig();
      }
    }

    public void GetControllerNodeId(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetControllerNodeId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetControllerNodeId_call method_call = new GetControllerNodeId_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetControllerNodeId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public GetControllerNodeId_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetControllerNodeId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetControllerNodeId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetControllerNodeId_args args = new GetControllerNodeId_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetControllerNodeId();
      }
    }

    public void IsPrimaryController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<IsPrimaryController_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsPrimaryController_call method_call = new IsPrimaryController_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsPrimaryController_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public IsPrimaryController_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<IsPrimaryController_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsPrimaryController", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsPrimaryController_args args = new IsPrimaryController_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsPrimaryController();
      }
    }

    public void IsStaticUpdateController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<IsStaticUpdateController_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsStaticUpdateController_call method_call = new IsStaticUpdateController_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsStaticUpdateController_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public IsStaticUpdateController_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<IsStaticUpdateController_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsStaticUpdateController", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsStaticUpdateController_args args = new IsStaticUpdateController_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsStaticUpdateController();
      }
    }

    public void IsBridgeController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<IsBridgeController_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsBridgeController_call method_call = new IsBridgeController_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsBridgeController_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public IsBridgeController_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<IsBridgeController_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsBridgeController", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsBridgeController_args args = new IsBridgeController_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsBridgeController();
      }
    }

    public void GetLibraryVersion(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetLibraryVersion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetLibraryVersion_call method_call = new GetLibraryVersion_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetLibraryVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public GetLibraryVersion_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetLibraryVersion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLibraryVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetLibraryVersion_args args = new GetLibraryVersion_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetLibraryVersion();
      }
    }

    public void GetLibraryTypeName(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetLibraryTypeName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetLibraryTypeName_call method_call = new GetLibraryTypeName_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetLibraryTypeName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public GetLibraryTypeName_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetLibraryTypeName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLibraryTypeName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetLibraryTypeName_args args = new GetLibraryTypeName_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetLibraryTypeName();
      }
    }

    public void GetSendQueueCount(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetSendQueueCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSendQueueCount_call method_call = new GetSendQueueCount_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSendQueueCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public GetSendQueueCount_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetSendQueueCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSendQueueCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSendQueueCount_args args = new GetSendQueueCount_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSendQueueCount();
      }
    }

    public void LogDriverStatistics(int _homeId, org.apache.thrift.async.AsyncMethodCallback<LogDriverStatistics_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LogDriverStatistics_call method_call = new LogDriverStatistics_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LogDriverStatistics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public LogDriverStatistics_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<LogDriverStatistics_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LogDriverStatistics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        LogDriverStatistics_args args = new LogDriverStatistics_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_LogDriverStatistics();
      }
    }

    public void GetPollInterval(org.apache.thrift.async.AsyncMethodCallback<GetPollInterval_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetPollInterval_call method_call = new GetPollInterval_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetPollInterval_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetPollInterval_call(org.apache.thrift.async.AsyncMethodCallback<GetPollInterval_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetPollInterval", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetPollInterval_args args = new GetPollInterval_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetPollInterval();
      }
    }

    public void SetPollInterval(int _milliseconds, boolean _bIntervalBetweenPolls, org.apache.thrift.async.AsyncMethodCallback<SetPollInterval_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetPollInterval_call method_call = new SetPollInterval_call(_milliseconds, _bIntervalBetweenPolls, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetPollInterval_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _milliseconds;
      private boolean _bIntervalBetweenPolls;
      public SetPollInterval_call(int _milliseconds, boolean _bIntervalBetweenPolls, org.apache.thrift.async.AsyncMethodCallback<SetPollInterval_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._milliseconds = _milliseconds;
        this._bIntervalBetweenPolls = _bIntervalBetweenPolls;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetPollInterval", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetPollInterval_args args = new SetPollInterval_args();
        args.set_milliseconds(_milliseconds);
        args.set_bIntervalBetweenPolls(_bIntervalBetweenPolls);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetPollInterval();
      }
    }

    public void EnablePoll(RemoteValueID _valueId, byte _intensity, org.apache.thrift.async.AsyncMethodCallback<EnablePoll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      EnablePoll_call method_call = new EnablePoll_call(_valueId, _intensity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EnablePoll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _valueId;
      private byte _intensity;
      public EnablePoll_call(RemoteValueID _valueId, byte _intensity, org.apache.thrift.async.AsyncMethodCallback<EnablePoll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._valueId = _valueId;
        this._intensity = _intensity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EnablePoll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EnablePoll_args args = new EnablePoll_args();
        args.set_valueId(_valueId);
        args.set_intensity(_intensity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EnablePoll();
      }
    }

    public void DisablePoll(RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<DisablePoll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DisablePoll_call method_call = new DisablePoll_call(_valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DisablePoll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _valueId;
      public DisablePoll_call(RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<DisablePoll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DisablePoll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DisablePoll_args args = new DisablePoll_args();
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DisablePoll();
      }
    }

    public void isPolled(RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<isPolled_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isPolled_call method_call = new isPolled_call(_valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isPolled_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _valueId;
      public isPolled_call(RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<isPolled_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isPolled", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isPolled_args args = new isPolled_args();
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isPolled();
      }
    }

    public void SetPollIntensity(RemoteValueID _valueId, byte _intensity, org.apache.thrift.async.AsyncMethodCallback<SetPollIntensity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetPollIntensity_call method_call = new SetPollIntensity_call(_valueId, _intensity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetPollIntensity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _valueId;
      private byte _intensity;
      public SetPollIntensity_call(RemoteValueID _valueId, byte _intensity, org.apache.thrift.async.AsyncMethodCallback<SetPollIntensity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._valueId = _valueId;
        this._intensity = _intensity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetPollIntensity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetPollIntensity_args args = new SetPollIntensity_args();
        args.set_valueId(_valueId);
        args.set_intensity(_intensity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetPollIntensity();
      }
    }

    public void RefreshNodeInfo(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RefreshNodeInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RefreshNodeInfo_call method_call = new RefreshNodeInfo_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RefreshNodeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public RefreshNodeInfo_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RefreshNodeInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RefreshNodeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RefreshNodeInfo_args args = new RefreshNodeInfo_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RefreshNodeInfo();
      }
    }

    public void RequestNodeState(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RequestNodeState_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestNodeState_call method_call = new RequestNodeState_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestNodeState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public RequestNodeState_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RequestNodeState_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestNodeState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestNodeState_args args = new RequestNodeState_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestNodeState();
      }
    }

    public void RequestNodeDynamic(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RequestNodeDynamic_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestNodeDynamic_call method_call = new RequestNodeDynamic_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestNodeDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public RequestNodeDynamic_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RequestNodeDynamic_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestNodeDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestNodeDynamic_args args = new RequestNodeDynamic_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestNodeDynamic();
      }
    }

    public void IsNodeListeningDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeListeningDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsNodeListeningDevice_call method_call = new IsNodeListeningDevice_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsNodeListeningDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public IsNodeListeningDevice_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeListeningDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsNodeListeningDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsNodeListeningDevice_args args = new IsNodeListeningDevice_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsNodeListeningDevice();
      }
    }

    public void IsNodeFrequentListeningDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeFrequentListeningDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsNodeFrequentListeningDevice_call method_call = new IsNodeFrequentListeningDevice_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsNodeFrequentListeningDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public IsNodeFrequentListeningDevice_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeFrequentListeningDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsNodeFrequentListeningDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsNodeFrequentListeningDevice_args args = new IsNodeFrequentListeningDevice_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsNodeFrequentListeningDevice();
      }
    }

    public void IsNodeBeamingDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeBeamingDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsNodeBeamingDevice_call method_call = new IsNodeBeamingDevice_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsNodeBeamingDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public IsNodeBeamingDevice_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeBeamingDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsNodeBeamingDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsNodeBeamingDevice_args args = new IsNodeBeamingDevice_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsNodeBeamingDevice();
      }
    }

    public void IsNodeRoutingDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeRoutingDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsNodeRoutingDevice_call method_call = new IsNodeRoutingDevice_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsNodeRoutingDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public IsNodeRoutingDevice_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeRoutingDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsNodeRoutingDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsNodeRoutingDevice_args args = new IsNodeRoutingDevice_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsNodeRoutingDevice();
      }
    }

    public void IsNodeSecurityDevice(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeSecurityDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsNodeSecurityDevice_call method_call = new IsNodeSecurityDevice_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsNodeSecurityDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public IsNodeSecurityDevice_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeSecurityDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsNodeSecurityDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsNodeSecurityDevice_args args = new IsNodeSecurityDevice_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsNodeSecurityDevice();
      }
    }

    public void GetNodeMaxBaudRate(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeMaxBaudRate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeMaxBaudRate_call method_call = new GetNodeMaxBaudRate_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeMaxBaudRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeMaxBaudRate_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeMaxBaudRate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeMaxBaudRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeMaxBaudRate_args args = new GetNodeMaxBaudRate_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeMaxBaudRate();
      }
    }

    public void GetNodeVersion(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeVersion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeVersion_call method_call = new GetNodeVersion_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeVersion_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeVersion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeVersion_args args = new GetNodeVersion_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeVersion();
      }
    }

    public void GetNodeSecurity(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeSecurity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeSecurity_call method_call = new GetNodeSecurity_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeSecurity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeSecurity_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeSecurity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeSecurity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeSecurity_args args = new GetNodeSecurity_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeSecurity();
      }
    }

    public void GetNodeBasic(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeBasic_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeBasic_call method_call = new GetNodeBasic_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeBasic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeBasic_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeBasic_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeBasic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeBasic_args args = new GetNodeBasic_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeBasic();
      }
    }

    public void GetNodeGeneric(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeGeneric_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeGeneric_call method_call = new GetNodeGeneric_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeGeneric_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeGeneric_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeGeneric_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeGeneric", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeGeneric_args args = new GetNodeGeneric_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeGeneric();
      }
    }

    public void GetNodeSpecific(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeSpecific_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeSpecific_call method_call = new GetNodeSpecific_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeSpecific_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeSpecific_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeSpecific_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeSpecific", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeSpecific_args args = new GetNodeSpecific_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeSpecific();
      }
    }

    public void GetNodeType(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeType_call method_call = new GetNodeType_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeType_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeType_args args = new GetNodeType_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeType();
      }
    }

    public void GetNodeNeighbors(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeNeighbors_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeNeighbors_call method_call = new GetNodeNeighbors_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeNeighbors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeNeighbors_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeNeighbors_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeNeighbors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeNeighbors_args args = new GetNodeNeighbors_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UInt32_ListByte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeNeighbors();
      }
    }

    public void GetNodeManufacturerName(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeManufacturerName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeManufacturerName_call method_call = new GetNodeManufacturerName_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeManufacturerName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeManufacturerName_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeManufacturerName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeManufacturerName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeManufacturerName_args args = new GetNodeManufacturerName_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeManufacturerName();
      }
    }

    public void GetNodeProductName(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeProductName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeProductName_call method_call = new GetNodeProductName_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeProductName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeProductName_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeProductName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeProductName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeProductName_args args = new GetNodeProductName_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeProductName();
      }
    }

    public void GetNodeName(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeName_call method_call = new GetNodeName_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeName_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeName_args args = new GetNodeName_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeName();
      }
    }

    public void GetNodeLocation(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeLocation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeLocation_call method_call = new GetNodeLocation_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeLocation_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeLocation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeLocation_args args = new GetNodeLocation_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeLocation();
      }
    }

    public void GetNodeManufacturerId(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeManufacturerId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeManufacturerId_call method_call = new GetNodeManufacturerId_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeManufacturerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeManufacturerId_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeManufacturerId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeManufacturerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeManufacturerId_args args = new GetNodeManufacturerId_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeManufacturerId();
      }
    }

    public void GetNodeProductType(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeProductType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeProductType_call method_call = new GetNodeProductType_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeProductType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeProductType_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeProductType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeProductType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeProductType_args args = new GetNodeProductType_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeProductType();
      }
    }

    public void GetNodeProductId(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeProductId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeProductId_call method_call = new GetNodeProductId_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeProductId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNodeProductId_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNodeProductId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeProductId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeProductId_args args = new GetNodeProductId_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeProductId();
      }
    }

    public void SetNodeManufacturerName(int _homeId, byte _nodeId, String _manufacturerName, org.apache.thrift.async.AsyncMethodCallback<SetNodeManufacturerName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeManufacturerName_call method_call = new SetNodeManufacturerName_call(_homeId, _nodeId, _manufacturerName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeManufacturerName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private String _manufacturerName;
      public SetNodeManufacturerName_call(int _homeId, byte _nodeId, String _manufacturerName, org.apache.thrift.async.AsyncMethodCallback<SetNodeManufacturerName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._manufacturerName = _manufacturerName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeManufacturerName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeManufacturerName_args args = new SetNodeManufacturerName_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_manufacturerName(_manufacturerName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeManufacturerName();
      }
    }

    public void SetNodeProductName(int _homeId, byte _nodeId, String _productName, org.apache.thrift.async.AsyncMethodCallback<SetNodeProductName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeProductName_call method_call = new SetNodeProductName_call(_homeId, _nodeId, _productName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeProductName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private String _productName;
      public SetNodeProductName_call(int _homeId, byte _nodeId, String _productName, org.apache.thrift.async.AsyncMethodCallback<SetNodeProductName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._productName = _productName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeProductName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeProductName_args args = new SetNodeProductName_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_productName(_productName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeProductName();
      }
    }

    public void SetNodeName(int _homeId, byte _nodeId, String _nodeName, org.apache.thrift.async.AsyncMethodCallback<SetNodeName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeName_call method_call = new SetNodeName_call(_homeId, _nodeId, _nodeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private String _nodeName;
      public SetNodeName_call(int _homeId, byte _nodeId, String _nodeName, org.apache.thrift.async.AsyncMethodCallback<SetNodeName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._nodeName = _nodeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeName_args args = new SetNodeName_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_nodeName(_nodeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeName();
      }
    }

    public void SetNodeLocation(int _homeId, byte _nodeId, String _location, org.apache.thrift.async.AsyncMethodCallback<SetNodeLocation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeLocation_call method_call = new SetNodeLocation_call(_homeId, _nodeId, _location, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private String _location;
      public SetNodeLocation_call(int _homeId, byte _nodeId, String _location, org.apache.thrift.async.AsyncMethodCallback<SetNodeLocation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._location = _location;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeLocation_args args = new SetNodeLocation_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_location(_location);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeLocation();
      }
    }

    public void SetNodeOn(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<SetNodeOn_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeOn_call method_call = new SetNodeOn_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeOn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public SetNodeOn_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<SetNodeOn_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeOn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeOn_args args = new SetNodeOn_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeOn();
      }
    }

    public void SetNodeOff(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<SetNodeOff_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeOff_call method_call = new SetNodeOff_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeOff_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public SetNodeOff_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<SetNodeOff_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeOff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeOff_args args = new SetNodeOff_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeOff();
      }
    }

    public void SetNodeLevel(int _homeId, byte _nodeId, byte _level, org.apache.thrift.async.AsyncMethodCallback<SetNodeLevel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetNodeLevel_call method_call = new SetNodeLevel_call(_homeId, _nodeId, _level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetNodeLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _level;
      public SetNodeLevel_call(int _homeId, byte _nodeId, byte _level, org.apache.thrift.async.AsyncMethodCallback<SetNodeLevel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._level = _level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetNodeLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetNodeLevel_args args = new SetNodeLevel_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_level(_level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetNodeLevel();
      }
    }

    public void IsNodeInfoReceived(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeInfoReceived_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsNodeInfoReceived_call method_call = new IsNodeInfoReceived_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsNodeInfoReceived_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public IsNodeInfoReceived_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<IsNodeInfoReceived_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsNodeInfoReceived", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsNodeInfoReceived_args args = new IsNodeInfoReceived_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsNodeInfoReceived();
      }
    }

    public void GetNodeClassInformation(int _homeId, byte _nodeId, byte _commandClassId, org.apache.thrift.async.AsyncMethodCallback<GetNodeClassInformation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNodeClassInformation_call method_call = new GetNodeClassInformation_call(_homeId, _nodeId, _commandClassId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNodeClassInformation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _commandClassId;
      public GetNodeClassInformation_call(int _homeId, byte _nodeId, byte _commandClassId, org.apache.thrift.async.AsyncMethodCallback<GetNodeClassInformation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._commandClassId = _commandClassId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNodeClassInformation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNodeClassInformation_args args = new GetNodeClassInformation_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_commandClassId(_commandClassId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_GetNodeClassInformation getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNodeClassInformation();
      }
    }

    public void GetValueLabel(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueLabel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueLabel_call method_call = new GetValueLabel_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueLabel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueLabel_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueLabel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueLabel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueLabel_args args = new GetValueLabel_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueLabel();
      }
    }

    public void SetValueLabel(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValueLabel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValueLabel_call method_call = new SetValueLabel_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValueLabel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private String _value;
      public SetValueLabel_call(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValueLabel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValueLabel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValueLabel_args args = new SetValueLabel_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetValueLabel();
      }
    }

    public void GetValueUnits(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueUnits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueUnits_call method_call = new GetValueUnits_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueUnits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueUnits_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueUnits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueUnits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueUnits_args args = new GetValueUnits_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueUnits();
      }
    }

    public void SetValueUnits(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValueUnits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValueUnits_call method_call = new SetValueUnits_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValueUnits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private String _value;
      public SetValueUnits_call(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValueUnits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValueUnits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValueUnits_args args = new SetValueUnits_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetValueUnits();
      }
    }

    public void GetValueHelp(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueHelp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueHelp_call method_call = new GetValueHelp_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueHelp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueHelp_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueHelp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueHelp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueHelp_args args = new GetValueHelp_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueHelp();
      }
    }

    public void SetValueHelp(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValueHelp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValueHelp_call method_call = new SetValueHelp_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValueHelp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private String _value;
      public SetValueHelp_call(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValueHelp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValueHelp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValueHelp_args args = new SetValueHelp_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetValueHelp();
      }
    }

    public void GetValueMin(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueMin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueMin_call method_call = new GetValueMin_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueMin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueMin_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueMin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueMin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueMin_args args = new GetValueMin_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueMin();
      }
    }

    public void GetValueMax(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueMax_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueMax_call method_call = new GetValueMax_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueMax_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueMax_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueMax_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueMax", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueMax_args args = new GetValueMax_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueMax();
      }
    }

    public void IsValueReadOnly(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValueReadOnly_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsValueReadOnly_call method_call = new IsValueReadOnly_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsValueReadOnly_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public IsValueReadOnly_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValueReadOnly_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsValueReadOnly", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsValueReadOnly_args args = new IsValueReadOnly_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsValueReadOnly();
      }
    }

    public void IsValueWriteOnly(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValueWriteOnly_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsValueWriteOnly_call method_call = new IsValueWriteOnly_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsValueWriteOnly_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public IsValueWriteOnly_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValueWriteOnly_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsValueWriteOnly", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsValueWriteOnly_args args = new IsValueWriteOnly_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsValueWriteOnly();
      }
    }

    public void IsValueSet(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValueSet_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsValueSet_call method_call = new IsValueSet_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsValueSet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public IsValueSet_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValueSet_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsValueSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsValueSet_args args = new IsValueSet_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsValueSet();
      }
    }

    public void IsValuePolled(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValuePolled_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsValuePolled_call method_call = new IsValuePolled_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsValuePolled_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public IsValuePolled_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<IsValuePolled_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsValuePolled", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsValuePolled_args args = new IsValuePolled_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsValuePolled();
      }
    }

    public void GetValueAsBool(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsBool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueAsBool_call method_call = new GetValueAsBool_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueAsBool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueAsBool_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsBool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueAsBool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueAsBool_args args = new GetValueAsBool_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Bool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueAsBool();
      }
    }

    public void GetValueAsByte(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsByte_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueAsByte_call method_call = new GetValueAsByte_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueAsByte_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueAsByte_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsByte_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueAsByte", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueAsByte_args args = new GetValueAsByte_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_UInt8 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueAsByte();
      }
    }

    public void GetValueAsFloat(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsFloat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueAsFloat_call method_call = new GetValueAsFloat_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueAsFloat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueAsFloat_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsFloat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueAsFloat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueAsFloat_args args = new GetValueAsFloat_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Float getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueAsFloat();
      }
    }

    public void GetValueAsInt(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsInt_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueAsInt_call method_call = new GetValueAsInt_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueAsInt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueAsInt_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsInt_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueAsInt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueAsInt_args args = new GetValueAsInt_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueAsInt();
      }
    }

    public void GetValueAsShort(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsShort_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueAsShort_call method_call = new GetValueAsShort_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueAsShort_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueAsShort_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsShort_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueAsShort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueAsShort_args args = new GetValueAsShort_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Int16 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueAsShort();
      }
    }

    public void GetValueAsString(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsString_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueAsString_call method_call = new GetValueAsString_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueAsString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueAsString_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueAsString_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueAsString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueAsString_args args = new GetValueAsString_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueAsString();
      }
    }

    public void GetValueListSelection_String(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueListSelection_String_call method_call = new GetValueListSelection_String_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueListSelection_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueListSelection_String_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueListSelection_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueListSelection_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueListSelection_String_args args = new GetValueListSelection_String_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueListSelection_String();
      }
    }

    public void GetValueListSelection_Int32(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueListSelection_Int32_call method_call = new GetValueListSelection_Int32_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueListSelection_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueListSelection_Int32_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueListSelection_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueListSelection_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueListSelection_Int32_args args = new GetValueListSelection_Int32_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueListSelection_Int32();
      }
    }

    public void GetValueListItems(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueListItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueListItems_call method_call = new GetValueListItems_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueListItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueListItems_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueListItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueListItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueListItems_args args = new GetValueListItems_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_ListString getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueListItems();
      }
    }

    public void GetValueFloatPrecision(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueFloatPrecision_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetValueFloatPrecision_call method_call = new GetValueFloatPrecision_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetValueFloatPrecision_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetValueFloatPrecision_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetValueFloatPrecision_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetValueFloatPrecision", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetValueFloatPrecision_args args = new GetValueFloatPrecision_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_UInt8 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetValueFloatPrecision();
      }
    }

    public void SetValue_Bool(RemoteValueID _id, boolean _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Bool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValue_Bool_call method_call = new SetValue_Bool_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_Bool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private boolean _value;
      public SetValue_Bool_call(RemoteValueID _id, boolean _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Bool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue_Bool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_Bool_args args = new SetValue_Bool_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValue_Bool();
      }
    }

    public void SetValue_UInt8(RemoteValueID _id, byte _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_UInt8_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValue_UInt8_call method_call = new SetValue_UInt8_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_UInt8_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private byte _value;
      public SetValue_UInt8_call(RemoteValueID _id, byte _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_UInt8_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue_UInt8", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_UInt8_args args = new SetValue_UInt8_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValue_UInt8();
      }
    }

    public void SetValue_Float(RemoteValueID _id, double _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Float_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValue_Float_call method_call = new SetValue_Float_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_Float_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private double _value;
      public SetValue_Float_call(RemoteValueID _id, double _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Float_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue_Float", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_Float_args args = new SetValue_Float_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValue_Float();
      }
    }

    public void SetValue_Int32(RemoteValueID _id, int _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValue_Int32_call method_call = new SetValue_Int32_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private int _value;
      public SetValue_Int32_call(RemoteValueID _id, int _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_Int32_args args = new SetValue_Int32_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValue_Int32();
      }
    }

    public void SetValue_Int16(RemoteValueID _id, short _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Int16_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValue_Int16_call method_call = new SetValue_Int16_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_Int16_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private short _value;
      public SetValue_Int16_call(RemoteValueID _id, short _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_Int16_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue_Int16", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_Int16_args args = new SetValue_Int16_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValue_Int16();
      }
    }

    public void SetValue_String(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValue_String_call method_call = new SetValue_String_call(_id, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValue_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private String _value;
      public SetValue_String_call(RemoteValueID _id, String _value, org.apache.thrift.async.AsyncMethodCallback<SetValue_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValue_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValue_String_args args = new SetValue_String_args();
        args.set_id(_id);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValue_String();
      }
    }

    public void SetValueListSelection(RemoteValueID _id, String _selectedItem, org.apache.thrift.async.AsyncMethodCallback<SetValueListSelection_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetValueListSelection_call method_call = new SetValueListSelection_call(_id, _selectedItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetValueListSelection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private String _selectedItem;
      public SetValueListSelection_call(RemoteValueID _id, String _selectedItem, org.apache.thrift.async.AsyncMethodCallback<SetValueListSelection_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._selectedItem = _selectedItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetValueListSelection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetValueListSelection_args args = new SetValueListSelection_args();
        args.set_id(_id);
        args.set_selectedItem(_selectedItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetValueListSelection();
      }
    }

    public void RefreshValue(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<RefreshValue_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RefreshValue_call method_call = new RefreshValue_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RefreshValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public RefreshValue_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<RefreshValue_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RefreshValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RefreshValue_args args = new RefreshValue_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RefreshValue();
      }
    }

    public void SetChangeVerified(RemoteValueID _id, boolean _verify, org.apache.thrift.async.AsyncMethodCallback<SetChangeVerified_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetChangeVerified_call method_call = new SetChangeVerified_call(_id, _verify, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetChangeVerified_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private boolean _verify;
      public SetChangeVerified_call(RemoteValueID _id, boolean _verify, org.apache.thrift.async.AsyncMethodCallback<SetChangeVerified_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._verify = _verify;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetChangeVerified", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetChangeVerified_args args = new SetChangeVerified_args();
        args.set_id(_id);
        args.set_verify(_verify);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetChangeVerified();
      }
    }

    public void PressButton(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<PressButton_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PressButton_call method_call = new PressButton_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PressButton_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public PressButton_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<PressButton_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PressButton", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PressButton_args args = new PressButton_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_PressButton();
      }
    }

    public void ReleaseButton(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<ReleaseButton_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReleaseButton_call method_call = new ReleaseButton_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReleaseButton_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public ReleaseButton_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<ReleaseButton_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReleaseButton", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReleaseButton_args args = new ReleaseButton_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReleaseButton();
      }
    }

    public void GetNumSwitchPoints(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetNumSwitchPoints_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNumSwitchPoints_call method_call = new GetNumSwitchPoints_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNumSwitchPoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public GetNumSwitchPoints_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<GetNumSwitchPoints_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNumSwitchPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNumSwitchPoints_args args = new GetNumSwitchPoints_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNumSwitchPoints();
      }
    }

    public void SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback, org.apache.thrift.async.AsyncMethodCallback<SetSwitchPoint_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSwitchPoint_call method_call = new SetSwitchPoint_call(_id, _hours, _minutes, _setback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSwitchPoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private byte _hours;
      private byte _minutes;
      private byte _setback;
      public SetSwitchPoint_call(RemoteValueID _id, byte _hours, byte _minutes, byte _setback, org.apache.thrift.async.AsyncMethodCallback<SetSwitchPoint_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._hours = _hours;
        this._minutes = _minutes;
        this._setback = _setback;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSwitchPoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSwitchPoint_args args = new SetSwitchPoint_args();
        args.set_id(_id);
        args.set_hours(_hours);
        args.set_minutes(_minutes);
        args.set_setback(_setback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSwitchPoint();
      }
    }

    public void RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, org.apache.thrift.async.AsyncMethodCallback<RemoveSwitchPoint_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveSwitchPoint_call method_call = new RemoveSwitchPoint_call(_id, _hours, _minutes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveSwitchPoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private byte _hours;
      private byte _minutes;
      public RemoveSwitchPoint_call(RemoteValueID _id, byte _hours, byte _minutes, org.apache.thrift.async.AsyncMethodCallback<RemoveSwitchPoint_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._hours = _hours;
        this._minutes = _minutes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveSwitchPoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveSwitchPoint_args args = new RemoveSwitchPoint_args();
        args.set_id(_id);
        args.set_hours(_hours);
        args.set_minutes(_minutes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveSwitchPoint();
      }
    }

    public void ClearSwitchPoints(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<ClearSwitchPoints_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ClearSwitchPoints_call method_call = new ClearSwitchPoints_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ClearSwitchPoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      public ClearSwitchPoints_call(RemoteValueID _id, org.apache.thrift.async.AsyncMethodCallback<ClearSwitchPoints_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ClearSwitchPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ClearSwitchPoints_args args = new ClearSwitchPoints_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ClearSwitchPoints();
      }
    }

    public void GetSwitchPoint(RemoteValueID _id, byte _idx, org.apache.thrift.async.AsyncMethodCallback<GetSwitchPoint_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSwitchPoint_call method_call = new GetSwitchPoint_call(_id, _idx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSwitchPoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RemoteValueID _id;
      private byte _idx;
      public GetSwitchPoint_call(RemoteValueID _id, byte _idx, org.apache.thrift.async.AsyncMethodCallback<GetSwitchPoint_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
        this._idx = _idx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSwitchPoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSwitchPoint_args args = new GetSwitchPoint_args();
        args.set_id(_id);
        args.set_idx(_idx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetSwitchPointReturnStruct getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSwitchPoint();
      }
    }

    public void SwitchAllOn(int _homeId, org.apache.thrift.async.AsyncMethodCallback<SwitchAllOn_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SwitchAllOn_call method_call = new SwitchAllOn_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SwitchAllOn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public SwitchAllOn_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<SwitchAllOn_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SwitchAllOn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SwitchAllOn_args args = new SwitchAllOn_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SwitchAllOn();
      }
    }

    public void SwitchAllOff(int _homeId, org.apache.thrift.async.AsyncMethodCallback<SwitchAllOff_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SwitchAllOff_call method_call = new SwitchAllOff_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SwitchAllOff_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public SwitchAllOff_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<SwitchAllOff_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SwitchAllOff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SwitchAllOff_args args = new SwitchAllOff_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SwitchAllOff();
      }
    }

    public void SetConfigParam(int _homeId, byte _nodeId, byte _param, int _value, byte _size, org.apache.thrift.async.AsyncMethodCallback<SetConfigParam_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetConfigParam_call method_call = new SetConfigParam_call(_homeId, _nodeId, _param, _value, _size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetConfigParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _param;
      private int _value;
      private byte _size;
      public SetConfigParam_call(int _homeId, byte _nodeId, byte _param, int _value, byte _size, org.apache.thrift.async.AsyncMethodCallback<SetConfigParam_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._param = _param;
        this._value = _value;
        this._size = _size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetConfigParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetConfigParam_args args = new SetConfigParam_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_param(_param);
        args.set_value(_value);
        args.set_size(_size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetConfigParam();
      }
    }

    public void RequestConfigParam(int _homeId, byte _nodeId, byte _param, org.apache.thrift.async.AsyncMethodCallback<RequestConfigParam_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestConfigParam_call method_call = new RequestConfigParam_call(_homeId, _nodeId, _param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestConfigParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _param;
      public RequestConfigParam_call(int _homeId, byte _nodeId, byte _param, org.apache.thrift.async.AsyncMethodCallback<RequestConfigParam_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._param = _param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestConfigParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestConfigParam_args args = new RequestConfigParam_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_param(_param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RequestConfigParam();
      }
    }

    public void RequestAllConfigParams(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RequestAllConfigParams_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestAllConfigParams_call method_call = new RequestAllConfigParams_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestAllConfigParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public RequestAllConfigParams_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<RequestAllConfigParams_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestAllConfigParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestAllConfigParams_args args = new RequestAllConfigParams_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RequestAllConfigParams();
      }
    }

    public void GetNumGroups(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNumGroups_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNumGroups_call method_call = new GetNumGroups_call(_homeId, _nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNumGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      public GetNumGroups_call(int _homeId, byte _nodeId, org.apache.thrift.async.AsyncMethodCallback<GetNumGroups_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNumGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNumGroups_args args = new GetNumGroups_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNumGroups();
      }
    }

    public void GetAssociations(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<GetAssociations_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAssociations_call method_call = new GetAssociations_call(_homeId, _nodeId, _groupIdx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAssociations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _groupIdx;
      public GetAssociations_call(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<GetAssociations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._groupIdx = _groupIdx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAssociations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAssociations_args args = new GetAssociations_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_groupIdx(_groupIdx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetAssociationsReturnStruct getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAssociations();
      }
    }

    public void GetMaxAssociations(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<GetMaxAssociations_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetMaxAssociations_call method_call = new GetMaxAssociations_call(_homeId, _nodeId, _groupIdx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMaxAssociations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _groupIdx;
      public GetMaxAssociations_call(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<GetMaxAssociations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._groupIdx = _groupIdx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMaxAssociations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMaxAssociations_args args = new GetMaxAssociations_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_groupIdx(_groupIdx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMaxAssociations();
      }
    }

    public void GetGroupLabel(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<GetGroupLabel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetGroupLabel_call method_call = new GetGroupLabel_call(_homeId, _nodeId, _groupIdx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetGroupLabel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _groupIdx;
      public GetGroupLabel_call(int _homeId, byte _nodeId, byte _groupIdx, org.apache.thrift.async.AsyncMethodCallback<GetGroupLabel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._groupIdx = _groupIdx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetGroupLabel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetGroupLabel_args args = new GetGroupLabel_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_groupIdx(_groupIdx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetGroupLabel();
      }
    }

    public void AddAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId, org.apache.thrift.async.AsyncMethodCallback<AddAssociation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddAssociation_call method_call = new AddAssociation_call(_homeId, _nodeId, _groupIdx, _targetNodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddAssociation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _groupIdx;
      private byte _targetNodeId;
      public AddAssociation_call(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId, org.apache.thrift.async.AsyncMethodCallback<AddAssociation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._groupIdx = _groupIdx;
        this._targetNodeId = _targetNodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddAssociation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddAssociation_args args = new AddAssociation_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_groupIdx(_groupIdx);
        args.set_targetNodeId(_targetNodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_AddAssociation();
      }
    }

    public void RemoveAssociation(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId, org.apache.thrift.async.AsyncMethodCallback<RemoveAssociation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveAssociation_call method_call = new RemoveAssociation_call(_homeId, _nodeId, _groupIdx, _targetNodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveAssociation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private byte _nodeId;
      private byte _groupIdx;
      private byte _targetNodeId;
      public RemoveAssociation_call(int _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId, org.apache.thrift.async.AsyncMethodCallback<RemoveAssociation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._nodeId = _nodeId;
        this._groupIdx = _groupIdx;
        this._targetNodeId = _targetNodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveAssociation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveAssociation_args args = new RemoveAssociation_args();
        args.set_homeId(_homeId);
        args.set_nodeId(_nodeId);
        args.set_groupIdx(_groupIdx);
        args.set_targetNodeId(_targetNodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RemoveAssociation();
      }
    }

    public void ResetController(int _homeId, org.apache.thrift.async.AsyncMethodCallback<ResetController_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResetController_call method_call = new ResetController_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResetController_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public ResetController_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<ResetController_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResetController", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResetController_args args = new ResetController_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ResetController();
      }
    }

    public void SoftReset(int _homeId, org.apache.thrift.async.AsyncMethodCallback<SoftReset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SoftReset_call method_call = new SoftReset_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SoftReset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public SoftReset_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<SoftReset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SoftReset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SoftReset_args args = new SoftReset_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SoftReset();
      }
    }

    public void BeginControllerCommand(int _homeId, DriverControllerCommand _command, boolean _highPower, byte _nodeId, byte _arg, org.apache.thrift.async.AsyncMethodCallback<BeginControllerCommand_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      BeginControllerCommand_call method_call = new BeginControllerCommand_call(_homeId, _command, _highPower, _nodeId, _arg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BeginControllerCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      private DriverControllerCommand _command;
      private boolean _highPower;
      private byte _nodeId;
      private byte _arg;
      public BeginControllerCommand_call(int _homeId, DriverControllerCommand _command, boolean _highPower, byte _nodeId, byte _arg, org.apache.thrift.async.AsyncMethodCallback<BeginControllerCommand_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
        this._command = _command;
        this._highPower = _highPower;
        this._nodeId = _nodeId;
        this._arg = _arg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BeginControllerCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BeginControllerCommand_args args = new BeginControllerCommand_args();
        args.set_homeId(_homeId);
        args.set_command(_command);
        args.set_highPower(_highPower);
        args.set_nodeId(_nodeId);
        args.set_arg(_arg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BeginControllerCommand();
      }
    }

    public void CancelControllerCommand(int _homeId, org.apache.thrift.async.AsyncMethodCallback<CancelControllerCommand_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CancelControllerCommand_call method_call = new CancelControllerCommand_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CancelControllerCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public CancelControllerCommand_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<CancelControllerCommand_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CancelControllerCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CancelControllerCommand_args args = new CancelControllerCommand_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CancelControllerCommand();
      }
    }

    public void GetNumScenes(org.apache.thrift.async.AsyncMethodCallback<GetNumScenes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetNumScenes_call method_call = new GetNumScenes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetNumScenes_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetNumScenes_call(org.apache.thrift.async.AsyncMethodCallback<GetNumScenes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNumScenes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetNumScenes_args args = new GetNumScenes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetNumScenes();
      }
    }

    public void GetAllScenes(org.apache.thrift.async.AsyncMethodCallback<GetAllScenes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAllScenes_call method_call = new GetAllScenes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllScenes_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAllScenes_call(org.apache.thrift.async.AsyncMethodCallback<GetAllScenes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllScenes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllScenes_args args = new GetAllScenes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetAllScenesReturnStruct getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllScenes();
      }
    }

    public void CreateScene(org.apache.thrift.async.AsyncMethodCallback<CreateScene_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateScene_call method_call = new CreateScene_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateScene_call extends org.apache.thrift.async.TAsyncMethodCall {
      public CreateScene_call(org.apache.thrift.async.AsyncMethodCallback<CreateScene_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateScene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateScene_args args = new CreateScene_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateScene();
      }
    }

    public void RemoveScene(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<RemoveScene_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveScene_call method_call = new RemoveScene_call(_sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveScene_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      public RemoveScene_call(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<RemoveScene_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveScene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveScene_args args = new RemoveScene_args();
        args.set_sceneId(_sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveScene();
      }
    }

    public void AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Bool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValue_Bool_call method_call = new AddSceneValue_Bool_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValue_Bool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private boolean _value;
      public AddSceneValue_Bool_call(byte _sceneId, RemoteValueID _valueId, boolean _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Bool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValue_Bool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValue_Bool_args args = new AddSceneValue_Bool_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValue_Bool();
      }
    }

    public void AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Uint8_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValue_Uint8_call method_call = new AddSceneValue_Uint8_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValue_Uint8_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private byte _value;
      public AddSceneValue_Uint8_call(byte _sceneId, RemoteValueID _valueId, byte _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Uint8_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValue_Uint8", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValue_Uint8_args args = new AddSceneValue_Uint8_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValue_Uint8();
      }
    }

    public void AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Float_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValue_Float_call method_call = new AddSceneValue_Float_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValue_Float_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private double _value;
      public AddSceneValue_Float_call(byte _sceneId, RemoteValueID _valueId, double _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Float_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValue_Float", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValue_Float_args args = new AddSceneValue_Float_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValue_Float();
      }
    }

    public void AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValue_Int32_call method_call = new AddSceneValue_Int32_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValue_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private int _value;
      public AddSceneValue_Int32_call(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValue_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValue_Int32_args args = new AddSceneValue_Int32_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValue_Int32();
      }
    }

    public void AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Int16_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValue_Int16_call method_call = new AddSceneValue_Int16_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValue_Int16_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private short _value;
      public AddSceneValue_Int16_call(byte _sceneId, RemoteValueID _valueId, short _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_Int16_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValue_Int16", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValue_Int16_args args = new AddSceneValue_Int16_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValue_Int16();
      }
    }

    public void AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValue_String_call method_call = new AddSceneValue_String_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValue_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private String _value;
      public AddSceneValue_String_call(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValue_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValue_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValue_String_args args = new AddSceneValue_String_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValue_String();
      }
    }

    public void AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValueListSelection_String_call method_call = new AddSceneValueListSelection_String_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValueListSelection_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private String _value;
      public AddSceneValueListSelection_String_call(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValueListSelection_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValueListSelection_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValueListSelection_String_args args = new AddSceneValueListSelection_String_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValueListSelection_String();
      }
    }

    public void AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddSceneValueListSelection_Int32_call method_call = new AddSceneValueListSelection_Int32_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddSceneValueListSelection_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private int _value;
      public AddSceneValueListSelection_Int32_call(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<AddSceneValueListSelection_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddSceneValueListSelection_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddSceneValueListSelection_Int32_args args = new AddSceneValueListSelection_Int32_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddSceneValueListSelection_Int32();
      }
    }

    public void RemoveSceneValue(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<RemoveSceneValue_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RemoveSceneValue_call method_call = new RemoveSceneValue_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RemoveSceneValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public RemoveSceneValue_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<RemoveSceneValue_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RemoveSceneValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RemoveSceneValue_args args = new RemoveSceneValue_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RemoveSceneValue();
      }
    }

    public void SceneGetValues(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValues_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValues_call method_call = new SceneGetValues_call(_sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      public SceneGetValues_call(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValues_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValues_args args = new SceneGetValues_args();
        args.set_sceneId(_sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SceneGetValuesReturnStruct getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValues();
      }
    }

    public void SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsBool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueAsBool_call method_call = new SceneGetValueAsBool_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueAsBool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueAsBool_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsBool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueAsBool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueAsBool_args args = new SceneGetValueAsBool_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Bool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueAsBool();
      }
    }

    public void SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsByte_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueAsByte_call method_call = new SceneGetValueAsByte_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueAsByte_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueAsByte_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsByte_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueAsByte", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueAsByte_args args = new SceneGetValueAsByte_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_UInt8 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueAsByte();
      }
    }

    public void SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsFloat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueAsFloat_call method_call = new SceneGetValueAsFloat_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueAsFloat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueAsFloat_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsFloat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueAsFloat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueAsFloat_args args = new SceneGetValueAsFloat_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Float getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueAsFloat();
      }
    }

    public void SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsInt_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueAsInt_call method_call = new SceneGetValueAsInt_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueAsInt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueAsInt_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsInt_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueAsInt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueAsInt_args args = new SceneGetValueAsInt_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueAsInt();
      }
    }

    public void SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsShort_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueAsShort_call method_call = new SceneGetValueAsShort_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueAsShort_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueAsShort_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsShort_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueAsShort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueAsShort_args args = new SceneGetValueAsShort_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Int16 getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueAsShort();
      }
    }

    public void SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsString_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueAsString_call method_call = new SceneGetValueAsString_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueAsString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueAsString_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueAsString_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueAsString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueAsString_args args = new SceneGetValueAsString_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueAsString();
      }
    }

    public void SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueListSelection_String_call method_call = new SceneGetValueListSelection_String_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueListSelection_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueListSelection_String_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueListSelection_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueListSelection_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueListSelection_String_args args = new SceneGetValueListSelection_String_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueListSelection_String();
      }
    }

    public void SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneGetValueListSelection_Int32_call method_call = new SceneGetValueListSelection_Int32_call(_sceneId, _valueId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneGetValueListSelection_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      public SceneGetValueListSelection_Int32_call(byte _sceneId, RemoteValueID _valueId, org.apache.thrift.async.AsyncMethodCallback<SceneGetValueListSelection_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneGetValueListSelection_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneGetValueListSelection_Int32_args args = new SceneGetValueListSelection_Int32_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Bool_Int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneGetValueListSelection_Int32();
      }
    }

    public void SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, boolean _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Bool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValue_Bool_call method_call = new SetSceneValue_Bool_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValue_Bool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private boolean _value;
      public SetSceneValue_Bool_call(byte _sceneId, RemoteValueID _valueId, boolean _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Bool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValue_Bool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValue_Bool_args args = new SetSceneValue_Bool_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValue_Bool();
      }
    }

    public void SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Uint8_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValue_Uint8_call method_call = new SetSceneValue_Uint8_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValue_Uint8_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private byte _value;
      public SetSceneValue_Uint8_call(byte _sceneId, RemoteValueID _valueId, byte _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Uint8_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValue_Uint8", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValue_Uint8_args args = new SetSceneValue_Uint8_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValue_Uint8();
      }
    }

    public void SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Float_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValue_Float_call method_call = new SetSceneValue_Float_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValue_Float_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private double _value;
      public SetSceneValue_Float_call(byte _sceneId, RemoteValueID _valueId, double _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Float_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValue_Float", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValue_Float_args args = new SetSceneValue_Float_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValue_Float();
      }
    }

    public void SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValue_Int32_call method_call = new SetSceneValue_Int32_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValue_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private int _value;
      public SetSceneValue_Int32_call(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValue_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValue_Int32_args args = new SetSceneValue_Int32_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValue_Int32();
      }
    }

    public void SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, short _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Int16_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValue_Int16_call method_call = new SetSceneValue_Int16_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValue_Int16_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private short _value;
      public SetSceneValue_Int16_call(byte _sceneId, RemoteValueID _valueId, short _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_Int16_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValue_Int16", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValue_Int16_args args = new SetSceneValue_Int16_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValue_Int16();
      }
    }

    public void SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValue_String_call method_call = new SetSceneValue_String_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValue_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private String _value;
      public SetSceneValue_String_call(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValue_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValue_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValue_String_args args = new SetSceneValue_String_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValue_String();
      }
    }

    public void SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValueListSelection_String_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValueListSelection_String_call method_call = new SetSceneValueListSelection_String_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValueListSelection_String_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private String _value;
      public SetSceneValueListSelection_String_call(byte _sceneId, RemoteValueID _valueId, String _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValueListSelection_String_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValueListSelection_String", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValueListSelection_String_args args = new SetSceneValueListSelection_String_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValueListSelection_String();
      }
    }

    public void SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValueListSelection_Int32_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneValueListSelection_Int32_call method_call = new SetSceneValueListSelection_Int32_call(_sceneId, _valueId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneValueListSelection_Int32_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private RemoteValueID _valueId;
      private int _value;
      public SetSceneValueListSelection_Int32_call(byte _sceneId, RemoteValueID _valueId, int _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneValueListSelection_Int32_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._valueId = _valueId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneValueListSelection_Int32", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneValueListSelection_Int32_args args = new SetSceneValueListSelection_Int32_args();
        args.set_sceneId(_sceneId);
        args.set_valueId(_valueId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SetSceneValueListSelection_Int32();
      }
    }

    public void GetSceneLabel(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<GetSceneLabel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSceneLabel_call method_call = new GetSceneLabel_call(_sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSceneLabel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      public GetSceneLabel_call(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<GetSceneLabel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSceneLabel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSceneLabel_args args = new GetSceneLabel_args();
        args.set_sceneId(_sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSceneLabel();
      }
    }

    public void SetSceneLabel(byte _sceneId, String _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneLabel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetSceneLabel_call method_call = new SetSceneLabel_call(_sceneId, _value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetSceneLabel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      private String _value;
      public SetSceneLabel_call(byte _sceneId, String _value, org.apache.thrift.async.AsyncMethodCallback<SetSceneLabel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
        this._value = _value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetSceneLabel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetSceneLabel_args args = new SetSceneLabel_args();
        args.set_sceneId(_sceneId);
        args.set_value(_value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetSceneLabel();
      }
    }

    public void SceneExists(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<SceneExists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SceneExists_call method_call = new SceneExists_call(_sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SceneExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      public SceneExists_call(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<SceneExists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SceneExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SceneExists_args args = new SceneExists_args();
        args.set_sceneId(_sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SceneExists();
      }
    }

    public void ActivateScene(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<ActivateScene_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ActivateScene_call method_call = new ActivateScene_call(_sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ActivateScene_call extends org.apache.thrift.async.TAsyncMethodCall {
      private byte _sceneId;
      public ActivateScene_call(byte _sceneId, org.apache.thrift.async.AsyncMethodCallback<ActivateScene_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._sceneId = _sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ActivateScene", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ActivateScene_args args = new ActivateScene_args();
        args.set_sceneId(_sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ActivateScene();
      }
    }

    public void GetDriverStatistics(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetDriverStatistics_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetDriverStatistics_call method_call = new GetDriverStatistics_call(_homeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetDriverStatistics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int _homeId;
      public GetDriverStatistics_call(int _homeId, org.apache.thrift.async.AsyncMethodCallback<GetDriverStatistics_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._homeId = _homeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetDriverStatistics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetDriverStatistics_args args = new GetDriverStatistics_args();
        args.set_homeId(_homeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetDriverStatisticsReturnStruct getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetDriverStatistics();
      }
    }

    public void SendAllValues(org.apache.thrift.async.AsyncMethodCallback<SendAllValues_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SendAllValues_call method_call = new SendAllValues_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SendAllValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      public SendAllValues_call(org.apache.thrift.async.AsyncMethodCallback<SendAllValues_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendAllValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SendAllValues_args args = new SendAllValues_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SendAllValues();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("WriteConfig", new WriteConfig());
      processMap.put("GetControllerNodeId", new GetControllerNodeId());
      processMap.put("IsPrimaryController", new IsPrimaryController());
      processMap.put("IsStaticUpdateController", new IsStaticUpdateController());
      processMap.put("IsBridgeController", new IsBridgeController());
      processMap.put("GetLibraryVersion", new GetLibraryVersion());
      processMap.put("GetLibraryTypeName", new GetLibraryTypeName());
      processMap.put("GetSendQueueCount", new GetSendQueueCount());
      processMap.put("LogDriverStatistics", new LogDriverStatistics());
      processMap.put("GetPollInterval", new GetPollInterval());
      processMap.put("SetPollInterval", new SetPollInterval());
      processMap.put("EnablePoll", new EnablePoll());
      processMap.put("DisablePoll", new DisablePoll());
      processMap.put("isPolled", new isPolled());
      processMap.put("SetPollIntensity", new SetPollIntensity());
      processMap.put("RefreshNodeInfo", new RefreshNodeInfo());
      processMap.put("RequestNodeState", new RequestNodeState());
      processMap.put("RequestNodeDynamic", new RequestNodeDynamic());
      processMap.put("IsNodeListeningDevice", new IsNodeListeningDevice());
      processMap.put("IsNodeFrequentListeningDevice", new IsNodeFrequentListeningDevice());
      processMap.put("IsNodeBeamingDevice", new IsNodeBeamingDevice());
      processMap.put("IsNodeRoutingDevice", new IsNodeRoutingDevice());
      processMap.put("IsNodeSecurityDevice", new IsNodeSecurityDevice());
      processMap.put("GetNodeMaxBaudRate", new GetNodeMaxBaudRate());
      processMap.put("GetNodeVersion", new GetNodeVersion());
      processMap.put("GetNodeSecurity", new GetNodeSecurity());
      processMap.put("GetNodeBasic", new GetNodeBasic());
      processMap.put("GetNodeGeneric", new GetNodeGeneric());
      processMap.put("GetNodeSpecific", new GetNodeSpecific());
      processMap.put("GetNodeType", new GetNodeType());
      processMap.put("GetNodeNeighbors", new GetNodeNeighbors());
      processMap.put("GetNodeManufacturerName", new GetNodeManufacturerName());
      processMap.put("GetNodeProductName", new GetNodeProductName());
      processMap.put("GetNodeName", new GetNodeName());
      processMap.put("GetNodeLocation", new GetNodeLocation());
      processMap.put("GetNodeManufacturerId", new GetNodeManufacturerId());
      processMap.put("GetNodeProductType", new GetNodeProductType());
      processMap.put("GetNodeProductId", new GetNodeProductId());
      processMap.put("SetNodeManufacturerName", new SetNodeManufacturerName());
      processMap.put("SetNodeProductName", new SetNodeProductName());
      processMap.put("SetNodeName", new SetNodeName());
      processMap.put("SetNodeLocation", new SetNodeLocation());
      processMap.put("SetNodeOn", new SetNodeOn());
      processMap.put("SetNodeOff", new SetNodeOff());
      processMap.put("SetNodeLevel", new SetNodeLevel());
      processMap.put("IsNodeInfoReceived", new IsNodeInfoReceived());
      processMap.put("GetNodeClassInformation", new GetNodeClassInformation());
      processMap.put("GetValueLabel", new GetValueLabel());
      processMap.put("SetValueLabel", new SetValueLabel());
      processMap.put("GetValueUnits", new GetValueUnits());
      processMap.put("SetValueUnits", new SetValueUnits());
      processMap.put("GetValueHelp", new GetValueHelp());
      processMap.put("SetValueHelp", new SetValueHelp());
      processMap.put("GetValueMin", new GetValueMin());
      processMap.put("GetValueMax", new GetValueMax());
      processMap.put("IsValueReadOnly", new IsValueReadOnly());
      processMap.put("IsValueWriteOnly", new IsValueWriteOnly());
      processMap.put("IsValueSet", new IsValueSet());
      processMap.put("IsValuePolled", new IsValuePolled());
      processMap.put("GetValueAsBool", new GetValueAsBool());
      processMap.put("GetValueAsByte", new GetValueAsByte());
      processMap.put("GetValueAsFloat", new GetValueAsFloat());
      processMap.put("GetValueAsInt", new GetValueAsInt());
      processMap.put("GetValueAsShort", new GetValueAsShort());
      processMap.put("GetValueAsString", new GetValueAsString());
      processMap.put("GetValueListSelection_String", new GetValueListSelection_String());
      processMap.put("GetValueListSelection_Int32", new GetValueListSelection_Int32());
      processMap.put("GetValueListItems", new GetValueListItems());
      processMap.put("GetValueFloatPrecision", new GetValueFloatPrecision());
      processMap.put("SetValue_Bool", new SetValue_Bool());
      processMap.put("SetValue_UInt8", new SetValue_UInt8());
      processMap.put("SetValue_Float", new SetValue_Float());
      processMap.put("SetValue_Int32", new SetValue_Int32());
      processMap.put("SetValue_Int16", new SetValue_Int16());
      processMap.put("SetValue_String", new SetValue_String());
      processMap.put("SetValueListSelection", new SetValueListSelection());
      processMap.put("RefreshValue", new RefreshValue());
      processMap.put("SetChangeVerified", new SetChangeVerified());
      processMap.put("PressButton", new PressButton());
      processMap.put("ReleaseButton", new ReleaseButton());
      processMap.put("GetNumSwitchPoints", new GetNumSwitchPoints());
      processMap.put("SetSwitchPoint", new SetSwitchPoint());
      processMap.put("RemoveSwitchPoint", new RemoveSwitchPoint());
      processMap.put("ClearSwitchPoints", new ClearSwitchPoints());
      processMap.put("GetSwitchPoint", new GetSwitchPoint());
      processMap.put("SwitchAllOn", new SwitchAllOn());
      processMap.put("SwitchAllOff", new SwitchAllOff());
      processMap.put("SetConfigParam", new SetConfigParam());
      processMap.put("RequestConfigParam", new RequestConfigParam());
      processMap.put("RequestAllConfigParams", new RequestAllConfigParams());
      processMap.put("GetNumGroups", new GetNumGroups());
      processMap.put("GetAssociations", new GetAssociations());
      processMap.put("GetMaxAssociations", new GetMaxAssociations());
      processMap.put("GetGroupLabel", new GetGroupLabel());
      processMap.put("AddAssociation", new AddAssociation());
      processMap.put("RemoveAssociation", new RemoveAssociation());
      processMap.put("ResetController", new ResetController());
      processMap.put("SoftReset", new SoftReset());
      processMap.put("BeginControllerCommand", new BeginControllerCommand());
      processMap.put("CancelControllerCommand", new CancelControllerCommand());
      processMap.put("GetNumScenes", new GetNumScenes());
      processMap.put("GetAllScenes", new GetAllScenes());
      processMap.put("CreateScene", new CreateScene());
      processMap.put("RemoveScene", new RemoveScene());
      processMap.put("AddSceneValue_Bool", new AddSceneValue_Bool());
      processMap.put("AddSceneValue_Uint8", new AddSceneValue_Uint8());
      processMap.put("AddSceneValue_Float", new AddSceneValue_Float());
      processMap.put("AddSceneValue_Int32", new AddSceneValue_Int32());
      processMap.put("AddSceneValue_Int16", new AddSceneValue_Int16());
      processMap.put("AddSceneValue_String", new AddSceneValue_String());
      processMap.put("AddSceneValueListSelection_String", new AddSceneValueListSelection_String());
      processMap.put("AddSceneValueListSelection_Int32", new AddSceneValueListSelection_Int32());
      processMap.put("RemoveSceneValue", new RemoveSceneValue());
      processMap.put("SceneGetValues", new SceneGetValues());
      processMap.put("SceneGetValueAsBool", new SceneGetValueAsBool());
      processMap.put("SceneGetValueAsByte", new SceneGetValueAsByte());
      processMap.put("SceneGetValueAsFloat", new SceneGetValueAsFloat());
      processMap.put("SceneGetValueAsInt", new SceneGetValueAsInt());
      processMap.put("SceneGetValueAsShort", new SceneGetValueAsShort());
      processMap.put("SceneGetValueAsString", new SceneGetValueAsString());
      processMap.put("SceneGetValueListSelection_String", new SceneGetValueListSelection_String());
      processMap.put("SceneGetValueListSelection_Int32", new SceneGetValueListSelection_Int32());
      processMap.put("SetSceneValue_Bool", new SetSceneValue_Bool());
      processMap.put("SetSceneValue_Uint8", new SetSceneValue_Uint8());
      processMap.put("SetSceneValue_Float", new SetSceneValue_Float());
      processMap.put("SetSceneValue_Int32", new SetSceneValue_Int32());
      processMap.put("SetSceneValue_Int16", new SetSceneValue_Int16());
      processMap.put("SetSceneValue_String", new SetSceneValue_String());
      processMap.put("SetSceneValueListSelection_String", new SetSceneValueListSelection_String());
      processMap.put("SetSceneValueListSelection_Int32", new SetSceneValueListSelection_Int32());
      processMap.put("GetSceneLabel", new GetSceneLabel());
      processMap.put("SetSceneLabel", new SetSceneLabel());
      processMap.put("SceneExists", new SceneExists());
      processMap.put("ActivateScene", new ActivateScene());
      processMap.put("GetDriverStatistics", new GetDriverStatistics());
      processMap.put("SendAllValues", new SendAllValues());
      return processMap;
    }

    private static class WriteConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, WriteConfig_args> {
      public WriteConfig() {
        super("WriteConfig");
      }

      protected WriteConfig_args getEmptyArgsInstance() {
        return new WriteConfig_args();
      }

      protected WriteConfig_result getResult(I iface, WriteConfig_args args) throws org.apache.thrift.TException {
        WriteConfig_result result = new WriteConfig_result();
        iface.WriteConfig(args._homeId);
        return result;
      }
    }

    private static class GetControllerNodeId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetControllerNodeId_args> {
      public GetControllerNodeId() {
        super("GetControllerNodeId");
      }

      protected GetControllerNodeId_args getEmptyArgsInstance() {
        return new GetControllerNodeId_args();
      }

      protected GetControllerNodeId_result getResult(I iface, GetControllerNodeId_args args) throws org.apache.thrift.TException {
        GetControllerNodeId_result result = new GetControllerNodeId_result();
        result.success = iface.GetControllerNodeId(args._homeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsPrimaryController<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsPrimaryController_args> {
      public IsPrimaryController() {
        super("IsPrimaryController");
      }

      protected IsPrimaryController_args getEmptyArgsInstance() {
        return new IsPrimaryController_args();
      }

      protected IsPrimaryController_result getResult(I iface, IsPrimaryController_args args) throws org.apache.thrift.TException {
        IsPrimaryController_result result = new IsPrimaryController_result();
        result.success = iface.IsPrimaryController(args._homeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsStaticUpdateController<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsStaticUpdateController_args> {
      public IsStaticUpdateController() {
        super("IsStaticUpdateController");
      }

      protected IsStaticUpdateController_args getEmptyArgsInstance() {
        return new IsStaticUpdateController_args();
      }

      protected IsStaticUpdateController_result getResult(I iface, IsStaticUpdateController_args args) throws org.apache.thrift.TException {
        IsStaticUpdateController_result result = new IsStaticUpdateController_result();
        result.success = iface.IsStaticUpdateController(args._homeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsBridgeController<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsBridgeController_args> {
      public IsBridgeController() {
        super("IsBridgeController");
      }

      protected IsBridgeController_args getEmptyArgsInstance() {
        return new IsBridgeController_args();
      }

      protected IsBridgeController_result getResult(I iface, IsBridgeController_args args) throws org.apache.thrift.TException {
        IsBridgeController_result result = new IsBridgeController_result();
        result.success = iface.IsBridgeController(args._homeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetLibraryVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetLibraryVersion_args> {
      public GetLibraryVersion() {
        super("GetLibraryVersion");
      }

      protected GetLibraryVersion_args getEmptyArgsInstance() {
        return new GetLibraryVersion_args();
      }

      protected GetLibraryVersion_result getResult(I iface, GetLibraryVersion_args args) throws org.apache.thrift.TException {
        GetLibraryVersion_result result = new GetLibraryVersion_result();
        result.success = iface.GetLibraryVersion(args._homeId);
        return result;
      }
    }

    private static class GetLibraryTypeName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetLibraryTypeName_args> {
      public GetLibraryTypeName() {
        super("GetLibraryTypeName");
      }

      protected GetLibraryTypeName_args getEmptyArgsInstance() {
        return new GetLibraryTypeName_args();
      }

      protected GetLibraryTypeName_result getResult(I iface, GetLibraryTypeName_args args) throws org.apache.thrift.TException {
        GetLibraryTypeName_result result = new GetLibraryTypeName_result();
        result.success = iface.GetLibraryTypeName(args._homeId);
        return result;
      }
    }

    private static class GetSendQueueCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSendQueueCount_args> {
      public GetSendQueueCount() {
        super("GetSendQueueCount");
      }

      protected GetSendQueueCount_args getEmptyArgsInstance() {
        return new GetSendQueueCount_args();
      }

      protected GetSendQueueCount_result getResult(I iface, GetSendQueueCount_args args) throws org.apache.thrift.TException {
        GetSendQueueCount_result result = new GetSendQueueCount_result();
        result.success = iface.GetSendQueueCount(args._homeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class LogDriverStatistics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LogDriverStatistics_args> {
      public LogDriverStatistics() {
        super("LogDriverStatistics");
      }

      protected LogDriverStatistics_args getEmptyArgsInstance() {
        return new LogDriverStatistics_args();
      }

      protected LogDriverStatistics_result getResult(I iface, LogDriverStatistics_args args) throws org.apache.thrift.TException {
        LogDriverStatistics_result result = new LogDriverStatistics_result();
        iface.LogDriverStatistics(args._homeId);
        return result;
      }
    }

    private static class GetPollInterval<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetPollInterval_args> {
      public GetPollInterval() {
        super("GetPollInterval");
      }

      protected GetPollInterval_args getEmptyArgsInstance() {
        return new GetPollInterval_args();
      }

      protected GetPollInterval_result getResult(I iface, GetPollInterval_args args) throws org.apache.thrift.TException {
        GetPollInterval_result result = new GetPollInterval_result();
        result.success = iface.GetPollInterval();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetPollInterval<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetPollInterval_args> {
      public SetPollInterval() {
        super("SetPollInterval");
      }

      protected SetPollInterval_args getEmptyArgsInstance() {
        return new SetPollInterval_args();
      }

      protected SetPollInterval_result getResult(I iface, SetPollInterval_args args) throws org.apache.thrift.TException {
        SetPollInterval_result result = new SetPollInterval_result();
        iface.SetPollInterval(args._milliseconds, args._bIntervalBetweenPolls);
        return result;
      }
    }

    private static class EnablePoll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EnablePoll_args> {
      public EnablePoll() {
        super("EnablePoll");
      }

      protected EnablePoll_args getEmptyArgsInstance() {
        return new EnablePoll_args();
      }

      protected EnablePoll_result getResult(I iface, EnablePoll_args args) throws org.apache.thrift.TException {
        EnablePoll_result result = new EnablePoll_result();
        result.success = iface.EnablePoll(args._valueId, args._intensity);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class DisablePoll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DisablePoll_args> {
      public DisablePoll() {
        super("DisablePoll");
      }

      protected DisablePoll_args getEmptyArgsInstance() {
        return new DisablePoll_args();
      }

      protected DisablePoll_result getResult(I iface, DisablePoll_args args) throws org.apache.thrift.TException {
        DisablePoll_result result = new DisablePoll_result();
        result.success = iface.DisablePoll(args._valueId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class isPolled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isPolled_args> {
      public isPolled() {
        super("isPolled");
      }

      protected isPolled_args getEmptyArgsInstance() {
        return new isPolled_args();
      }

      protected isPolled_result getResult(I iface, isPolled_args args) throws org.apache.thrift.TException {
        isPolled_result result = new isPolled_result();
        result.success = iface.isPolled(args._valueId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetPollIntensity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetPollIntensity_args> {
      public SetPollIntensity() {
        super("SetPollIntensity");
      }

      protected SetPollIntensity_args getEmptyArgsInstance() {
        return new SetPollIntensity_args();
      }

      protected SetPollIntensity_result getResult(I iface, SetPollIntensity_args args) throws org.apache.thrift.TException {
        SetPollIntensity_result result = new SetPollIntensity_result();
        iface.SetPollIntensity(args._valueId, args._intensity);
        return result;
      }
    }

    private static class RefreshNodeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RefreshNodeInfo_args> {
      public RefreshNodeInfo() {
        super("RefreshNodeInfo");
      }

      protected RefreshNodeInfo_args getEmptyArgsInstance() {
        return new RefreshNodeInfo_args();
      }

      protected RefreshNodeInfo_result getResult(I iface, RefreshNodeInfo_args args) throws org.apache.thrift.TException {
        RefreshNodeInfo_result result = new RefreshNodeInfo_result();
        result.success = iface.RefreshNodeInfo(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RequestNodeState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestNodeState_args> {
      public RequestNodeState() {
        super("RequestNodeState");
      }

      protected RequestNodeState_args getEmptyArgsInstance() {
        return new RequestNodeState_args();
      }

      protected RequestNodeState_result getResult(I iface, RequestNodeState_args args) throws org.apache.thrift.TException {
        RequestNodeState_result result = new RequestNodeState_result();
        result.success = iface.RequestNodeState(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RequestNodeDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestNodeDynamic_args> {
      public RequestNodeDynamic() {
        super("RequestNodeDynamic");
      }

      protected RequestNodeDynamic_args getEmptyArgsInstance() {
        return new RequestNodeDynamic_args();
      }

      protected RequestNodeDynamic_result getResult(I iface, RequestNodeDynamic_args args) throws org.apache.thrift.TException {
        RequestNodeDynamic_result result = new RequestNodeDynamic_result();
        result.success = iface.RequestNodeDynamic(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsNodeListeningDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsNodeListeningDevice_args> {
      public IsNodeListeningDevice() {
        super("IsNodeListeningDevice");
      }

      protected IsNodeListeningDevice_args getEmptyArgsInstance() {
        return new IsNodeListeningDevice_args();
      }

      protected IsNodeListeningDevice_result getResult(I iface, IsNodeListeningDevice_args args) throws org.apache.thrift.TException {
        IsNodeListeningDevice_result result = new IsNodeListeningDevice_result();
        result.success = iface.IsNodeListeningDevice(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsNodeFrequentListeningDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsNodeFrequentListeningDevice_args> {
      public IsNodeFrequentListeningDevice() {
        super("IsNodeFrequentListeningDevice");
      }

      protected IsNodeFrequentListeningDevice_args getEmptyArgsInstance() {
        return new IsNodeFrequentListeningDevice_args();
      }

      protected IsNodeFrequentListeningDevice_result getResult(I iface, IsNodeFrequentListeningDevice_args args) throws org.apache.thrift.TException {
        IsNodeFrequentListeningDevice_result result = new IsNodeFrequentListeningDevice_result();
        result.success = iface.IsNodeFrequentListeningDevice(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsNodeBeamingDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsNodeBeamingDevice_args> {
      public IsNodeBeamingDevice() {
        super("IsNodeBeamingDevice");
      }

      protected IsNodeBeamingDevice_args getEmptyArgsInstance() {
        return new IsNodeBeamingDevice_args();
      }

      protected IsNodeBeamingDevice_result getResult(I iface, IsNodeBeamingDevice_args args) throws org.apache.thrift.TException {
        IsNodeBeamingDevice_result result = new IsNodeBeamingDevice_result();
        result.success = iface.IsNodeBeamingDevice(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsNodeRoutingDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsNodeRoutingDevice_args> {
      public IsNodeRoutingDevice() {
        super("IsNodeRoutingDevice");
      }

      protected IsNodeRoutingDevice_args getEmptyArgsInstance() {
        return new IsNodeRoutingDevice_args();
      }

      protected IsNodeRoutingDevice_result getResult(I iface, IsNodeRoutingDevice_args args) throws org.apache.thrift.TException {
        IsNodeRoutingDevice_result result = new IsNodeRoutingDevice_result();
        result.success = iface.IsNodeRoutingDevice(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsNodeSecurityDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsNodeSecurityDevice_args> {
      public IsNodeSecurityDevice() {
        super("IsNodeSecurityDevice");
      }

      protected IsNodeSecurityDevice_args getEmptyArgsInstance() {
        return new IsNodeSecurityDevice_args();
      }

      protected IsNodeSecurityDevice_result getResult(I iface, IsNodeSecurityDevice_args args) throws org.apache.thrift.TException {
        IsNodeSecurityDevice_result result = new IsNodeSecurityDevice_result();
        result.success = iface.IsNodeSecurityDevice(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeMaxBaudRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeMaxBaudRate_args> {
      public GetNodeMaxBaudRate() {
        super("GetNodeMaxBaudRate");
      }

      protected GetNodeMaxBaudRate_args getEmptyArgsInstance() {
        return new GetNodeMaxBaudRate_args();
      }

      protected GetNodeMaxBaudRate_result getResult(I iface, GetNodeMaxBaudRate_args args) throws org.apache.thrift.TException {
        GetNodeMaxBaudRate_result result = new GetNodeMaxBaudRate_result();
        result.success = iface.GetNodeMaxBaudRate(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeVersion_args> {
      public GetNodeVersion() {
        super("GetNodeVersion");
      }

      protected GetNodeVersion_args getEmptyArgsInstance() {
        return new GetNodeVersion_args();
      }

      protected GetNodeVersion_result getResult(I iface, GetNodeVersion_args args) throws org.apache.thrift.TException {
        GetNodeVersion_result result = new GetNodeVersion_result();
        result.success = iface.GetNodeVersion(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeSecurity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeSecurity_args> {
      public GetNodeSecurity() {
        super("GetNodeSecurity");
      }

      protected GetNodeSecurity_args getEmptyArgsInstance() {
        return new GetNodeSecurity_args();
      }

      protected GetNodeSecurity_result getResult(I iface, GetNodeSecurity_args args) throws org.apache.thrift.TException {
        GetNodeSecurity_result result = new GetNodeSecurity_result();
        result.success = iface.GetNodeSecurity(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeBasic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeBasic_args> {
      public GetNodeBasic() {
        super("GetNodeBasic");
      }

      protected GetNodeBasic_args getEmptyArgsInstance() {
        return new GetNodeBasic_args();
      }

      protected GetNodeBasic_result getResult(I iface, GetNodeBasic_args args) throws org.apache.thrift.TException {
        GetNodeBasic_result result = new GetNodeBasic_result();
        result.success = iface.GetNodeBasic(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeGeneric<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeGeneric_args> {
      public GetNodeGeneric() {
        super("GetNodeGeneric");
      }

      protected GetNodeGeneric_args getEmptyArgsInstance() {
        return new GetNodeGeneric_args();
      }

      protected GetNodeGeneric_result getResult(I iface, GetNodeGeneric_args args) throws org.apache.thrift.TException {
        GetNodeGeneric_result result = new GetNodeGeneric_result();
        result.success = iface.GetNodeGeneric(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeSpecific<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeSpecific_args> {
      public GetNodeSpecific() {
        super("GetNodeSpecific");
      }

      protected GetNodeSpecific_args getEmptyArgsInstance() {
        return new GetNodeSpecific_args();
      }

      protected GetNodeSpecific_result getResult(I iface, GetNodeSpecific_args args) throws org.apache.thrift.TException {
        GetNodeSpecific_result result = new GetNodeSpecific_result();
        result.success = iface.GetNodeSpecific(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeType_args> {
      public GetNodeType() {
        super("GetNodeType");
      }

      protected GetNodeType_args getEmptyArgsInstance() {
        return new GetNodeType_args();
      }

      protected GetNodeType_result getResult(I iface, GetNodeType_args args) throws org.apache.thrift.TException {
        GetNodeType_result result = new GetNodeType_result();
        result.success = iface.GetNodeType(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeNeighbors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeNeighbors_args> {
      public GetNodeNeighbors() {
        super("GetNodeNeighbors");
      }

      protected GetNodeNeighbors_args getEmptyArgsInstance() {
        return new GetNodeNeighbors_args();
      }

      protected GetNodeNeighbors_result getResult(I iface, GetNodeNeighbors_args args) throws org.apache.thrift.TException {
        GetNodeNeighbors_result result = new GetNodeNeighbors_result();
        result.success = iface.GetNodeNeighbors(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeManufacturerName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeManufacturerName_args> {
      public GetNodeManufacturerName() {
        super("GetNodeManufacturerName");
      }

      protected GetNodeManufacturerName_args getEmptyArgsInstance() {
        return new GetNodeManufacturerName_args();
      }

      protected GetNodeManufacturerName_result getResult(I iface, GetNodeManufacturerName_args args) throws org.apache.thrift.TException {
        GetNodeManufacturerName_result result = new GetNodeManufacturerName_result();
        result.success = iface.GetNodeManufacturerName(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeProductName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeProductName_args> {
      public GetNodeProductName() {
        super("GetNodeProductName");
      }

      protected GetNodeProductName_args getEmptyArgsInstance() {
        return new GetNodeProductName_args();
      }

      protected GetNodeProductName_result getResult(I iface, GetNodeProductName_args args) throws org.apache.thrift.TException {
        GetNodeProductName_result result = new GetNodeProductName_result();
        result.success = iface.GetNodeProductName(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeName_args> {
      public GetNodeName() {
        super("GetNodeName");
      }

      protected GetNodeName_args getEmptyArgsInstance() {
        return new GetNodeName_args();
      }

      protected GetNodeName_result getResult(I iface, GetNodeName_args args) throws org.apache.thrift.TException {
        GetNodeName_result result = new GetNodeName_result();
        result.success = iface.GetNodeName(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeLocation_args> {
      public GetNodeLocation() {
        super("GetNodeLocation");
      }

      protected GetNodeLocation_args getEmptyArgsInstance() {
        return new GetNodeLocation_args();
      }

      protected GetNodeLocation_result getResult(I iface, GetNodeLocation_args args) throws org.apache.thrift.TException {
        GetNodeLocation_result result = new GetNodeLocation_result();
        result.success = iface.GetNodeLocation(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeManufacturerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeManufacturerId_args> {
      public GetNodeManufacturerId() {
        super("GetNodeManufacturerId");
      }

      protected GetNodeManufacturerId_args getEmptyArgsInstance() {
        return new GetNodeManufacturerId_args();
      }

      protected GetNodeManufacturerId_result getResult(I iface, GetNodeManufacturerId_args args) throws org.apache.thrift.TException {
        GetNodeManufacturerId_result result = new GetNodeManufacturerId_result();
        result.success = iface.GetNodeManufacturerId(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeProductType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeProductType_args> {
      public GetNodeProductType() {
        super("GetNodeProductType");
      }

      protected GetNodeProductType_args getEmptyArgsInstance() {
        return new GetNodeProductType_args();
      }

      protected GetNodeProductType_result getResult(I iface, GetNodeProductType_args args) throws org.apache.thrift.TException {
        GetNodeProductType_result result = new GetNodeProductType_result();
        result.success = iface.GetNodeProductType(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNodeProductId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeProductId_args> {
      public GetNodeProductId() {
        super("GetNodeProductId");
      }

      protected GetNodeProductId_args getEmptyArgsInstance() {
        return new GetNodeProductId_args();
      }

      protected GetNodeProductId_result getResult(I iface, GetNodeProductId_args args) throws org.apache.thrift.TException {
        GetNodeProductId_result result = new GetNodeProductId_result();
        result.success = iface.GetNodeProductId(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class SetNodeManufacturerName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeManufacturerName_args> {
      public SetNodeManufacturerName() {
        super("SetNodeManufacturerName");
      }

      protected SetNodeManufacturerName_args getEmptyArgsInstance() {
        return new SetNodeManufacturerName_args();
      }

      protected SetNodeManufacturerName_result getResult(I iface, SetNodeManufacturerName_args args) throws org.apache.thrift.TException {
        SetNodeManufacturerName_result result = new SetNodeManufacturerName_result();
        iface.SetNodeManufacturerName(args._homeId, args._nodeId, args._manufacturerName);
        return result;
      }
    }

    private static class SetNodeProductName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeProductName_args> {
      public SetNodeProductName() {
        super("SetNodeProductName");
      }

      protected SetNodeProductName_args getEmptyArgsInstance() {
        return new SetNodeProductName_args();
      }

      protected SetNodeProductName_result getResult(I iface, SetNodeProductName_args args) throws org.apache.thrift.TException {
        SetNodeProductName_result result = new SetNodeProductName_result();
        iface.SetNodeProductName(args._homeId, args._nodeId, args._productName);
        return result;
      }
    }

    private static class SetNodeName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeName_args> {
      public SetNodeName() {
        super("SetNodeName");
      }

      protected SetNodeName_args getEmptyArgsInstance() {
        return new SetNodeName_args();
      }

      protected SetNodeName_result getResult(I iface, SetNodeName_args args) throws org.apache.thrift.TException {
        SetNodeName_result result = new SetNodeName_result();
        iface.SetNodeName(args._homeId, args._nodeId, args._nodeName);
        return result;
      }
    }

    private static class SetNodeLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeLocation_args> {
      public SetNodeLocation() {
        super("SetNodeLocation");
      }

      protected SetNodeLocation_args getEmptyArgsInstance() {
        return new SetNodeLocation_args();
      }

      protected SetNodeLocation_result getResult(I iface, SetNodeLocation_args args) throws org.apache.thrift.TException {
        SetNodeLocation_result result = new SetNodeLocation_result();
        iface.SetNodeLocation(args._homeId, args._nodeId, args._location);
        return result;
      }
    }

    private static class SetNodeOn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeOn_args> {
      public SetNodeOn() {
        super("SetNodeOn");
      }

      protected SetNodeOn_args getEmptyArgsInstance() {
        return new SetNodeOn_args();
      }

      protected SetNodeOn_result getResult(I iface, SetNodeOn_args args) throws org.apache.thrift.TException {
        SetNodeOn_result result = new SetNodeOn_result();
        iface.SetNodeOn(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class SetNodeOff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeOff_args> {
      public SetNodeOff() {
        super("SetNodeOff");
      }

      protected SetNodeOff_args getEmptyArgsInstance() {
        return new SetNodeOff_args();
      }

      protected SetNodeOff_result getResult(I iface, SetNodeOff_args args) throws org.apache.thrift.TException {
        SetNodeOff_result result = new SetNodeOff_result();
        iface.SetNodeOff(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class SetNodeLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetNodeLevel_args> {
      public SetNodeLevel() {
        super("SetNodeLevel");
      }

      protected SetNodeLevel_args getEmptyArgsInstance() {
        return new SetNodeLevel_args();
      }

      protected SetNodeLevel_result getResult(I iface, SetNodeLevel_args args) throws org.apache.thrift.TException {
        SetNodeLevel_result result = new SetNodeLevel_result();
        iface.SetNodeLevel(args._homeId, args._nodeId, args._level);
        return result;
      }
    }

    private static class IsNodeInfoReceived<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsNodeInfoReceived_args> {
      public IsNodeInfoReceived() {
        super("IsNodeInfoReceived");
      }

      protected IsNodeInfoReceived_args getEmptyArgsInstance() {
        return new IsNodeInfoReceived_args();
      }

      protected IsNodeInfoReceived_result getResult(I iface, IsNodeInfoReceived_args args) throws org.apache.thrift.TException {
        IsNodeInfoReceived_result result = new IsNodeInfoReceived_result();
        result.success = iface.IsNodeInfoReceived(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNodeClassInformation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNodeClassInformation_args> {
      public GetNodeClassInformation() {
        super("GetNodeClassInformation");
      }

      protected GetNodeClassInformation_args getEmptyArgsInstance() {
        return new GetNodeClassInformation_args();
      }

      protected GetNodeClassInformation_result getResult(I iface, GetNodeClassInformation_args args) throws org.apache.thrift.TException {
        GetNodeClassInformation_result result = new GetNodeClassInformation_result();
        result.success = iface.GetNodeClassInformation(args._homeId, args._nodeId, args._commandClassId);
        return result;
      }
    }

    private static class GetValueLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueLabel_args> {
      public GetValueLabel() {
        super("GetValueLabel");
      }

      protected GetValueLabel_args getEmptyArgsInstance() {
        return new GetValueLabel_args();
      }

      protected GetValueLabel_result getResult(I iface, GetValueLabel_args args) throws org.apache.thrift.TException {
        GetValueLabel_result result = new GetValueLabel_result();
        result.success = iface.GetValueLabel(args._id);
        return result;
      }
    }

    private static class SetValueLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValueLabel_args> {
      public SetValueLabel() {
        super("SetValueLabel");
      }

      protected SetValueLabel_args getEmptyArgsInstance() {
        return new SetValueLabel_args();
      }

      protected SetValueLabel_result getResult(I iface, SetValueLabel_args args) throws org.apache.thrift.TException {
        SetValueLabel_result result = new SetValueLabel_result();
        iface.SetValueLabel(args._id, args._value);
        return result;
      }
    }

    private static class GetValueUnits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueUnits_args> {
      public GetValueUnits() {
        super("GetValueUnits");
      }

      protected GetValueUnits_args getEmptyArgsInstance() {
        return new GetValueUnits_args();
      }

      protected GetValueUnits_result getResult(I iface, GetValueUnits_args args) throws org.apache.thrift.TException {
        GetValueUnits_result result = new GetValueUnits_result();
        result.success = iface.GetValueUnits(args._id);
        return result;
      }
    }

    private static class SetValueUnits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValueUnits_args> {
      public SetValueUnits() {
        super("SetValueUnits");
      }

      protected SetValueUnits_args getEmptyArgsInstance() {
        return new SetValueUnits_args();
      }

      protected SetValueUnits_result getResult(I iface, SetValueUnits_args args) throws org.apache.thrift.TException {
        SetValueUnits_result result = new SetValueUnits_result();
        iface.SetValueUnits(args._id, args._value);
        return result;
      }
    }

    private static class GetValueHelp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueHelp_args> {
      public GetValueHelp() {
        super("GetValueHelp");
      }

      protected GetValueHelp_args getEmptyArgsInstance() {
        return new GetValueHelp_args();
      }

      protected GetValueHelp_result getResult(I iface, GetValueHelp_args args) throws org.apache.thrift.TException {
        GetValueHelp_result result = new GetValueHelp_result();
        result.success = iface.GetValueHelp(args._id);
        return result;
      }
    }

    private static class SetValueHelp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValueHelp_args> {
      public SetValueHelp() {
        super("SetValueHelp");
      }

      protected SetValueHelp_args getEmptyArgsInstance() {
        return new SetValueHelp_args();
      }

      protected SetValueHelp_result getResult(I iface, SetValueHelp_args args) throws org.apache.thrift.TException {
        SetValueHelp_result result = new SetValueHelp_result();
        iface.SetValueHelp(args._id, args._value);
        return result;
      }
    }

    private static class GetValueMin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueMin_args> {
      public GetValueMin() {
        super("GetValueMin");
      }

      protected GetValueMin_args getEmptyArgsInstance() {
        return new GetValueMin_args();
      }

      protected GetValueMin_result getResult(I iface, GetValueMin_args args) throws org.apache.thrift.TException {
        GetValueMin_result result = new GetValueMin_result();
        result.success = iface.GetValueMin(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetValueMax<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueMax_args> {
      public GetValueMax() {
        super("GetValueMax");
      }

      protected GetValueMax_args getEmptyArgsInstance() {
        return new GetValueMax_args();
      }

      protected GetValueMax_result getResult(I iface, GetValueMax_args args) throws org.apache.thrift.TException {
        GetValueMax_result result = new GetValueMax_result();
        result.success = iface.GetValueMax(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsValueReadOnly<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsValueReadOnly_args> {
      public IsValueReadOnly() {
        super("IsValueReadOnly");
      }

      protected IsValueReadOnly_args getEmptyArgsInstance() {
        return new IsValueReadOnly_args();
      }

      protected IsValueReadOnly_result getResult(I iface, IsValueReadOnly_args args) throws org.apache.thrift.TException {
        IsValueReadOnly_result result = new IsValueReadOnly_result();
        result.success = iface.IsValueReadOnly(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsValueWriteOnly<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsValueWriteOnly_args> {
      public IsValueWriteOnly() {
        super("IsValueWriteOnly");
      }

      protected IsValueWriteOnly_args getEmptyArgsInstance() {
        return new IsValueWriteOnly_args();
      }

      protected IsValueWriteOnly_result getResult(I iface, IsValueWriteOnly_args args) throws org.apache.thrift.TException {
        IsValueWriteOnly_result result = new IsValueWriteOnly_result();
        result.success = iface.IsValueWriteOnly(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsValueSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsValueSet_args> {
      public IsValueSet() {
        super("IsValueSet");
      }

      protected IsValueSet_args getEmptyArgsInstance() {
        return new IsValueSet_args();
      }

      protected IsValueSet_result getResult(I iface, IsValueSet_args args) throws org.apache.thrift.TException {
        IsValueSet_result result = new IsValueSet_result();
        result.success = iface.IsValueSet(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsValuePolled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsValuePolled_args> {
      public IsValuePolled() {
        super("IsValuePolled");
      }

      protected IsValuePolled_args getEmptyArgsInstance() {
        return new IsValuePolled_args();
      }

      protected IsValuePolled_result getResult(I iface, IsValuePolled_args args) throws org.apache.thrift.TException {
        IsValuePolled_result result = new IsValuePolled_result();
        result.success = iface.IsValuePolled(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetValueAsBool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueAsBool_args> {
      public GetValueAsBool() {
        super("GetValueAsBool");
      }

      protected GetValueAsBool_args getEmptyArgsInstance() {
        return new GetValueAsBool_args();
      }

      protected GetValueAsBool_result getResult(I iface, GetValueAsBool_args args) throws org.apache.thrift.TException {
        GetValueAsBool_result result = new GetValueAsBool_result();
        result.success = iface.GetValueAsBool(args._id);
        return result;
      }
    }

    private static class GetValueAsByte<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueAsByte_args> {
      public GetValueAsByte() {
        super("GetValueAsByte");
      }

      protected GetValueAsByte_args getEmptyArgsInstance() {
        return new GetValueAsByte_args();
      }

      protected GetValueAsByte_result getResult(I iface, GetValueAsByte_args args) throws org.apache.thrift.TException {
        GetValueAsByte_result result = new GetValueAsByte_result();
        result.success = iface.GetValueAsByte(args._id);
        return result;
      }
    }

    private static class GetValueAsFloat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueAsFloat_args> {
      public GetValueAsFloat() {
        super("GetValueAsFloat");
      }

      protected GetValueAsFloat_args getEmptyArgsInstance() {
        return new GetValueAsFloat_args();
      }

      protected GetValueAsFloat_result getResult(I iface, GetValueAsFloat_args args) throws org.apache.thrift.TException {
        GetValueAsFloat_result result = new GetValueAsFloat_result();
        result.success = iface.GetValueAsFloat(args._id);
        return result;
      }
    }

    private static class GetValueAsInt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueAsInt_args> {
      public GetValueAsInt() {
        super("GetValueAsInt");
      }

      protected GetValueAsInt_args getEmptyArgsInstance() {
        return new GetValueAsInt_args();
      }

      protected GetValueAsInt_result getResult(I iface, GetValueAsInt_args args) throws org.apache.thrift.TException {
        GetValueAsInt_result result = new GetValueAsInt_result();
        result.success = iface.GetValueAsInt(args._id);
        return result;
      }
    }

    private static class GetValueAsShort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueAsShort_args> {
      public GetValueAsShort() {
        super("GetValueAsShort");
      }

      protected GetValueAsShort_args getEmptyArgsInstance() {
        return new GetValueAsShort_args();
      }

      protected GetValueAsShort_result getResult(I iface, GetValueAsShort_args args) throws org.apache.thrift.TException {
        GetValueAsShort_result result = new GetValueAsShort_result();
        result.success = iface.GetValueAsShort(args._id);
        return result;
      }
    }

    private static class GetValueAsString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueAsString_args> {
      public GetValueAsString() {
        super("GetValueAsString");
      }

      protected GetValueAsString_args getEmptyArgsInstance() {
        return new GetValueAsString_args();
      }

      protected GetValueAsString_result getResult(I iface, GetValueAsString_args args) throws org.apache.thrift.TException {
        GetValueAsString_result result = new GetValueAsString_result();
        result.success = iface.GetValueAsString(args._id);
        return result;
      }
    }

    private static class GetValueListSelection_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueListSelection_String_args> {
      public GetValueListSelection_String() {
        super("GetValueListSelection_String");
      }

      protected GetValueListSelection_String_args getEmptyArgsInstance() {
        return new GetValueListSelection_String_args();
      }

      protected GetValueListSelection_String_result getResult(I iface, GetValueListSelection_String_args args) throws org.apache.thrift.TException {
        GetValueListSelection_String_result result = new GetValueListSelection_String_result();
        result.success = iface.GetValueListSelection_String(args._id);
        return result;
      }
    }

    private static class GetValueListSelection_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueListSelection_Int32_args> {
      public GetValueListSelection_Int32() {
        super("GetValueListSelection_Int32");
      }

      protected GetValueListSelection_Int32_args getEmptyArgsInstance() {
        return new GetValueListSelection_Int32_args();
      }

      protected GetValueListSelection_Int32_result getResult(I iface, GetValueListSelection_Int32_args args) throws org.apache.thrift.TException {
        GetValueListSelection_Int32_result result = new GetValueListSelection_Int32_result();
        result.success = iface.GetValueListSelection_Int32(args._id);
        return result;
      }
    }

    private static class GetValueListItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueListItems_args> {
      public GetValueListItems() {
        super("GetValueListItems");
      }

      protected GetValueListItems_args getEmptyArgsInstance() {
        return new GetValueListItems_args();
      }

      protected GetValueListItems_result getResult(I iface, GetValueListItems_args args) throws org.apache.thrift.TException {
        GetValueListItems_result result = new GetValueListItems_result();
        result.success = iface.GetValueListItems(args._id);
        return result;
      }
    }

    private static class GetValueFloatPrecision<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetValueFloatPrecision_args> {
      public GetValueFloatPrecision() {
        super("GetValueFloatPrecision");
      }

      protected GetValueFloatPrecision_args getEmptyArgsInstance() {
        return new GetValueFloatPrecision_args();
      }

      protected GetValueFloatPrecision_result getResult(I iface, GetValueFloatPrecision_args args) throws org.apache.thrift.TException {
        GetValueFloatPrecision_result result = new GetValueFloatPrecision_result();
        result.success = iface.GetValueFloatPrecision(args._id);
        return result;
      }
    }

    private static class SetValue_Bool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_Bool_args> {
      public SetValue_Bool() {
        super("SetValue_Bool");
      }

      protected SetValue_Bool_args getEmptyArgsInstance() {
        return new SetValue_Bool_args();
      }

      protected SetValue_Bool_result getResult(I iface, SetValue_Bool_args args) throws org.apache.thrift.TException {
        SetValue_Bool_result result = new SetValue_Bool_result();
        result.success = iface.SetValue_Bool(args._id, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetValue_UInt8<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_UInt8_args> {
      public SetValue_UInt8() {
        super("SetValue_UInt8");
      }

      protected SetValue_UInt8_args getEmptyArgsInstance() {
        return new SetValue_UInt8_args();
      }

      protected SetValue_UInt8_result getResult(I iface, SetValue_UInt8_args args) throws org.apache.thrift.TException {
        SetValue_UInt8_result result = new SetValue_UInt8_result();
        result.success = iface.SetValue_UInt8(args._id, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetValue_Float<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_Float_args> {
      public SetValue_Float() {
        super("SetValue_Float");
      }

      protected SetValue_Float_args getEmptyArgsInstance() {
        return new SetValue_Float_args();
      }

      protected SetValue_Float_result getResult(I iface, SetValue_Float_args args) throws org.apache.thrift.TException {
        SetValue_Float_result result = new SetValue_Float_result();
        result.success = iface.SetValue_Float(args._id, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetValue_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_Int32_args> {
      public SetValue_Int32() {
        super("SetValue_Int32");
      }

      protected SetValue_Int32_args getEmptyArgsInstance() {
        return new SetValue_Int32_args();
      }

      protected SetValue_Int32_result getResult(I iface, SetValue_Int32_args args) throws org.apache.thrift.TException {
        SetValue_Int32_result result = new SetValue_Int32_result();
        result.success = iface.SetValue_Int32(args._id, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetValue_Int16<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_Int16_args> {
      public SetValue_Int16() {
        super("SetValue_Int16");
      }

      protected SetValue_Int16_args getEmptyArgsInstance() {
        return new SetValue_Int16_args();
      }

      protected SetValue_Int16_result getResult(I iface, SetValue_Int16_args args) throws org.apache.thrift.TException {
        SetValue_Int16_result result = new SetValue_Int16_result();
        result.success = iface.SetValue_Int16(args._id, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetValue_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValue_String_args> {
      public SetValue_String() {
        super("SetValue_String");
      }

      protected SetValue_String_args getEmptyArgsInstance() {
        return new SetValue_String_args();
      }

      protected SetValue_String_result getResult(I iface, SetValue_String_args args) throws org.apache.thrift.TException {
        SetValue_String_result result = new SetValue_String_result();
        result.success = iface.SetValue_String(args._id, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetValueListSelection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetValueListSelection_args> {
      public SetValueListSelection() {
        super("SetValueListSelection");
      }

      protected SetValueListSelection_args getEmptyArgsInstance() {
        return new SetValueListSelection_args();
      }

      protected SetValueListSelection_result getResult(I iface, SetValueListSelection_args args) throws org.apache.thrift.TException {
        SetValueListSelection_result result = new SetValueListSelection_result();
        result.success = iface.SetValueListSelection(args._id, args._selectedItem);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RefreshValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RefreshValue_args> {
      public RefreshValue() {
        super("RefreshValue");
      }

      protected RefreshValue_args getEmptyArgsInstance() {
        return new RefreshValue_args();
      }

      protected RefreshValue_result getResult(I iface, RefreshValue_args args) throws org.apache.thrift.TException {
        RefreshValue_result result = new RefreshValue_result();
        result.success = iface.RefreshValue(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetChangeVerified<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetChangeVerified_args> {
      public SetChangeVerified() {
        super("SetChangeVerified");
      }

      protected SetChangeVerified_args getEmptyArgsInstance() {
        return new SetChangeVerified_args();
      }

      protected SetChangeVerified_result getResult(I iface, SetChangeVerified_args args) throws org.apache.thrift.TException {
        SetChangeVerified_result result = new SetChangeVerified_result();
        iface.SetChangeVerified(args._id, args._verify);
        return result;
      }
    }

    private static class PressButton<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PressButton_args> {
      public PressButton() {
        super("PressButton");
      }

      protected PressButton_args getEmptyArgsInstance() {
        return new PressButton_args();
      }

      protected PressButton_result getResult(I iface, PressButton_args args) throws org.apache.thrift.TException {
        PressButton_result result = new PressButton_result();
        result.success = iface.PressButton(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class ReleaseButton<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReleaseButton_args> {
      public ReleaseButton() {
        super("ReleaseButton");
      }

      protected ReleaseButton_args getEmptyArgsInstance() {
        return new ReleaseButton_args();
      }

      protected ReleaseButton_result getResult(I iface, ReleaseButton_args args) throws org.apache.thrift.TException {
        ReleaseButton_result result = new ReleaseButton_result();
        result.success = iface.ReleaseButton(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNumSwitchPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNumSwitchPoints_args> {
      public GetNumSwitchPoints() {
        super("GetNumSwitchPoints");
      }

      protected GetNumSwitchPoints_args getEmptyArgsInstance() {
        return new GetNumSwitchPoints_args();
      }

      protected GetNumSwitchPoints_result getResult(I iface, GetNumSwitchPoints_args args) throws org.apache.thrift.TException {
        GetNumSwitchPoints_result result = new GetNumSwitchPoints_result();
        result.success = iface.GetNumSwitchPoints(args._id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSwitchPoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSwitchPoint_args> {
      public SetSwitchPoint() {
        super("SetSwitchPoint");
      }

      protected SetSwitchPoint_args getEmptyArgsInstance() {
        return new SetSwitchPoint_args();
      }

      protected SetSwitchPoint_result getResult(I iface, SetSwitchPoint_args args) throws org.apache.thrift.TException {
        SetSwitchPoint_result result = new SetSwitchPoint_result();
        result.success = iface.SetSwitchPoint(args._id, args._hours, args._minutes, args._setback);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveSwitchPoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveSwitchPoint_args> {
      public RemoveSwitchPoint() {
        super("RemoveSwitchPoint");
      }

      protected RemoveSwitchPoint_args getEmptyArgsInstance() {
        return new RemoveSwitchPoint_args();
      }

      protected RemoveSwitchPoint_result getResult(I iface, RemoveSwitchPoint_args args) throws org.apache.thrift.TException {
        RemoveSwitchPoint_result result = new RemoveSwitchPoint_result();
        result.success = iface.RemoveSwitchPoint(args._id, args._hours, args._minutes);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class ClearSwitchPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ClearSwitchPoints_args> {
      public ClearSwitchPoints() {
        super("ClearSwitchPoints");
      }

      protected ClearSwitchPoints_args getEmptyArgsInstance() {
        return new ClearSwitchPoints_args();
      }

      protected ClearSwitchPoints_result getResult(I iface, ClearSwitchPoints_args args) throws org.apache.thrift.TException {
        ClearSwitchPoints_result result = new ClearSwitchPoints_result();
        iface.ClearSwitchPoints(args._id);
        return result;
      }
    }

    private static class GetSwitchPoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSwitchPoint_args> {
      public GetSwitchPoint() {
        super("GetSwitchPoint");
      }

      protected GetSwitchPoint_args getEmptyArgsInstance() {
        return new GetSwitchPoint_args();
      }

      protected GetSwitchPoint_result getResult(I iface, GetSwitchPoint_args args) throws org.apache.thrift.TException {
        GetSwitchPoint_result result = new GetSwitchPoint_result();
        result.success = iface.GetSwitchPoint(args._id, args._idx);
        return result;
      }
    }

    private static class SwitchAllOn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SwitchAllOn_args> {
      public SwitchAllOn() {
        super("SwitchAllOn");
      }

      protected SwitchAllOn_args getEmptyArgsInstance() {
        return new SwitchAllOn_args();
      }

      protected SwitchAllOn_result getResult(I iface, SwitchAllOn_args args) throws org.apache.thrift.TException {
        SwitchAllOn_result result = new SwitchAllOn_result();
        iface.SwitchAllOn(args._homeId);
        return result;
      }
    }

    private static class SwitchAllOff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SwitchAllOff_args> {
      public SwitchAllOff() {
        super("SwitchAllOff");
      }

      protected SwitchAllOff_args getEmptyArgsInstance() {
        return new SwitchAllOff_args();
      }

      protected SwitchAllOff_result getResult(I iface, SwitchAllOff_args args) throws org.apache.thrift.TException {
        SwitchAllOff_result result = new SwitchAllOff_result();
        iface.SwitchAllOff(args._homeId);
        return result;
      }
    }

    private static class SetConfigParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetConfigParam_args> {
      public SetConfigParam() {
        super("SetConfigParam");
      }

      protected SetConfigParam_args getEmptyArgsInstance() {
        return new SetConfigParam_args();
      }

      protected SetConfigParam_result getResult(I iface, SetConfigParam_args args) throws org.apache.thrift.TException {
        SetConfigParam_result result = new SetConfigParam_result();
        result.success = iface.SetConfigParam(args._homeId, args._nodeId, args._param, args._value, args._size);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RequestConfigParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestConfigParam_args> {
      public RequestConfigParam() {
        super("RequestConfigParam");
      }

      protected RequestConfigParam_args getEmptyArgsInstance() {
        return new RequestConfigParam_args();
      }

      protected RequestConfigParam_result getResult(I iface, RequestConfigParam_args args) throws org.apache.thrift.TException {
        RequestConfigParam_result result = new RequestConfigParam_result();
        iface.RequestConfigParam(args._homeId, args._nodeId, args._param);
        return result;
      }
    }

    private static class RequestAllConfigParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestAllConfigParams_args> {
      public RequestAllConfigParams() {
        super("RequestAllConfigParams");
      }

      protected RequestAllConfigParams_args getEmptyArgsInstance() {
        return new RequestAllConfigParams_args();
      }

      protected RequestAllConfigParams_result getResult(I iface, RequestAllConfigParams_args args) throws org.apache.thrift.TException {
        RequestAllConfigParams_result result = new RequestAllConfigParams_result();
        iface.RequestAllConfigParams(args._homeId, args._nodeId);
        return result;
      }
    }

    private static class GetNumGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNumGroups_args> {
      public GetNumGroups() {
        super("GetNumGroups");
      }

      protected GetNumGroups_args getEmptyArgsInstance() {
        return new GetNumGroups_args();
      }

      protected GetNumGroups_result getResult(I iface, GetNumGroups_args args) throws org.apache.thrift.TException {
        GetNumGroups_result result = new GetNumGroups_result();
        result.success = iface.GetNumGroups(args._homeId, args._nodeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetAssociations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAssociations_args> {
      public GetAssociations() {
        super("GetAssociations");
      }

      protected GetAssociations_args getEmptyArgsInstance() {
        return new GetAssociations_args();
      }

      protected GetAssociations_result getResult(I iface, GetAssociations_args args) throws org.apache.thrift.TException {
        GetAssociations_result result = new GetAssociations_result();
        result.success = iface.GetAssociations(args._homeId, args._nodeId, args._groupIdx);
        return result;
      }
    }

    private static class GetMaxAssociations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMaxAssociations_args> {
      public GetMaxAssociations() {
        super("GetMaxAssociations");
      }

      protected GetMaxAssociations_args getEmptyArgsInstance() {
        return new GetMaxAssociations_args();
      }

      protected GetMaxAssociations_result getResult(I iface, GetMaxAssociations_args args) throws org.apache.thrift.TException {
        GetMaxAssociations_result result = new GetMaxAssociations_result();
        result.success = iface.GetMaxAssociations(args._homeId, args._nodeId, args._groupIdx);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetGroupLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetGroupLabel_args> {
      public GetGroupLabel() {
        super("GetGroupLabel");
      }

      protected GetGroupLabel_args getEmptyArgsInstance() {
        return new GetGroupLabel_args();
      }

      protected GetGroupLabel_result getResult(I iface, GetGroupLabel_args args) throws org.apache.thrift.TException {
        GetGroupLabel_result result = new GetGroupLabel_result();
        result.success = iface.GetGroupLabel(args._homeId, args._nodeId, args._groupIdx);
        return result;
      }
    }

    private static class AddAssociation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddAssociation_args> {
      public AddAssociation() {
        super("AddAssociation");
      }

      protected AddAssociation_args getEmptyArgsInstance() {
        return new AddAssociation_args();
      }

      protected AddAssociation_result getResult(I iface, AddAssociation_args args) throws org.apache.thrift.TException {
        AddAssociation_result result = new AddAssociation_result();
        iface.AddAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId);
        return result;
      }
    }

    private static class RemoveAssociation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveAssociation_args> {
      public RemoveAssociation() {
        super("RemoveAssociation");
      }

      protected RemoveAssociation_args getEmptyArgsInstance() {
        return new RemoveAssociation_args();
      }

      protected RemoveAssociation_result getResult(I iface, RemoveAssociation_args args) throws org.apache.thrift.TException {
        RemoveAssociation_result result = new RemoveAssociation_result();
        iface.RemoveAssociation(args._homeId, args._nodeId, args._groupIdx, args._targetNodeId);
        return result;
      }
    }

    private static class ResetController<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResetController_args> {
      public ResetController() {
        super("ResetController");
      }

      protected ResetController_args getEmptyArgsInstance() {
        return new ResetController_args();
      }

      protected ResetController_result getResult(I iface, ResetController_args args) throws org.apache.thrift.TException {
        ResetController_result result = new ResetController_result();
        iface.ResetController(args._homeId);
        return result;
      }
    }

    private static class SoftReset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SoftReset_args> {
      public SoftReset() {
        super("SoftReset");
      }

      protected SoftReset_args getEmptyArgsInstance() {
        return new SoftReset_args();
      }

      protected SoftReset_result getResult(I iface, SoftReset_args args) throws org.apache.thrift.TException {
        SoftReset_result result = new SoftReset_result();
        iface.SoftReset(args._homeId);
        return result;
      }
    }

    private static class BeginControllerCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BeginControllerCommand_args> {
      public BeginControllerCommand() {
        super("BeginControllerCommand");
      }

      protected BeginControllerCommand_args getEmptyArgsInstance() {
        return new BeginControllerCommand_args();
      }

      protected BeginControllerCommand_result getResult(I iface, BeginControllerCommand_args args) throws org.apache.thrift.TException {
        BeginControllerCommand_result result = new BeginControllerCommand_result();
        result.success = iface.BeginControllerCommand(args._homeId, args._command, args._highPower, args._nodeId, args._arg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class CancelControllerCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CancelControllerCommand_args> {
      public CancelControllerCommand() {
        super("CancelControllerCommand");
      }

      protected CancelControllerCommand_args getEmptyArgsInstance() {
        return new CancelControllerCommand_args();
      }

      protected CancelControllerCommand_result getResult(I iface, CancelControllerCommand_args args) throws org.apache.thrift.TException {
        CancelControllerCommand_result result = new CancelControllerCommand_result();
        result.success = iface.CancelControllerCommand(args._homeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetNumScenes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetNumScenes_args> {
      public GetNumScenes() {
        super("GetNumScenes");
      }

      protected GetNumScenes_args getEmptyArgsInstance() {
        return new GetNumScenes_args();
      }

      protected GetNumScenes_result getResult(I iface, GetNumScenes_args args) throws org.apache.thrift.TException {
        GetNumScenes_result result = new GetNumScenes_result();
        result.success = iface.GetNumScenes();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetAllScenes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllScenes_args> {
      public GetAllScenes() {
        super("GetAllScenes");
      }

      protected GetAllScenes_args getEmptyArgsInstance() {
        return new GetAllScenes_args();
      }

      protected GetAllScenes_result getResult(I iface, GetAllScenes_args args) throws org.apache.thrift.TException {
        GetAllScenes_result result = new GetAllScenes_result();
        result.success = iface.GetAllScenes();
        return result;
      }
    }

    private static class CreateScene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateScene_args> {
      public CreateScene() {
        super("CreateScene");
      }

      protected CreateScene_args getEmptyArgsInstance() {
        return new CreateScene_args();
      }

      protected CreateScene_result getResult(I iface, CreateScene_args args) throws org.apache.thrift.TException {
        CreateScene_result result = new CreateScene_result();
        result.success = iface.CreateScene();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveScene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveScene_args> {
      public RemoveScene() {
        super("RemoveScene");
      }

      protected RemoveScene_args getEmptyArgsInstance() {
        return new RemoveScene_args();
      }

      protected RemoveScene_result getResult(I iface, RemoveScene_args args) throws org.apache.thrift.TException {
        RemoveScene_result result = new RemoveScene_result();
        result.success = iface.RemoveScene(args._sceneId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValue_Bool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValue_Bool_args> {
      public AddSceneValue_Bool() {
        super("AddSceneValue_Bool");
      }

      protected AddSceneValue_Bool_args getEmptyArgsInstance() {
        return new AddSceneValue_Bool_args();
      }

      protected AddSceneValue_Bool_result getResult(I iface, AddSceneValue_Bool_args args) throws org.apache.thrift.TException {
        AddSceneValue_Bool_result result = new AddSceneValue_Bool_result();
        result.success = iface.AddSceneValue_Bool(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValue_Uint8<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValue_Uint8_args> {
      public AddSceneValue_Uint8() {
        super("AddSceneValue_Uint8");
      }

      protected AddSceneValue_Uint8_args getEmptyArgsInstance() {
        return new AddSceneValue_Uint8_args();
      }

      protected AddSceneValue_Uint8_result getResult(I iface, AddSceneValue_Uint8_args args) throws org.apache.thrift.TException {
        AddSceneValue_Uint8_result result = new AddSceneValue_Uint8_result();
        result.success = iface.AddSceneValue_Uint8(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValue_Float<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValue_Float_args> {
      public AddSceneValue_Float() {
        super("AddSceneValue_Float");
      }

      protected AddSceneValue_Float_args getEmptyArgsInstance() {
        return new AddSceneValue_Float_args();
      }

      protected AddSceneValue_Float_result getResult(I iface, AddSceneValue_Float_args args) throws org.apache.thrift.TException {
        AddSceneValue_Float_result result = new AddSceneValue_Float_result();
        result.success = iface.AddSceneValue_Float(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValue_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValue_Int32_args> {
      public AddSceneValue_Int32() {
        super("AddSceneValue_Int32");
      }

      protected AddSceneValue_Int32_args getEmptyArgsInstance() {
        return new AddSceneValue_Int32_args();
      }

      protected AddSceneValue_Int32_result getResult(I iface, AddSceneValue_Int32_args args) throws org.apache.thrift.TException {
        AddSceneValue_Int32_result result = new AddSceneValue_Int32_result();
        result.success = iface.AddSceneValue_Int32(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValue_Int16<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValue_Int16_args> {
      public AddSceneValue_Int16() {
        super("AddSceneValue_Int16");
      }

      protected AddSceneValue_Int16_args getEmptyArgsInstance() {
        return new AddSceneValue_Int16_args();
      }

      protected AddSceneValue_Int16_result getResult(I iface, AddSceneValue_Int16_args args) throws org.apache.thrift.TException {
        AddSceneValue_Int16_result result = new AddSceneValue_Int16_result();
        result.success = iface.AddSceneValue_Int16(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValue_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValue_String_args> {
      public AddSceneValue_String() {
        super("AddSceneValue_String");
      }

      protected AddSceneValue_String_args getEmptyArgsInstance() {
        return new AddSceneValue_String_args();
      }

      protected AddSceneValue_String_result getResult(I iface, AddSceneValue_String_args args) throws org.apache.thrift.TException {
        AddSceneValue_String_result result = new AddSceneValue_String_result();
        result.success = iface.AddSceneValue_String(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValueListSelection_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValueListSelection_String_args> {
      public AddSceneValueListSelection_String() {
        super("AddSceneValueListSelection_String");
      }

      protected AddSceneValueListSelection_String_args getEmptyArgsInstance() {
        return new AddSceneValueListSelection_String_args();
      }

      protected AddSceneValueListSelection_String_result getResult(I iface, AddSceneValueListSelection_String_args args) throws org.apache.thrift.TException {
        AddSceneValueListSelection_String_result result = new AddSceneValueListSelection_String_result();
        result.success = iface.AddSceneValueListSelection_String(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class AddSceneValueListSelection_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddSceneValueListSelection_Int32_args> {
      public AddSceneValueListSelection_Int32() {
        super("AddSceneValueListSelection_Int32");
      }

      protected AddSceneValueListSelection_Int32_args getEmptyArgsInstance() {
        return new AddSceneValueListSelection_Int32_args();
      }

      protected AddSceneValueListSelection_Int32_result getResult(I iface, AddSceneValueListSelection_Int32_args args) throws org.apache.thrift.TException {
        AddSceneValueListSelection_Int32_result result = new AddSceneValueListSelection_Int32_result();
        result.success = iface.AddSceneValueListSelection_Int32(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class RemoveSceneValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveSceneValue_args> {
      public RemoveSceneValue() {
        super("RemoveSceneValue");
      }

      protected RemoveSceneValue_args getEmptyArgsInstance() {
        return new RemoveSceneValue_args();
      }

      protected RemoveSceneValue_result getResult(I iface, RemoveSceneValue_args args) throws org.apache.thrift.TException {
        RemoveSceneValue_result result = new RemoveSceneValue_result();
        result.success = iface.RemoveSceneValue(args._sceneId, args._valueId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SceneGetValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValues_args> {
      public SceneGetValues() {
        super("SceneGetValues");
      }

      protected SceneGetValues_args getEmptyArgsInstance() {
        return new SceneGetValues_args();
      }

      protected SceneGetValues_result getResult(I iface, SceneGetValues_args args) throws org.apache.thrift.TException {
        SceneGetValues_result result = new SceneGetValues_result();
        result.success = iface.SceneGetValues(args._sceneId);
        return result;
      }
    }

    private static class SceneGetValueAsBool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueAsBool_args> {
      public SceneGetValueAsBool() {
        super("SceneGetValueAsBool");
      }

      protected SceneGetValueAsBool_args getEmptyArgsInstance() {
        return new SceneGetValueAsBool_args();
      }

      protected SceneGetValueAsBool_result getResult(I iface, SceneGetValueAsBool_args args) throws org.apache.thrift.TException {
        SceneGetValueAsBool_result result = new SceneGetValueAsBool_result();
        result.success = iface.SceneGetValueAsBool(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueAsByte<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueAsByte_args> {
      public SceneGetValueAsByte() {
        super("SceneGetValueAsByte");
      }

      protected SceneGetValueAsByte_args getEmptyArgsInstance() {
        return new SceneGetValueAsByte_args();
      }

      protected SceneGetValueAsByte_result getResult(I iface, SceneGetValueAsByte_args args) throws org.apache.thrift.TException {
        SceneGetValueAsByte_result result = new SceneGetValueAsByte_result();
        result.success = iface.SceneGetValueAsByte(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueAsFloat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueAsFloat_args> {
      public SceneGetValueAsFloat() {
        super("SceneGetValueAsFloat");
      }

      protected SceneGetValueAsFloat_args getEmptyArgsInstance() {
        return new SceneGetValueAsFloat_args();
      }

      protected SceneGetValueAsFloat_result getResult(I iface, SceneGetValueAsFloat_args args) throws org.apache.thrift.TException {
        SceneGetValueAsFloat_result result = new SceneGetValueAsFloat_result();
        result.success = iface.SceneGetValueAsFloat(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueAsInt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueAsInt_args> {
      public SceneGetValueAsInt() {
        super("SceneGetValueAsInt");
      }

      protected SceneGetValueAsInt_args getEmptyArgsInstance() {
        return new SceneGetValueAsInt_args();
      }

      protected SceneGetValueAsInt_result getResult(I iface, SceneGetValueAsInt_args args) throws org.apache.thrift.TException {
        SceneGetValueAsInt_result result = new SceneGetValueAsInt_result();
        result.success = iface.SceneGetValueAsInt(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueAsShort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueAsShort_args> {
      public SceneGetValueAsShort() {
        super("SceneGetValueAsShort");
      }

      protected SceneGetValueAsShort_args getEmptyArgsInstance() {
        return new SceneGetValueAsShort_args();
      }

      protected SceneGetValueAsShort_result getResult(I iface, SceneGetValueAsShort_args args) throws org.apache.thrift.TException {
        SceneGetValueAsShort_result result = new SceneGetValueAsShort_result();
        result.success = iface.SceneGetValueAsShort(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueAsString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueAsString_args> {
      public SceneGetValueAsString() {
        super("SceneGetValueAsString");
      }

      protected SceneGetValueAsString_args getEmptyArgsInstance() {
        return new SceneGetValueAsString_args();
      }

      protected SceneGetValueAsString_result getResult(I iface, SceneGetValueAsString_args args) throws org.apache.thrift.TException {
        SceneGetValueAsString_result result = new SceneGetValueAsString_result();
        result.success = iface.SceneGetValueAsString(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueListSelection_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueListSelection_String_args> {
      public SceneGetValueListSelection_String() {
        super("SceneGetValueListSelection_String");
      }

      protected SceneGetValueListSelection_String_args getEmptyArgsInstance() {
        return new SceneGetValueListSelection_String_args();
      }

      protected SceneGetValueListSelection_String_result getResult(I iface, SceneGetValueListSelection_String_args args) throws org.apache.thrift.TException {
        SceneGetValueListSelection_String_result result = new SceneGetValueListSelection_String_result();
        result.success = iface.SceneGetValueListSelection_String(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SceneGetValueListSelection_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneGetValueListSelection_Int32_args> {
      public SceneGetValueListSelection_Int32() {
        super("SceneGetValueListSelection_Int32");
      }

      protected SceneGetValueListSelection_Int32_args getEmptyArgsInstance() {
        return new SceneGetValueListSelection_Int32_args();
      }

      protected SceneGetValueListSelection_Int32_result getResult(I iface, SceneGetValueListSelection_Int32_args args) throws org.apache.thrift.TException {
        SceneGetValueListSelection_Int32_result result = new SceneGetValueListSelection_Int32_result();
        result.success = iface.SceneGetValueListSelection_Int32(args._sceneId, args._valueId);
        return result;
      }
    }

    private static class SetSceneValue_Bool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValue_Bool_args> {
      public SetSceneValue_Bool() {
        super("SetSceneValue_Bool");
      }

      protected SetSceneValue_Bool_args getEmptyArgsInstance() {
        return new SetSceneValue_Bool_args();
      }

      protected SetSceneValue_Bool_result getResult(I iface, SetSceneValue_Bool_args args) throws org.apache.thrift.TException {
        SetSceneValue_Bool_result result = new SetSceneValue_Bool_result();
        result.success = iface.SetSceneValue_Bool(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValue_Uint8<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValue_Uint8_args> {
      public SetSceneValue_Uint8() {
        super("SetSceneValue_Uint8");
      }

      protected SetSceneValue_Uint8_args getEmptyArgsInstance() {
        return new SetSceneValue_Uint8_args();
      }

      protected SetSceneValue_Uint8_result getResult(I iface, SetSceneValue_Uint8_args args) throws org.apache.thrift.TException {
        SetSceneValue_Uint8_result result = new SetSceneValue_Uint8_result();
        result.success = iface.SetSceneValue_Uint8(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValue_Float<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValue_Float_args> {
      public SetSceneValue_Float() {
        super("SetSceneValue_Float");
      }

      protected SetSceneValue_Float_args getEmptyArgsInstance() {
        return new SetSceneValue_Float_args();
      }

      protected SetSceneValue_Float_result getResult(I iface, SetSceneValue_Float_args args) throws org.apache.thrift.TException {
        SetSceneValue_Float_result result = new SetSceneValue_Float_result();
        result.success = iface.SetSceneValue_Float(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValue_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValue_Int32_args> {
      public SetSceneValue_Int32() {
        super("SetSceneValue_Int32");
      }

      protected SetSceneValue_Int32_args getEmptyArgsInstance() {
        return new SetSceneValue_Int32_args();
      }

      protected SetSceneValue_Int32_result getResult(I iface, SetSceneValue_Int32_args args) throws org.apache.thrift.TException {
        SetSceneValue_Int32_result result = new SetSceneValue_Int32_result();
        result.success = iface.SetSceneValue_Int32(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValue_Int16<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValue_Int16_args> {
      public SetSceneValue_Int16() {
        super("SetSceneValue_Int16");
      }

      protected SetSceneValue_Int16_args getEmptyArgsInstance() {
        return new SetSceneValue_Int16_args();
      }

      protected SetSceneValue_Int16_result getResult(I iface, SetSceneValue_Int16_args args) throws org.apache.thrift.TException {
        SetSceneValue_Int16_result result = new SetSceneValue_Int16_result();
        result.success = iface.SetSceneValue_Int16(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValue_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValue_String_args> {
      public SetSceneValue_String() {
        super("SetSceneValue_String");
      }

      protected SetSceneValue_String_args getEmptyArgsInstance() {
        return new SetSceneValue_String_args();
      }

      protected SetSceneValue_String_result getResult(I iface, SetSceneValue_String_args args) throws org.apache.thrift.TException {
        SetSceneValue_String_result result = new SetSceneValue_String_result();
        result.success = iface.SetSceneValue_String(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValueListSelection_String<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValueListSelection_String_args> {
      public SetSceneValueListSelection_String() {
        super("SetSceneValueListSelection_String");
      }

      protected SetSceneValueListSelection_String_args getEmptyArgsInstance() {
        return new SetSceneValueListSelection_String_args();
      }

      protected SetSceneValueListSelection_String_result getResult(I iface, SetSceneValueListSelection_String_args args) throws org.apache.thrift.TException {
        SetSceneValueListSelection_String_result result = new SetSceneValueListSelection_String_result();
        result.success = iface.SetSceneValueListSelection_String(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class SetSceneValueListSelection_Int32<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneValueListSelection_Int32_args> {
      public SetSceneValueListSelection_Int32() {
        super("SetSceneValueListSelection_Int32");
      }

      protected SetSceneValueListSelection_Int32_args getEmptyArgsInstance() {
        return new SetSceneValueListSelection_Int32_args();
      }

      protected SetSceneValueListSelection_Int32_result getResult(I iface, SetSceneValueListSelection_Int32_args args) throws org.apache.thrift.TException {
        SetSceneValueListSelection_Int32_result result = new SetSceneValueListSelection_Int32_result();
        result.success = iface.SetSceneValueListSelection_Int32(args._sceneId, args._valueId, args._value);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetSceneLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSceneLabel_args> {
      public GetSceneLabel() {
        super("GetSceneLabel");
      }

      protected GetSceneLabel_args getEmptyArgsInstance() {
        return new GetSceneLabel_args();
      }

      protected GetSceneLabel_result getResult(I iface, GetSceneLabel_args args) throws org.apache.thrift.TException {
        GetSceneLabel_result result = new GetSceneLabel_result();
        result.success = iface.GetSceneLabel(args._sceneId);
        return result;
      }
    }

    private static class SetSceneLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetSceneLabel_args> {
      public SetSceneLabel() {
        super("SetSceneLabel");
      }

      protected SetSceneLabel_args getEmptyArgsInstance() {
        return new SetSceneLabel_args();
      }

      protected SetSceneLabel_result getResult(I iface, SetSceneLabel_args args) throws org.apache.thrift.TException {
        SetSceneLabel_result result = new SetSceneLabel_result();
        iface.SetSceneLabel(args._sceneId, args._value);
        return result;
      }
    }

    private static class SceneExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SceneExists_args> {
      public SceneExists() {
        super("SceneExists");
      }

      protected SceneExists_args getEmptyArgsInstance() {
        return new SceneExists_args();
      }

      protected SceneExists_result getResult(I iface, SceneExists_args args) throws org.apache.thrift.TException {
        SceneExists_result result = new SceneExists_result();
        result.success = iface.SceneExists(args._sceneId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class ActivateScene<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ActivateScene_args> {
      public ActivateScene() {
        super("ActivateScene");
      }

      protected ActivateScene_args getEmptyArgsInstance() {
        return new ActivateScene_args();
      }

      protected ActivateScene_result getResult(I iface, ActivateScene_args args) throws org.apache.thrift.TException {
        ActivateScene_result result = new ActivateScene_result();
        result.success = iface.ActivateScene(args._sceneId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class GetDriverStatistics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetDriverStatistics_args> {
      public GetDriverStatistics() {
        super("GetDriverStatistics");
      }

      protected GetDriverStatistics_args getEmptyArgsInstance() {
        return new GetDriverStatistics_args();
      }

      protected GetDriverStatistics_result getResult(I iface, GetDriverStatistics_args args) throws org.apache.thrift.TException {
        GetDriverStatistics_result result = new GetDriverStatistics_result();
        result.success = iface.GetDriverStatistics(args._homeId);
        return result;
      }
    }

    private static class SendAllValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendAllValues_args> {
      public SendAllValues() {
        super("SendAllValues");
      }

      protected SendAllValues_args getEmptyArgsInstance() {
        return new SendAllValues_args();
      }

      protected SendAllValues_result getResult(I iface, SendAllValues_args args) throws org.apache.thrift.TException {
        SendAllValues_result result = new SendAllValues_result();
        iface.SendAllValues();
        return result;
      }
    }

  }

  public static class WriteConfig_args implements org.apache.thrift.TBase<WriteConfig_args, WriteConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteConfig_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteConfig_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteConfig_args.class, metaDataMap);
    }

    public WriteConfig_args() {
    }

    public WriteConfig_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteConfig_args(WriteConfig_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public WriteConfig_args deepCopy() {
      return new WriteConfig_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public WriteConfig_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteConfig_args)
        return this.equals((WriteConfig_args)that);
      return false;
    }

    public boolean equals(WriteConfig_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteConfig_args typedOther = (WriteConfig_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteConfig_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteConfig_argsStandardSchemeFactory implements SchemeFactory {
      public WriteConfig_argsStandardScheme getScheme() {
        return new WriteConfig_argsStandardScheme();
      }
    }

    private static class WriteConfig_argsStandardScheme extends StandardScheme<WriteConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteConfig_argsTupleSchemeFactory implements SchemeFactory {
      public WriteConfig_argsTupleScheme getScheme() {
        return new WriteConfig_argsTupleScheme();
      }
    }

    private static class WriteConfig_argsTupleScheme extends TupleScheme<WriteConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class WriteConfig_result implements org.apache.thrift.TBase<WriteConfig_result, WriteConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteConfig_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteConfig_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteConfig_result.class, metaDataMap);
    }

    public WriteConfig_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteConfig_result(WriteConfig_result other) {
    }

    public WriteConfig_result deepCopy() {
      return new WriteConfig_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteConfig_result)
        return this.equals((WriteConfig_result)that);
      return false;
    }

    public boolean equals(WriteConfig_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteConfig_result typedOther = (WriteConfig_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteConfig_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteConfig_resultStandardSchemeFactory implements SchemeFactory {
      public WriteConfig_resultStandardScheme getScheme() {
        return new WriteConfig_resultStandardScheme();
      }
    }

    private static class WriteConfig_resultStandardScheme extends StandardScheme<WriteConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteConfig_resultTupleSchemeFactory implements SchemeFactory {
      public WriteConfig_resultTupleScheme getScheme() {
        return new WriteConfig_resultTupleScheme();
      }
    }

    private static class WriteConfig_resultTupleScheme extends TupleScheme<WriteConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetControllerNodeId_args implements org.apache.thrift.TBase<GetControllerNodeId_args, GetControllerNodeId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetControllerNodeId_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetControllerNodeId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetControllerNodeId_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetControllerNodeId_args.class, metaDataMap);
    }

    public GetControllerNodeId_args() {
    }

    public GetControllerNodeId_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetControllerNodeId_args(GetControllerNodeId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public GetControllerNodeId_args deepCopy() {
      return new GetControllerNodeId_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetControllerNodeId_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetControllerNodeId_args)
        return this.equals((GetControllerNodeId_args)that);
      return false;
    }

    public boolean equals(GetControllerNodeId_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetControllerNodeId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetControllerNodeId_args typedOther = (GetControllerNodeId_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetControllerNodeId_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetControllerNodeId_argsStandardSchemeFactory implements SchemeFactory {
      public GetControllerNodeId_argsStandardScheme getScheme() {
        return new GetControllerNodeId_argsStandardScheme();
      }
    }

    private static class GetControllerNodeId_argsStandardScheme extends StandardScheme<GetControllerNodeId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetControllerNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetControllerNodeId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetControllerNodeId_argsTupleSchemeFactory implements SchemeFactory {
      public GetControllerNodeId_argsTupleScheme getScheme() {
        return new GetControllerNodeId_argsTupleScheme();
      }
    }

    private static class GetControllerNodeId_argsTupleScheme extends TupleScheme<GetControllerNodeId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetControllerNodeId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetControllerNodeId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class GetControllerNodeId_result implements org.apache.thrift.TBase<GetControllerNodeId_result, GetControllerNodeId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetControllerNodeId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetControllerNodeId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetControllerNodeId_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetControllerNodeId_result.class, metaDataMap);
    }

    public GetControllerNodeId_result() {
    }

    public GetControllerNodeId_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetControllerNodeId_result(GetControllerNodeId_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetControllerNodeId_result deepCopy() {
      return new GetControllerNodeId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetControllerNodeId_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetControllerNodeId_result)
        return this.equals((GetControllerNodeId_result)that);
      return false;
    }

    public boolean equals(GetControllerNodeId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetControllerNodeId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetControllerNodeId_result typedOther = (GetControllerNodeId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetControllerNodeId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetControllerNodeId_resultStandardSchemeFactory implements SchemeFactory {
      public GetControllerNodeId_resultStandardScheme getScheme() {
        return new GetControllerNodeId_resultStandardScheme();
      }
    }

    private static class GetControllerNodeId_resultStandardScheme extends StandardScheme<GetControllerNodeId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetControllerNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetControllerNodeId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetControllerNodeId_resultTupleSchemeFactory implements SchemeFactory {
      public GetControllerNodeId_resultTupleScheme getScheme() {
        return new GetControllerNodeId_resultTupleScheme();
      }
    }

    private static class GetControllerNodeId_resultTupleScheme extends TupleScheme<GetControllerNodeId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetControllerNodeId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetControllerNodeId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsPrimaryController_args implements org.apache.thrift.TBase<IsPrimaryController_args, IsPrimaryController_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsPrimaryController_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsPrimaryController_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsPrimaryController_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsPrimaryController_args.class, metaDataMap);
    }

    public IsPrimaryController_args() {
    }

    public IsPrimaryController_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsPrimaryController_args(IsPrimaryController_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public IsPrimaryController_args deepCopy() {
      return new IsPrimaryController_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsPrimaryController_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsPrimaryController_args)
        return this.equals((IsPrimaryController_args)that);
      return false;
    }

    public boolean equals(IsPrimaryController_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsPrimaryController_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsPrimaryController_args typedOther = (IsPrimaryController_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsPrimaryController_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsPrimaryController_argsStandardSchemeFactory implements SchemeFactory {
      public IsPrimaryController_argsStandardScheme getScheme() {
        return new IsPrimaryController_argsStandardScheme();
      }
    }

    private static class IsPrimaryController_argsStandardScheme extends StandardScheme<IsPrimaryController_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsPrimaryController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsPrimaryController_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsPrimaryController_argsTupleSchemeFactory implements SchemeFactory {
      public IsPrimaryController_argsTupleScheme getScheme() {
        return new IsPrimaryController_argsTupleScheme();
      }
    }

    private static class IsPrimaryController_argsTupleScheme extends TupleScheme<IsPrimaryController_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsPrimaryController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsPrimaryController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class IsPrimaryController_result implements org.apache.thrift.TBase<IsPrimaryController_result, IsPrimaryController_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsPrimaryController_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsPrimaryController_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsPrimaryController_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsPrimaryController_result.class, metaDataMap);
    }

    public IsPrimaryController_result() {
    }

    public IsPrimaryController_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsPrimaryController_result(IsPrimaryController_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsPrimaryController_result deepCopy() {
      return new IsPrimaryController_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsPrimaryController_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsPrimaryController_result)
        return this.equals((IsPrimaryController_result)that);
      return false;
    }

    public boolean equals(IsPrimaryController_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsPrimaryController_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsPrimaryController_result typedOther = (IsPrimaryController_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsPrimaryController_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsPrimaryController_resultStandardSchemeFactory implements SchemeFactory {
      public IsPrimaryController_resultStandardScheme getScheme() {
        return new IsPrimaryController_resultStandardScheme();
      }
    }

    private static class IsPrimaryController_resultStandardScheme extends StandardScheme<IsPrimaryController_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsPrimaryController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsPrimaryController_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsPrimaryController_resultTupleSchemeFactory implements SchemeFactory {
      public IsPrimaryController_resultTupleScheme getScheme() {
        return new IsPrimaryController_resultTupleScheme();
      }
    }

    private static class IsPrimaryController_resultTupleScheme extends TupleScheme<IsPrimaryController_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsPrimaryController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsPrimaryController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsStaticUpdateController_args implements org.apache.thrift.TBase<IsStaticUpdateController_args, IsStaticUpdateController_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsStaticUpdateController_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsStaticUpdateController_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsStaticUpdateController_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsStaticUpdateController_args.class, metaDataMap);
    }

    public IsStaticUpdateController_args() {
    }

    public IsStaticUpdateController_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsStaticUpdateController_args(IsStaticUpdateController_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public IsStaticUpdateController_args deepCopy() {
      return new IsStaticUpdateController_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsStaticUpdateController_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsStaticUpdateController_args)
        return this.equals((IsStaticUpdateController_args)that);
      return false;
    }

    public boolean equals(IsStaticUpdateController_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsStaticUpdateController_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsStaticUpdateController_args typedOther = (IsStaticUpdateController_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsStaticUpdateController_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsStaticUpdateController_argsStandardSchemeFactory implements SchemeFactory {
      public IsStaticUpdateController_argsStandardScheme getScheme() {
        return new IsStaticUpdateController_argsStandardScheme();
      }
    }

    private static class IsStaticUpdateController_argsStandardScheme extends StandardScheme<IsStaticUpdateController_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsStaticUpdateController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsStaticUpdateController_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsStaticUpdateController_argsTupleSchemeFactory implements SchemeFactory {
      public IsStaticUpdateController_argsTupleScheme getScheme() {
        return new IsStaticUpdateController_argsTupleScheme();
      }
    }

    private static class IsStaticUpdateController_argsTupleScheme extends TupleScheme<IsStaticUpdateController_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsStaticUpdateController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsStaticUpdateController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class IsStaticUpdateController_result implements org.apache.thrift.TBase<IsStaticUpdateController_result, IsStaticUpdateController_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsStaticUpdateController_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsStaticUpdateController_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsStaticUpdateController_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsStaticUpdateController_result.class, metaDataMap);
    }

    public IsStaticUpdateController_result() {
    }

    public IsStaticUpdateController_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsStaticUpdateController_result(IsStaticUpdateController_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsStaticUpdateController_result deepCopy() {
      return new IsStaticUpdateController_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsStaticUpdateController_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsStaticUpdateController_result)
        return this.equals((IsStaticUpdateController_result)that);
      return false;
    }

    public boolean equals(IsStaticUpdateController_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsStaticUpdateController_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsStaticUpdateController_result typedOther = (IsStaticUpdateController_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsStaticUpdateController_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsStaticUpdateController_resultStandardSchemeFactory implements SchemeFactory {
      public IsStaticUpdateController_resultStandardScheme getScheme() {
        return new IsStaticUpdateController_resultStandardScheme();
      }
    }

    private static class IsStaticUpdateController_resultStandardScheme extends StandardScheme<IsStaticUpdateController_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsStaticUpdateController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsStaticUpdateController_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsStaticUpdateController_resultTupleSchemeFactory implements SchemeFactory {
      public IsStaticUpdateController_resultTupleScheme getScheme() {
        return new IsStaticUpdateController_resultTupleScheme();
      }
    }

    private static class IsStaticUpdateController_resultTupleScheme extends TupleScheme<IsStaticUpdateController_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsStaticUpdateController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsStaticUpdateController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsBridgeController_args implements org.apache.thrift.TBase<IsBridgeController_args, IsBridgeController_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsBridgeController_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsBridgeController_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsBridgeController_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsBridgeController_args.class, metaDataMap);
    }

    public IsBridgeController_args() {
    }

    public IsBridgeController_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsBridgeController_args(IsBridgeController_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public IsBridgeController_args deepCopy() {
      return new IsBridgeController_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsBridgeController_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsBridgeController_args)
        return this.equals((IsBridgeController_args)that);
      return false;
    }

    public boolean equals(IsBridgeController_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsBridgeController_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsBridgeController_args typedOther = (IsBridgeController_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsBridgeController_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsBridgeController_argsStandardSchemeFactory implements SchemeFactory {
      public IsBridgeController_argsStandardScheme getScheme() {
        return new IsBridgeController_argsStandardScheme();
      }
    }

    private static class IsBridgeController_argsStandardScheme extends StandardScheme<IsBridgeController_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsBridgeController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsBridgeController_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsBridgeController_argsTupleSchemeFactory implements SchemeFactory {
      public IsBridgeController_argsTupleScheme getScheme() {
        return new IsBridgeController_argsTupleScheme();
      }
    }

    private static class IsBridgeController_argsTupleScheme extends TupleScheme<IsBridgeController_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsBridgeController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsBridgeController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class IsBridgeController_result implements org.apache.thrift.TBase<IsBridgeController_result, IsBridgeController_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsBridgeController_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsBridgeController_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsBridgeController_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsBridgeController_result.class, metaDataMap);
    }

    public IsBridgeController_result() {
    }

    public IsBridgeController_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsBridgeController_result(IsBridgeController_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsBridgeController_result deepCopy() {
      return new IsBridgeController_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsBridgeController_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsBridgeController_result)
        return this.equals((IsBridgeController_result)that);
      return false;
    }

    public boolean equals(IsBridgeController_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsBridgeController_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsBridgeController_result typedOther = (IsBridgeController_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsBridgeController_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsBridgeController_resultStandardSchemeFactory implements SchemeFactory {
      public IsBridgeController_resultStandardScheme getScheme() {
        return new IsBridgeController_resultStandardScheme();
      }
    }

    private static class IsBridgeController_resultStandardScheme extends StandardScheme<IsBridgeController_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsBridgeController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsBridgeController_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsBridgeController_resultTupleSchemeFactory implements SchemeFactory {
      public IsBridgeController_resultTupleScheme getScheme() {
        return new IsBridgeController_resultTupleScheme();
      }
    }

    private static class IsBridgeController_resultTupleScheme extends TupleScheme<IsBridgeController_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsBridgeController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsBridgeController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetLibraryVersion_args implements org.apache.thrift.TBase<GetLibraryVersion_args, GetLibraryVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLibraryVersion_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLibraryVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLibraryVersion_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLibraryVersion_args.class, metaDataMap);
    }

    public GetLibraryVersion_args() {
    }

    public GetLibraryVersion_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLibraryVersion_args(GetLibraryVersion_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public GetLibraryVersion_args deepCopy() {
      return new GetLibraryVersion_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetLibraryVersion_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLibraryVersion_args)
        return this.equals((GetLibraryVersion_args)that);
      return false;
    }

    public boolean equals(GetLibraryVersion_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetLibraryVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetLibraryVersion_args typedOther = (GetLibraryVersion_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLibraryVersion_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLibraryVersion_argsStandardSchemeFactory implements SchemeFactory {
      public GetLibraryVersion_argsStandardScheme getScheme() {
        return new GetLibraryVersion_argsStandardScheme();
      }
    }

    private static class GetLibraryVersion_argsStandardScheme extends StandardScheme<GetLibraryVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLibraryVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLibraryVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLibraryVersion_argsTupleSchemeFactory implements SchemeFactory {
      public GetLibraryVersion_argsTupleScheme getScheme() {
        return new GetLibraryVersion_argsTupleScheme();
      }
    }

    private static class GetLibraryVersion_argsTupleScheme extends TupleScheme<GetLibraryVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLibraryVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLibraryVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class GetLibraryVersion_result implements org.apache.thrift.TBase<GetLibraryVersion_result, GetLibraryVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLibraryVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLibraryVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLibraryVersion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLibraryVersion_result.class, metaDataMap);
    }

    public GetLibraryVersion_result() {
    }

    public GetLibraryVersion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLibraryVersion_result(GetLibraryVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetLibraryVersion_result deepCopy() {
      return new GetLibraryVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetLibraryVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLibraryVersion_result)
        return this.equals((GetLibraryVersion_result)that);
      return false;
    }

    public boolean equals(GetLibraryVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetLibraryVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetLibraryVersion_result typedOther = (GetLibraryVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLibraryVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLibraryVersion_resultStandardSchemeFactory implements SchemeFactory {
      public GetLibraryVersion_resultStandardScheme getScheme() {
        return new GetLibraryVersion_resultStandardScheme();
      }
    }

    private static class GetLibraryVersion_resultStandardScheme extends StandardScheme<GetLibraryVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLibraryVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLibraryVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLibraryVersion_resultTupleSchemeFactory implements SchemeFactory {
      public GetLibraryVersion_resultTupleScheme getScheme() {
        return new GetLibraryVersion_resultTupleScheme();
      }
    }

    private static class GetLibraryVersion_resultTupleScheme extends TupleScheme<GetLibraryVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLibraryVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLibraryVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetLibraryTypeName_args implements org.apache.thrift.TBase<GetLibraryTypeName_args, GetLibraryTypeName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLibraryTypeName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLibraryTypeName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLibraryTypeName_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLibraryTypeName_args.class, metaDataMap);
    }

    public GetLibraryTypeName_args() {
    }

    public GetLibraryTypeName_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLibraryTypeName_args(GetLibraryTypeName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public GetLibraryTypeName_args deepCopy() {
      return new GetLibraryTypeName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetLibraryTypeName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLibraryTypeName_args)
        return this.equals((GetLibraryTypeName_args)that);
      return false;
    }

    public boolean equals(GetLibraryTypeName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetLibraryTypeName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetLibraryTypeName_args typedOther = (GetLibraryTypeName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLibraryTypeName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLibraryTypeName_argsStandardSchemeFactory implements SchemeFactory {
      public GetLibraryTypeName_argsStandardScheme getScheme() {
        return new GetLibraryTypeName_argsStandardScheme();
      }
    }

    private static class GetLibraryTypeName_argsStandardScheme extends StandardScheme<GetLibraryTypeName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLibraryTypeName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLibraryTypeName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLibraryTypeName_argsTupleSchemeFactory implements SchemeFactory {
      public GetLibraryTypeName_argsTupleScheme getScheme() {
        return new GetLibraryTypeName_argsTupleScheme();
      }
    }

    private static class GetLibraryTypeName_argsTupleScheme extends TupleScheme<GetLibraryTypeName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLibraryTypeName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLibraryTypeName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class GetLibraryTypeName_result implements org.apache.thrift.TBase<GetLibraryTypeName_result, GetLibraryTypeName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLibraryTypeName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLibraryTypeName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLibraryTypeName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLibraryTypeName_result.class, metaDataMap);
    }

    public GetLibraryTypeName_result() {
    }

    public GetLibraryTypeName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLibraryTypeName_result(GetLibraryTypeName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetLibraryTypeName_result deepCopy() {
      return new GetLibraryTypeName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetLibraryTypeName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLibraryTypeName_result)
        return this.equals((GetLibraryTypeName_result)that);
      return false;
    }

    public boolean equals(GetLibraryTypeName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetLibraryTypeName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetLibraryTypeName_result typedOther = (GetLibraryTypeName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLibraryTypeName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLibraryTypeName_resultStandardSchemeFactory implements SchemeFactory {
      public GetLibraryTypeName_resultStandardScheme getScheme() {
        return new GetLibraryTypeName_resultStandardScheme();
      }
    }

    private static class GetLibraryTypeName_resultStandardScheme extends StandardScheme<GetLibraryTypeName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLibraryTypeName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLibraryTypeName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLibraryTypeName_resultTupleSchemeFactory implements SchemeFactory {
      public GetLibraryTypeName_resultTupleScheme getScheme() {
        return new GetLibraryTypeName_resultTupleScheme();
      }
    }

    private static class GetLibraryTypeName_resultTupleScheme extends TupleScheme<GetLibraryTypeName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLibraryTypeName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLibraryTypeName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetSendQueueCount_args implements org.apache.thrift.TBase<GetSendQueueCount_args, GetSendQueueCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSendQueueCount_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSendQueueCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSendQueueCount_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSendQueueCount_args.class, metaDataMap);
    }

    public GetSendQueueCount_args() {
    }

    public GetSendQueueCount_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSendQueueCount_args(GetSendQueueCount_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public GetSendQueueCount_args deepCopy() {
      return new GetSendQueueCount_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetSendQueueCount_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSendQueueCount_args)
        return this.equals((GetSendQueueCount_args)that);
      return false;
    }

    public boolean equals(GetSendQueueCount_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetSendQueueCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetSendQueueCount_args typedOther = (GetSendQueueCount_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSendQueueCount_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSendQueueCount_argsStandardSchemeFactory implements SchemeFactory {
      public GetSendQueueCount_argsStandardScheme getScheme() {
        return new GetSendQueueCount_argsStandardScheme();
      }
    }

    private static class GetSendQueueCount_argsStandardScheme extends StandardScheme<GetSendQueueCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSendQueueCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSendQueueCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSendQueueCount_argsTupleSchemeFactory implements SchemeFactory {
      public GetSendQueueCount_argsTupleScheme getScheme() {
        return new GetSendQueueCount_argsTupleScheme();
      }
    }

    private static class GetSendQueueCount_argsTupleScheme extends TupleScheme<GetSendQueueCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSendQueueCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSendQueueCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class GetSendQueueCount_result implements org.apache.thrift.TBase<GetSendQueueCount_result, GetSendQueueCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSendQueueCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSendQueueCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSendQueueCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSendQueueCount_result.class, metaDataMap);
    }

    public GetSendQueueCount_result() {
    }

    public GetSendQueueCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSendQueueCount_result(GetSendQueueCount_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetSendQueueCount_result deepCopy() {
      return new GetSendQueueCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public GetSendQueueCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSendQueueCount_result)
        return this.equals((GetSendQueueCount_result)that);
      return false;
    }

    public boolean equals(GetSendQueueCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetSendQueueCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetSendQueueCount_result typedOther = (GetSendQueueCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSendQueueCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSendQueueCount_resultStandardSchemeFactory implements SchemeFactory {
      public GetSendQueueCount_resultStandardScheme getScheme() {
        return new GetSendQueueCount_resultStandardScheme();
      }
    }

    private static class GetSendQueueCount_resultStandardScheme extends StandardScheme<GetSendQueueCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSendQueueCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSendQueueCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSendQueueCount_resultTupleSchemeFactory implements SchemeFactory {
      public GetSendQueueCount_resultTupleScheme getScheme() {
        return new GetSendQueueCount_resultTupleScheme();
      }
    }

    private static class GetSendQueueCount_resultTupleScheme extends TupleScheme<GetSendQueueCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSendQueueCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSendQueueCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class LogDriverStatistics_args implements org.apache.thrift.TBase<LogDriverStatistics_args, LogDriverStatistics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogDriverStatistics_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new LogDriverStatistics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new LogDriverStatistics_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogDriverStatistics_args.class, metaDataMap);
    }

    public LogDriverStatistics_args() {
    }

    public LogDriverStatistics_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LogDriverStatistics_args(LogDriverStatistics_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public LogDriverStatistics_args deepCopy() {
      return new LogDriverStatistics_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public LogDriverStatistics_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof LogDriverStatistics_args)
        return this.equals((LogDriverStatistics_args)that);
      return false;
    }

    public boolean equals(LogDriverStatistics_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(LogDriverStatistics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      LogDriverStatistics_args typedOther = (LogDriverStatistics_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("LogDriverStatistics_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LogDriverStatistics_argsStandardSchemeFactory implements SchemeFactory {
      public LogDriverStatistics_argsStandardScheme getScheme() {
        return new LogDriverStatistics_argsStandardScheme();
      }
    }

    private static class LogDriverStatistics_argsStandardScheme extends StandardScheme<LogDriverStatistics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, LogDriverStatistics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, LogDriverStatistics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LogDriverStatistics_argsTupleSchemeFactory implements SchemeFactory {
      public LogDriverStatistics_argsTupleScheme getScheme() {
        return new LogDriverStatistics_argsTupleScheme();
      }
    }

    private static class LogDriverStatistics_argsTupleScheme extends TupleScheme<LogDriverStatistics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LogDriverStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LogDriverStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class LogDriverStatistics_result implements org.apache.thrift.TBase<LogDriverStatistics_result, LogDriverStatistics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogDriverStatistics_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new LogDriverStatistics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new LogDriverStatistics_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogDriverStatistics_result.class, metaDataMap);
    }

    public LogDriverStatistics_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LogDriverStatistics_result(LogDriverStatistics_result other) {
    }

    public LogDriverStatistics_result deepCopy() {
      return new LogDriverStatistics_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof LogDriverStatistics_result)
        return this.equals((LogDriverStatistics_result)that);
      return false;
    }

    public boolean equals(LogDriverStatistics_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(LogDriverStatistics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      LogDriverStatistics_result typedOther = (LogDriverStatistics_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("LogDriverStatistics_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LogDriverStatistics_resultStandardSchemeFactory implements SchemeFactory {
      public LogDriverStatistics_resultStandardScheme getScheme() {
        return new LogDriverStatistics_resultStandardScheme();
      }
    }

    private static class LogDriverStatistics_resultStandardScheme extends StandardScheme<LogDriverStatistics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, LogDriverStatistics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, LogDriverStatistics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LogDriverStatistics_resultTupleSchemeFactory implements SchemeFactory {
      public LogDriverStatistics_resultTupleScheme getScheme() {
        return new LogDriverStatistics_resultTupleScheme();
      }
    }

    private static class LogDriverStatistics_resultTupleScheme extends TupleScheme<LogDriverStatistics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LogDriverStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LogDriverStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetPollInterval_args implements org.apache.thrift.TBase<GetPollInterval_args, GetPollInterval_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPollInterval_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPollInterval_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPollInterval_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPollInterval_args.class, metaDataMap);
    }

    public GetPollInterval_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPollInterval_args(GetPollInterval_args other) {
    }

    public GetPollInterval_args deepCopy() {
      return new GetPollInterval_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPollInterval_args)
        return this.equals((GetPollInterval_args)that);
      return false;
    }

    public boolean equals(GetPollInterval_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetPollInterval_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetPollInterval_args typedOther = (GetPollInterval_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPollInterval_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetPollInterval_argsStandardSchemeFactory implements SchemeFactory {
      public GetPollInterval_argsStandardScheme getScheme() {
        return new GetPollInterval_argsStandardScheme();
      }
    }

    private static class GetPollInterval_argsStandardScheme extends StandardScheme<GetPollInterval_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPollInterval_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPollInterval_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPollInterval_argsTupleSchemeFactory implements SchemeFactory {
      public GetPollInterval_argsTupleScheme getScheme() {
        return new GetPollInterval_argsTupleScheme();
      }
    }

    private static class GetPollInterval_argsTupleScheme extends TupleScheme<GetPollInterval_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPollInterval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPollInterval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetPollInterval_result implements org.apache.thrift.TBase<GetPollInterval_result, GetPollInterval_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPollInterval_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPollInterval_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPollInterval_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPollInterval_result.class, metaDataMap);
    }

    public GetPollInterval_result() {
    }

    public GetPollInterval_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPollInterval_result(GetPollInterval_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetPollInterval_result deepCopy() {
      return new GetPollInterval_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public GetPollInterval_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPollInterval_result)
        return this.equals((GetPollInterval_result)that);
      return false;
    }

    public boolean equals(GetPollInterval_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetPollInterval_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetPollInterval_result typedOther = (GetPollInterval_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPollInterval_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetPollInterval_resultStandardSchemeFactory implements SchemeFactory {
      public GetPollInterval_resultStandardScheme getScheme() {
        return new GetPollInterval_resultStandardScheme();
      }
    }

    private static class GetPollInterval_resultStandardScheme extends StandardScheme<GetPollInterval_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPollInterval_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPollInterval_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPollInterval_resultTupleSchemeFactory implements SchemeFactory {
      public GetPollInterval_resultTupleScheme getScheme() {
        return new GetPollInterval_resultTupleScheme();
      }
    }

    private static class GetPollInterval_resultTupleScheme extends TupleScheme<GetPollInterval_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPollInterval_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPollInterval_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetPollInterval_args implements org.apache.thrift.TBase<SetPollInterval_args, SetPollInterval_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetPollInterval_args");

    private static final org.apache.thrift.protocol.TField _MILLISECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("_milliseconds", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _B_INTERVAL_BETWEEN_POLLS_FIELD_DESC = new org.apache.thrift.protocol.TField("_bIntervalBetweenPolls", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetPollInterval_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetPollInterval_argsTupleSchemeFactory());
    }

    public int _milliseconds; // required
    public boolean _bIntervalBetweenPolls; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _MILLISECONDS((short)1, "_milliseconds"),
      _B_INTERVAL_BETWEEN_POLLS((short)2, "_bIntervalBetweenPolls");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _MILLISECONDS
            return _MILLISECONDS;
          case 2: // _B_INTERVAL_BETWEEN_POLLS
            return _B_INTERVAL_BETWEEN_POLLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___MILLISECONDS_ISSET_ID = 0;
    private static final int ___BINTERVALBETWEENPOLLS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._MILLISECONDS, new org.apache.thrift.meta_data.FieldMetaData("_milliseconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._B_INTERVAL_BETWEEN_POLLS, new org.apache.thrift.meta_data.FieldMetaData("_bIntervalBetweenPolls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetPollInterval_args.class, metaDataMap);
    }

    public SetPollInterval_args() {
    }

    public SetPollInterval_args(
      int _milliseconds,
      boolean _bIntervalBetweenPolls)
    {
      this();
      this._milliseconds = _milliseconds;
      set_millisecondsIsSet(true);
      this._bIntervalBetweenPolls = _bIntervalBetweenPolls;
      set_bIntervalBetweenPollsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetPollInterval_args(SetPollInterval_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._milliseconds = other._milliseconds;
      this._bIntervalBetweenPolls = other._bIntervalBetweenPolls;
    }

    public SetPollInterval_args deepCopy() {
      return new SetPollInterval_args(this);
    }

    @Override
    public void clear() {
      set_millisecondsIsSet(false);
      this._milliseconds = 0;
      set_bIntervalBetweenPollsIsSet(false);
      this._bIntervalBetweenPolls = false;
    }

    public int get_milliseconds() {
      return this._milliseconds;
    }

    public SetPollInterval_args set_milliseconds(int _milliseconds) {
      this._milliseconds = _milliseconds;
      set_millisecondsIsSet(true);
      return this;
    }

    public void unset_milliseconds() {
      __isset_bit_vector.clear(___MILLISECONDS_ISSET_ID);
    }

    /** Returns true if field _milliseconds is set (has been assigned a value) and false otherwise */
    public boolean isSet_milliseconds() {
      return __isset_bit_vector.get(___MILLISECONDS_ISSET_ID);
    }

    public void set_millisecondsIsSet(boolean value) {
      __isset_bit_vector.set(___MILLISECONDS_ISSET_ID, value);
    }

    public boolean is_bIntervalBetweenPolls() {
      return this._bIntervalBetweenPolls;
    }

    public SetPollInterval_args set_bIntervalBetweenPolls(boolean _bIntervalBetweenPolls) {
      this._bIntervalBetweenPolls = _bIntervalBetweenPolls;
      set_bIntervalBetweenPollsIsSet(true);
      return this;
    }

    public void unset_bIntervalBetweenPolls() {
      __isset_bit_vector.clear(___BINTERVALBETWEENPOLLS_ISSET_ID);
    }

    /** Returns true if field _bIntervalBetweenPolls is set (has been assigned a value) and false otherwise */
    public boolean isSet_bIntervalBetweenPolls() {
      return __isset_bit_vector.get(___BINTERVALBETWEENPOLLS_ISSET_ID);
    }

    public void set_bIntervalBetweenPollsIsSet(boolean value) {
      __isset_bit_vector.set(___BINTERVALBETWEENPOLLS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _MILLISECONDS:
        if (value == null) {
          unset_milliseconds();
        } else {
          set_milliseconds((Integer)value);
        }
        break;

      case _B_INTERVAL_BETWEEN_POLLS:
        if (value == null) {
          unset_bIntervalBetweenPolls();
        } else {
          set_bIntervalBetweenPolls((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _MILLISECONDS:
        return Integer.valueOf(get_milliseconds());

      case _B_INTERVAL_BETWEEN_POLLS:
        return Boolean.valueOf(is_bIntervalBetweenPolls());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _MILLISECONDS:
        return isSet_milliseconds();
      case _B_INTERVAL_BETWEEN_POLLS:
        return isSet_bIntervalBetweenPolls();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetPollInterval_args)
        return this.equals((SetPollInterval_args)that);
      return false;
    }

    public boolean equals(SetPollInterval_args that) {
      if (that == null)
        return false;

      boolean this_present__milliseconds = true;
      boolean that_present__milliseconds = true;
      if (this_present__milliseconds || that_present__milliseconds) {
        if (!(this_present__milliseconds && that_present__milliseconds))
          return false;
        if (this._milliseconds != that._milliseconds)
          return false;
      }

      boolean this_present__bIntervalBetweenPolls = true;
      boolean that_present__bIntervalBetweenPolls = true;
      if (this_present__bIntervalBetweenPolls || that_present__bIntervalBetweenPolls) {
        if (!(this_present__bIntervalBetweenPolls && that_present__bIntervalBetweenPolls))
          return false;
        if (this._bIntervalBetweenPolls != that._bIntervalBetweenPolls)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetPollInterval_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetPollInterval_args typedOther = (SetPollInterval_args)other;

      lastComparison = Boolean.valueOf(isSet_milliseconds()).compareTo(typedOther.isSet_milliseconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_milliseconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._milliseconds, typedOther._milliseconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_bIntervalBetweenPolls()).compareTo(typedOther.isSet_bIntervalBetweenPolls());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_bIntervalBetweenPolls()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._bIntervalBetweenPolls, typedOther._bIntervalBetweenPolls);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetPollInterval_args(");
      boolean first = true;

      sb.append("_milliseconds:");
      sb.append(this._milliseconds);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_bIntervalBetweenPolls:");
      sb.append(this._bIntervalBetweenPolls);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetPollInterval_argsStandardSchemeFactory implements SchemeFactory {
      public SetPollInterval_argsStandardScheme getScheme() {
        return new SetPollInterval_argsStandardScheme();
      }
    }

    private static class SetPollInterval_argsStandardScheme extends StandardScheme<SetPollInterval_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetPollInterval_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _MILLISECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._milliseconds = iprot.readI32();
                struct.set_millisecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _B_INTERVAL_BETWEEN_POLLS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._bIntervalBetweenPolls = iprot.readBool();
                struct.set_bIntervalBetweenPollsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetPollInterval_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_MILLISECONDS_FIELD_DESC);
        oprot.writeI32(struct._milliseconds);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_B_INTERVAL_BETWEEN_POLLS_FIELD_DESC);
        oprot.writeBool(struct._bIntervalBetweenPolls);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetPollInterval_argsTupleSchemeFactory implements SchemeFactory {
      public SetPollInterval_argsTupleScheme getScheme() {
        return new SetPollInterval_argsTupleScheme();
      }
    }

    private static class SetPollInterval_argsTupleScheme extends TupleScheme<SetPollInterval_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetPollInterval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_milliseconds()) {
          optionals.set(0);
        }
        if (struct.isSet_bIntervalBetweenPolls()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_milliseconds()) {
          oprot.writeI32(struct._milliseconds);
        }
        if (struct.isSet_bIntervalBetweenPolls()) {
          oprot.writeBool(struct._bIntervalBetweenPolls);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetPollInterval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._milliseconds = iprot.readI32();
          struct.set_millisecondsIsSet(true);
        }
        if (incoming.get(1)) {
          struct._bIntervalBetweenPolls = iprot.readBool();
          struct.set_bIntervalBetweenPollsIsSet(true);
        }
      }
    }

  }

  public static class SetPollInterval_result implements org.apache.thrift.TBase<SetPollInterval_result, SetPollInterval_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetPollInterval_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetPollInterval_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetPollInterval_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetPollInterval_result.class, metaDataMap);
    }

    public SetPollInterval_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetPollInterval_result(SetPollInterval_result other) {
    }

    public SetPollInterval_result deepCopy() {
      return new SetPollInterval_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetPollInterval_result)
        return this.equals((SetPollInterval_result)that);
      return false;
    }

    public boolean equals(SetPollInterval_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetPollInterval_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetPollInterval_result typedOther = (SetPollInterval_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetPollInterval_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetPollInterval_resultStandardSchemeFactory implements SchemeFactory {
      public SetPollInterval_resultStandardScheme getScheme() {
        return new SetPollInterval_resultStandardScheme();
      }
    }

    private static class SetPollInterval_resultStandardScheme extends StandardScheme<SetPollInterval_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetPollInterval_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetPollInterval_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetPollInterval_resultTupleSchemeFactory implements SchemeFactory {
      public SetPollInterval_resultTupleScheme getScheme() {
        return new SetPollInterval_resultTupleScheme();
      }
    }

    private static class SetPollInterval_resultTupleScheme extends TupleScheme<SetPollInterval_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetPollInterval_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetPollInterval_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class EnablePoll_args implements org.apache.thrift.TBase<EnablePoll_args, EnablePoll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnablePoll_args");

    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _INTENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_intensity", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnablePoll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnablePoll_argsTupleSchemeFactory());
    }

    public RemoteValueID _valueId; // required
    public byte _intensity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _VALUE_ID((short)1, "_valueId"),
      _INTENSITY((short)2, "_intensity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _VALUE_ID
            return _VALUE_ID;
          case 2: // _INTENSITY
            return _INTENSITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___INTENSITY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._INTENSITY, new org.apache.thrift.meta_data.FieldMetaData("_intensity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnablePoll_args.class, metaDataMap);
    }

    public EnablePoll_args() {
      this._intensity = (byte)1;

    }

    public EnablePoll_args(
      RemoteValueID _valueId,
      byte _intensity)
    {
      this();
      this._valueId = _valueId;
      this._intensity = _intensity;
      set_intensityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnablePoll_args(EnablePoll_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._intensity = other._intensity;
    }

    public EnablePoll_args deepCopy() {
      return new EnablePoll_args(this);
    }

    @Override
    public void clear() {
      this._valueId = null;
      this._intensity = (byte)1;

    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public EnablePoll_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public byte get_intensity() {
      return this._intensity;
    }

    public EnablePoll_args set_intensity(byte _intensity) {
      this._intensity = _intensity;
      set_intensityIsSet(true);
      return this;
    }

    public void unset_intensity() {
      __isset_bit_vector.clear(___INTENSITY_ISSET_ID);
    }

    /** Returns true if field _intensity is set (has been assigned a value) and false otherwise */
    public boolean isSet_intensity() {
      return __isset_bit_vector.get(___INTENSITY_ISSET_ID);
    }

    public void set_intensityIsSet(boolean value) {
      __isset_bit_vector.set(___INTENSITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _INTENSITY:
        if (value == null) {
          unset_intensity();
        } else {
          set_intensity((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _VALUE_ID:
        return get_valueId();

      case _INTENSITY:
        return Byte.valueOf(get_intensity());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _VALUE_ID:
        return isSet_valueId();
      case _INTENSITY:
        return isSet_intensity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnablePoll_args)
        return this.equals((EnablePoll_args)that);
      return false;
    }

    public boolean equals(EnablePoll_args that) {
      if (that == null)
        return false;

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__intensity = true;
      boolean that_present__intensity = true;
      if (this_present__intensity || that_present__intensity) {
        if (!(this_present__intensity && that_present__intensity))
          return false;
        if (this._intensity != that._intensity)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(EnablePoll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      EnablePoll_args typedOther = (EnablePoll_args)other;

      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_intensity()).compareTo(typedOther.isSet_intensity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_intensity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._intensity, typedOther._intensity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnablePoll_args(");
      boolean first = true;

      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_intensity:");
      sb.append(this._intensity);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnablePoll_argsStandardSchemeFactory implements SchemeFactory {
      public EnablePoll_argsStandardScheme getScheme() {
        return new EnablePoll_argsStandardScheme();
      }
    }

    private static class EnablePoll_argsStandardScheme extends StandardScheme<EnablePoll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnablePoll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _INTENSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._intensity = iprot.readByte();
                struct.set_intensityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnablePoll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_INTENSITY_FIELD_DESC);
        oprot.writeByte(struct._intensity);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnablePoll_argsTupleSchemeFactory implements SchemeFactory {
      public EnablePoll_argsTupleScheme getScheme() {
        return new EnablePoll_argsTupleScheme();
      }
    }

    private static class EnablePoll_argsTupleScheme extends TupleScheme<EnablePoll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnablePoll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_valueId()) {
          optionals.set(0);
        }
        if (struct.isSet_intensity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_intensity()) {
          oprot.writeByte(struct._intensity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnablePoll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._intensity = iprot.readByte();
          struct.set_intensityIsSet(true);
        }
      }
    }

  }

  public static class EnablePoll_result implements org.apache.thrift.TBase<EnablePoll_result, EnablePoll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnablePoll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EnablePoll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EnablePoll_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnablePoll_result.class, metaDataMap);
    }

    public EnablePoll_result() {
    }

    public EnablePoll_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EnablePoll_result(EnablePoll_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public EnablePoll_result deepCopy() {
      return new EnablePoll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public EnablePoll_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EnablePoll_result)
        return this.equals((EnablePoll_result)that);
      return false;
    }

    public boolean equals(EnablePoll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(EnablePoll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      EnablePoll_result typedOther = (EnablePoll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EnablePoll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EnablePoll_resultStandardSchemeFactory implements SchemeFactory {
      public EnablePoll_resultStandardScheme getScheme() {
        return new EnablePoll_resultStandardScheme();
      }
    }

    private static class EnablePoll_resultStandardScheme extends StandardScheme<EnablePoll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EnablePoll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EnablePoll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EnablePoll_resultTupleSchemeFactory implements SchemeFactory {
      public EnablePoll_resultTupleScheme getScheme() {
        return new EnablePoll_resultTupleScheme();
      }
    }

    private static class EnablePoll_resultTupleScheme extends TupleScheme<EnablePoll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EnablePoll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EnablePoll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DisablePoll_args implements org.apache.thrift.TBase<DisablePoll_args, DisablePoll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisablePoll_args");

    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DisablePoll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DisablePoll_argsTupleSchemeFactory());
    }

    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _VALUE_ID((short)1, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisablePoll_args.class, metaDataMap);
    }

    public DisablePoll_args() {
    }

    public DisablePoll_args(
      RemoteValueID _valueId)
    {
      this();
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisablePoll_args(DisablePoll_args other) {
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public DisablePoll_args deepCopy() {
      return new DisablePoll_args(this);
    }

    @Override
    public void clear() {
      this._valueId = null;
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public DisablePoll_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DisablePoll_args)
        return this.equals((DisablePoll_args)that);
      return false;
    }

    public boolean equals(DisablePoll_args that) {
      if (that == null)
        return false;

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DisablePoll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DisablePoll_args typedOther = (DisablePoll_args)other;

      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DisablePoll_args(");
      boolean first = true;

      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisablePoll_argsStandardSchemeFactory implements SchemeFactory {
      public DisablePoll_argsStandardScheme getScheme() {
        return new DisablePoll_argsStandardScheme();
      }
    }

    private static class DisablePoll_argsStandardScheme extends StandardScheme<DisablePoll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DisablePoll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DisablePoll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisablePoll_argsTupleSchemeFactory implements SchemeFactory {
      public DisablePoll_argsTupleScheme getScheme() {
        return new DisablePoll_argsTupleScheme();
      }
    }

    private static class DisablePoll_argsTupleScheme extends TupleScheme<DisablePoll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisablePoll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_valueId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisablePoll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class DisablePoll_result implements org.apache.thrift.TBase<DisablePoll_result, DisablePoll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisablePoll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DisablePoll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DisablePoll_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisablePoll_result.class, metaDataMap);
    }

    public DisablePoll_result() {
    }

    public DisablePoll_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisablePoll_result(DisablePoll_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public DisablePoll_result deepCopy() {
      return new DisablePoll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public DisablePoll_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DisablePoll_result)
        return this.equals((DisablePoll_result)that);
      return false;
    }

    public boolean equals(DisablePoll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DisablePoll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DisablePoll_result typedOther = (DisablePoll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DisablePoll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisablePoll_resultStandardSchemeFactory implements SchemeFactory {
      public DisablePoll_resultStandardScheme getScheme() {
        return new DisablePoll_resultStandardScheme();
      }
    }

    private static class DisablePoll_resultStandardScheme extends StandardScheme<DisablePoll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DisablePoll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DisablePoll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisablePoll_resultTupleSchemeFactory implements SchemeFactory {
      public DisablePoll_resultTupleScheme getScheme() {
        return new DisablePoll_resultTupleScheme();
      }
    }

    private static class DisablePoll_resultTupleScheme extends TupleScheme<DisablePoll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisablePoll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisablePoll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isPolled_args implements org.apache.thrift.TBase<isPolled_args, isPolled_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isPolled_args");

    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isPolled_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isPolled_argsTupleSchemeFactory());
    }

    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _VALUE_ID((short)1, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isPolled_args.class, metaDataMap);
    }

    public isPolled_args() {
    }

    public isPolled_args(
      RemoteValueID _valueId)
    {
      this();
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isPolled_args(isPolled_args other) {
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public isPolled_args deepCopy() {
      return new isPolled_args(this);
    }

    @Override
    public void clear() {
      this._valueId = null;
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public isPolled_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isPolled_args)
        return this.equals((isPolled_args)that);
      return false;
    }

    public boolean equals(isPolled_args that) {
      if (that == null)
        return false;

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isPolled_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isPolled_args typedOther = (isPolled_args)other;

      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isPolled_args(");
      boolean first = true;

      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isPolled_argsStandardSchemeFactory implements SchemeFactory {
      public isPolled_argsStandardScheme getScheme() {
        return new isPolled_argsStandardScheme();
      }
    }

    private static class isPolled_argsStandardScheme extends StandardScheme<isPolled_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isPolled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isPolled_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isPolled_argsTupleSchemeFactory implements SchemeFactory {
      public isPolled_argsTupleScheme getScheme() {
        return new isPolled_argsTupleScheme();
      }
    }

    private static class isPolled_argsTupleScheme extends TupleScheme<isPolled_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isPolled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_valueId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isPolled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class isPolled_result implements org.apache.thrift.TBase<isPolled_result, isPolled_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isPolled_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isPolled_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isPolled_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isPolled_result.class, metaDataMap);
    }

    public isPolled_result() {
    }

    public isPolled_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isPolled_result(isPolled_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public isPolled_result deepCopy() {
      return new isPolled_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isPolled_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isPolled_result)
        return this.equals((isPolled_result)that);
      return false;
    }

    public boolean equals(isPolled_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isPolled_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isPolled_result typedOther = (isPolled_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isPolled_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isPolled_resultStandardSchemeFactory implements SchemeFactory {
      public isPolled_resultStandardScheme getScheme() {
        return new isPolled_resultStandardScheme();
      }
    }

    private static class isPolled_resultStandardScheme extends StandardScheme<isPolled_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isPolled_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isPolled_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isPolled_resultTupleSchemeFactory implements SchemeFactory {
      public isPolled_resultTupleScheme getScheme() {
        return new isPolled_resultTupleScheme();
      }
    }

    private static class isPolled_resultTupleScheme extends TupleScheme<isPolled_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isPolled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isPolled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetPollIntensity_args implements org.apache.thrift.TBase<SetPollIntensity_args, SetPollIntensity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetPollIntensity_args");

    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _INTENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("_intensity", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetPollIntensity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetPollIntensity_argsTupleSchemeFactory());
    }

    public RemoteValueID _valueId; // required
    public byte _intensity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _VALUE_ID((short)1, "_valueId"),
      _INTENSITY((short)2, "_intensity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _VALUE_ID
            return _VALUE_ID;
          case 2: // _INTENSITY
            return _INTENSITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___INTENSITY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._INTENSITY, new org.apache.thrift.meta_data.FieldMetaData("_intensity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetPollIntensity_args.class, metaDataMap);
    }

    public SetPollIntensity_args() {
    }

    public SetPollIntensity_args(
      RemoteValueID _valueId,
      byte _intensity)
    {
      this();
      this._valueId = _valueId;
      this._intensity = _intensity;
      set_intensityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetPollIntensity_args(SetPollIntensity_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._intensity = other._intensity;
    }

    public SetPollIntensity_args deepCopy() {
      return new SetPollIntensity_args(this);
    }

    @Override
    public void clear() {
      this._valueId = null;
      set_intensityIsSet(false);
      this._intensity = 0;
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetPollIntensity_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public byte get_intensity() {
      return this._intensity;
    }

    public SetPollIntensity_args set_intensity(byte _intensity) {
      this._intensity = _intensity;
      set_intensityIsSet(true);
      return this;
    }

    public void unset_intensity() {
      __isset_bit_vector.clear(___INTENSITY_ISSET_ID);
    }

    /** Returns true if field _intensity is set (has been assigned a value) and false otherwise */
    public boolean isSet_intensity() {
      return __isset_bit_vector.get(___INTENSITY_ISSET_ID);
    }

    public void set_intensityIsSet(boolean value) {
      __isset_bit_vector.set(___INTENSITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _INTENSITY:
        if (value == null) {
          unset_intensity();
        } else {
          set_intensity((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _VALUE_ID:
        return get_valueId();

      case _INTENSITY:
        return Byte.valueOf(get_intensity());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _VALUE_ID:
        return isSet_valueId();
      case _INTENSITY:
        return isSet_intensity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetPollIntensity_args)
        return this.equals((SetPollIntensity_args)that);
      return false;
    }

    public boolean equals(SetPollIntensity_args that) {
      if (that == null)
        return false;

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__intensity = true;
      boolean that_present__intensity = true;
      if (this_present__intensity || that_present__intensity) {
        if (!(this_present__intensity && that_present__intensity))
          return false;
        if (this._intensity != that._intensity)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetPollIntensity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetPollIntensity_args typedOther = (SetPollIntensity_args)other;

      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_intensity()).compareTo(typedOther.isSet_intensity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_intensity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._intensity, typedOther._intensity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetPollIntensity_args(");
      boolean first = true;

      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_intensity:");
      sb.append(this._intensity);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetPollIntensity_argsStandardSchemeFactory implements SchemeFactory {
      public SetPollIntensity_argsStandardScheme getScheme() {
        return new SetPollIntensity_argsStandardScheme();
      }
    }

    private static class SetPollIntensity_argsStandardScheme extends StandardScheme<SetPollIntensity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetPollIntensity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _INTENSITY
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._intensity = iprot.readByte();
                struct.set_intensityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetPollIntensity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_INTENSITY_FIELD_DESC);
        oprot.writeByte(struct._intensity);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetPollIntensity_argsTupleSchemeFactory implements SchemeFactory {
      public SetPollIntensity_argsTupleScheme getScheme() {
        return new SetPollIntensity_argsTupleScheme();
      }
    }

    private static class SetPollIntensity_argsTupleScheme extends TupleScheme<SetPollIntensity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetPollIntensity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_valueId()) {
          optionals.set(0);
        }
        if (struct.isSet_intensity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_intensity()) {
          oprot.writeByte(struct._intensity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetPollIntensity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._intensity = iprot.readByte();
          struct.set_intensityIsSet(true);
        }
      }
    }

  }

  public static class SetPollIntensity_result implements org.apache.thrift.TBase<SetPollIntensity_result, SetPollIntensity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetPollIntensity_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetPollIntensity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetPollIntensity_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetPollIntensity_result.class, metaDataMap);
    }

    public SetPollIntensity_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetPollIntensity_result(SetPollIntensity_result other) {
    }

    public SetPollIntensity_result deepCopy() {
      return new SetPollIntensity_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetPollIntensity_result)
        return this.equals((SetPollIntensity_result)that);
      return false;
    }

    public boolean equals(SetPollIntensity_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetPollIntensity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetPollIntensity_result typedOther = (SetPollIntensity_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetPollIntensity_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetPollIntensity_resultStandardSchemeFactory implements SchemeFactory {
      public SetPollIntensity_resultStandardScheme getScheme() {
        return new SetPollIntensity_resultStandardScheme();
      }
    }

    private static class SetPollIntensity_resultStandardScheme extends StandardScheme<SetPollIntensity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetPollIntensity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetPollIntensity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetPollIntensity_resultTupleSchemeFactory implements SchemeFactory {
      public SetPollIntensity_resultTupleScheme getScheme() {
        return new SetPollIntensity_resultTupleScheme();
      }
    }

    private static class SetPollIntensity_resultTupleScheme extends TupleScheme<SetPollIntensity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetPollIntensity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetPollIntensity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class RefreshNodeInfo_args implements org.apache.thrift.TBase<RefreshNodeInfo_args, RefreshNodeInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefreshNodeInfo_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RefreshNodeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RefreshNodeInfo_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefreshNodeInfo_args.class, metaDataMap);
    }

    public RefreshNodeInfo_args() {
    }

    public RefreshNodeInfo_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RefreshNodeInfo_args(RefreshNodeInfo_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public RefreshNodeInfo_args deepCopy() {
      return new RefreshNodeInfo_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public RefreshNodeInfo_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public RefreshNodeInfo_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RefreshNodeInfo_args)
        return this.equals((RefreshNodeInfo_args)that);
      return false;
    }

    public boolean equals(RefreshNodeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RefreshNodeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RefreshNodeInfo_args typedOther = (RefreshNodeInfo_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RefreshNodeInfo_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RefreshNodeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public RefreshNodeInfo_argsStandardScheme getScheme() {
        return new RefreshNodeInfo_argsStandardScheme();
      }
    }

    private static class RefreshNodeInfo_argsStandardScheme extends StandardScheme<RefreshNodeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RefreshNodeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RefreshNodeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RefreshNodeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public RefreshNodeInfo_argsTupleScheme getScheme() {
        return new RefreshNodeInfo_argsTupleScheme();
      }
    }

    private static class RefreshNodeInfo_argsTupleScheme extends TupleScheme<RefreshNodeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RefreshNodeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RefreshNodeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class RefreshNodeInfo_result implements org.apache.thrift.TBase<RefreshNodeInfo_result, RefreshNodeInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefreshNodeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RefreshNodeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RefreshNodeInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefreshNodeInfo_result.class, metaDataMap);
    }

    public RefreshNodeInfo_result() {
    }

    public RefreshNodeInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RefreshNodeInfo_result(RefreshNodeInfo_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RefreshNodeInfo_result deepCopy() {
      return new RefreshNodeInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RefreshNodeInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RefreshNodeInfo_result)
        return this.equals((RefreshNodeInfo_result)that);
      return false;
    }

    public boolean equals(RefreshNodeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RefreshNodeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RefreshNodeInfo_result typedOther = (RefreshNodeInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RefreshNodeInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RefreshNodeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public RefreshNodeInfo_resultStandardScheme getScheme() {
        return new RefreshNodeInfo_resultStandardScheme();
      }
    }

    private static class RefreshNodeInfo_resultStandardScheme extends StandardScheme<RefreshNodeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RefreshNodeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RefreshNodeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RefreshNodeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public RefreshNodeInfo_resultTupleScheme getScheme() {
        return new RefreshNodeInfo_resultTupleScheme();
      }
    }

    private static class RefreshNodeInfo_resultTupleScheme extends TupleScheme<RefreshNodeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RefreshNodeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RefreshNodeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RequestNodeState_args implements org.apache.thrift.TBase<RequestNodeState_args, RequestNodeState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestNodeState_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestNodeState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestNodeState_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestNodeState_args.class, metaDataMap);
    }

    public RequestNodeState_args() {
    }

    public RequestNodeState_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestNodeState_args(RequestNodeState_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public RequestNodeState_args deepCopy() {
      return new RequestNodeState_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public RequestNodeState_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public RequestNodeState_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestNodeState_args)
        return this.equals((RequestNodeState_args)that);
      return false;
    }

    public boolean equals(RequestNodeState_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestNodeState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestNodeState_args typedOther = (RequestNodeState_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestNodeState_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestNodeState_argsStandardSchemeFactory implements SchemeFactory {
      public RequestNodeState_argsStandardScheme getScheme() {
        return new RequestNodeState_argsStandardScheme();
      }
    }

    private static class RequestNodeState_argsStandardScheme extends StandardScheme<RequestNodeState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestNodeState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestNodeState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestNodeState_argsTupleSchemeFactory implements SchemeFactory {
      public RequestNodeState_argsTupleScheme getScheme() {
        return new RequestNodeState_argsTupleScheme();
      }
    }

    private static class RequestNodeState_argsTupleScheme extends TupleScheme<RequestNodeState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestNodeState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestNodeState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class RequestNodeState_result implements org.apache.thrift.TBase<RequestNodeState_result, RequestNodeState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestNodeState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestNodeState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestNodeState_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestNodeState_result.class, metaDataMap);
    }

    public RequestNodeState_result() {
    }

    public RequestNodeState_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestNodeState_result(RequestNodeState_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RequestNodeState_result deepCopy() {
      return new RequestNodeState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RequestNodeState_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestNodeState_result)
        return this.equals((RequestNodeState_result)that);
      return false;
    }

    public boolean equals(RequestNodeState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestNodeState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestNodeState_result typedOther = (RequestNodeState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestNodeState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestNodeState_resultStandardSchemeFactory implements SchemeFactory {
      public RequestNodeState_resultStandardScheme getScheme() {
        return new RequestNodeState_resultStandardScheme();
      }
    }

    private static class RequestNodeState_resultStandardScheme extends StandardScheme<RequestNodeState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestNodeState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestNodeState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestNodeState_resultTupleSchemeFactory implements SchemeFactory {
      public RequestNodeState_resultTupleScheme getScheme() {
        return new RequestNodeState_resultTupleScheme();
      }
    }

    private static class RequestNodeState_resultTupleScheme extends TupleScheme<RequestNodeState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestNodeState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestNodeState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RequestNodeDynamic_args implements org.apache.thrift.TBase<RequestNodeDynamic_args, RequestNodeDynamic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestNodeDynamic_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestNodeDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestNodeDynamic_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestNodeDynamic_args.class, metaDataMap);
    }

    public RequestNodeDynamic_args() {
    }

    public RequestNodeDynamic_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestNodeDynamic_args(RequestNodeDynamic_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public RequestNodeDynamic_args deepCopy() {
      return new RequestNodeDynamic_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public RequestNodeDynamic_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public RequestNodeDynamic_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestNodeDynamic_args)
        return this.equals((RequestNodeDynamic_args)that);
      return false;
    }

    public boolean equals(RequestNodeDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestNodeDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestNodeDynamic_args typedOther = (RequestNodeDynamic_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestNodeDynamic_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestNodeDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public RequestNodeDynamic_argsStandardScheme getScheme() {
        return new RequestNodeDynamic_argsStandardScheme();
      }
    }

    private static class RequestNodeDynamic_argsStandardScheme extends StandardScheme<RequestNodeDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestNodeDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestNodeDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestNodeDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public RequestNodeDynamic_argsTupleScheme getScheme() {
        return new RequestNodeDynamic_argsTupleScheme();
      }
    }

    private static class RequestNodeDynamic_argsTupleScheme extends TupleScheme<RequestNodeDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestNodeDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestNodeDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class RequestNodeDynamic_result implements org.apache.thrift.TBase<RequestNodeDynamic_result, RequestNodeDynamic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestNodeDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestNodeDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestNodeDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestNodeDynamic_result.class, metaDataMap);
    }

    public RequestNodeDynamic_result() {
    }

    public RequestNodeDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestNodeDynamic_result(RequestNodeDynamic_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RequestNodeDynamic_result deepCopy() {
      return new RequestNodeDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RequestNodeDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestNodeDynamic_result)
        return this.equals((RequestNodeDynamic_result)that);
      return false;
    }

    public boolean equals(RequestNodeDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestNodeDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestNodeDynamic_result typedOther = (RequestNodeDynamic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestNodeDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestNodeDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public RequestNodeDynamic_resultStandardScheme getScheme() {
        return new RequestNodeDynamic_resultStandardScheme();
      }
    }

    private static class RequestNodeDynamic_resultStandardScheme extends StandardScheme<RequestNodeDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestNodeDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestNodeDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestNodeDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public RequestNodeDynamic_resultTupleScheme getScheme() {
        return new RequestNodeDynamic_resultTupleScheme();
      }
    }

    private static class RequestNodeDynamic_resultTupleScheme extends TupleScheme<RequestNodeDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestNodeDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestNodeDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsNodeListeningDevice_args implements org.apache.thrift.TBase<IsNodeListeningDevice_args, IsNodeListeningDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeListeningDevice_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeListeningDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeListeningDevice_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeListeningDevice_args.class, metaDataMap);
    }

    public IsNodeListeningDevice_args() {
    }

    public IsNodeListeningDevice_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeListeningDevice_args(IsNodeListeningDevice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public IsNodeListeningDevice_args deepCopy() {
      return new IsNodeListeningDevice_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsNodeListeningDevice_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public IsNodeListeningDevice_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeListeningDevice_args)
        return this.equals((IsNodeListeningDevice_args)that);
      return false;
    }

    public boolean equals(IsNodeListeningDevice_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeListeningDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeListeningDevice_args typedOther = (IsNodeListeningDevice_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeListeningDevice_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeListeningDevice_argsStandardSchemeFactory implements SchemeFactory {
      public IsNodeListeningDevice_argsStandardScheme getScheme() {
        return new IsNodeListeningDevice_argsStandardScheme();
      }
    }

    private static class IsNodeListeningDevice_argsStandardScheme extends StandardScheme<IsNodeListeningDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeListeningDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeListeningDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeListeningDevice_argsTupleSchemeFactory implements SchemeFactory {
      public IsNodeListeningDevice_argsTupleScheme getScheme() {
        return new IsNodeListeningDevice_argsTupleScheme();
      }
    }

    private static class IsNodeListeningDevice_argsTupleScheme extends TupleScheme<IsNodeListeningDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeListeningDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeListeningDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class IsNodeListeningDevice_result implements org.apache.thrift.TBase<IsNodeListeningDevice_result, IsNodeListeningDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeListeningDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeListeningDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeListeningDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeListeningDevice_result.class, metaDataMap);
    }

    public IsNodeListeningDevice_result() {
    }

    public IsNodeListeningDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeListeningDevice_result(IsNodeListeningDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsNodeListeningDevice_result deepCopy() {
      return new IsNodeListeningDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsNodeListeningDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeListeningDevice_result)
        return this.equals((IsNodeListeningDevice_result)that);
      return false;
    }

    public boolean equals(IsNodeListeningDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeListeningDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeListeningDevice_result typedOther = (IsNodeListeningDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeListeningDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeListeningDevice_resultStandardSchemeFactory implements SchemeFactory {
      public IsNodeListeningDevice_resultStandardScheme getScheme() {
        return new IsNodeListeningDevice_resultStandardScheme();
      }
    }

    private static class IsNodeListeningDevice_resultStandardScheme extends StandardScheme<IsNodeListeningDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeListeningDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeListeningDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeListeningDevice_resultTupleSchemeFactory implements SchemeFactory {
      public IsNodeListeningDevice_resultTupleScheme getScheme() {
        return new IsNodeListeningDevice_resultTupleScheme();
      }
    }

    private static class IsNodeListeningDevice_resultTupleScheme extends TupleScheme<IsNodeListeningDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeListeningDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeListeningDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsNodeFrequentListeningDevice_args implements org.apache.thrift.TBase<IsNodeFrequentListeningDevice_args, IsNodeFrequentListeningDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeFrequentListeningDevice_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeFrequentListeningDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeFrequentListeningDevice_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeFrequentListeningDevice_args.class, metaDataMap);
    }

    public IsNodeFrequentListeningDevice_args() {
    }

    public IsNodeFrequentListeningDevice_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeFrequentListeningDevice_args(IsNodeFrequentListeningDevice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public IsNodeFrequentListeningDevice_args deepCopy() {
      return new IsNodeFrequentListeningDevice_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsNodeFrequentListeningDevice_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public IsNodeFrequentListeningDevice_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeFrequentListeningDevice_args)
        return this.equals((IsNodeFrequentListeningDevice_args)that);
      return false;
    }

    public boolean equals(IsNodeFrequentListeningDevice_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeFrequentListeningDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeFrequentListeningDevice_args typedOther = (IsNodeFrequentListeningDevice_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeFrequentListeningDevice_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeFrequentListeningDevice_argsStandardSchemeFactory implements SchemeFactory {
      public IsNodeFrequentListeningDevice_argsStandardScheme getScheme() {
        return new IsNodeFrequentListeningDevice_argsStandardScheme();
      }
    }

    private static class IsNodeFrequentListeningDevice_argsStandardScheme extends StandardScheme<IsNodeFrequentListeningDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeFrequentListeningDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeFrequentListeningDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeFrequentListeningDevice_argsTupleSchemeFactory implements SchemeFactory {
      public IsNodeFrequentListeningDevice_argsTupleScheme getScheme() {
        return new IsNodeFrequentListeningDevice_argsTupleScheme();
      }
    }

    private static class IsNodeFrequentListeningDevice_argsTupleScheme extends TupleScheme<IsNodeFrequentListeningDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeFrequentListeningDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeFrequentListeningDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class IsNodeFrequentListeningDevice_result implements org.apache.thrift.TBase<IsNodeFrequentListeningDevice_result, IsNodeFrequentListeningDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeFrequentListeningDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeFrequentListeningDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeFrequentListeningDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeFrequentListeningDevice_result.class, metaDataMap);
    }

    public IsNodeFrequentListeningDevice_result() {
    }

    public IsNodeFrequentListeningDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeFrequentListeningDevice_result(IsNodeFrequentListeningDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsNodeFrequentListeningDevice_result deepCopy() {
      return new IsNodeFrequentListeningDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsNodeFrequentListeningDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeFrequentListeningDevice_result)
        return this.equals((IsNodeFrequentListeningDevice_result)that);
      return false;
    }

    public boolean equals(IsNodeFrequentListeningDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeFrequentListeningDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeFrequentListeningDevice_result typedOther = (IsNodeFrequentListeningDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeFrequentListeningDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeFrequentListeningDevice_resultStandardSchemeFactory implements SchemeFactory {
      public IsNodeFrequentListeningDevice_resultStandardScheme getScheme() {
        return new IsNodeFrequentListeningDevice_resultStandardScheme();
      }
    }

    private static class IsNodeFrequentListeningDevice_resultStandardScheme extends StandardScheme<IsNodeFrequentListeningDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeFrequentListeningDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeFrequentListeningDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeFrequentListeningDevice_resultTupleSchemeFactory implements SchemeFactory {
      public IsNodeFrequentListeningDevice_resultTupleScheme getScheme() {
        return new IsNodeFrequentListeningDevice_resultTupleScheme();
      }
    }

    private static class IsNodeFrequentListeningDevice_resultTupleScheme extends TupleScheme<IsNodeFrequentListeningDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeFrequentListeningDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeFrequentListeningDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsNodeBeamingDevice_args implements org.apache.thrift.TBase<IsNodeBeamingDevice_args, IsNodeBeamingDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeBeamingDevice_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeBeamingDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeBeamingDevice_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeBeamingDevice_args.class, metaDataMap);
    }

    public IsNodeBeamingDevice_args() {
    }

    public IsNodeBeamingDevice_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeBeamingDevice_args(IsNodeBeamingDevice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public IsNodeBeamingDevice_args deepCopy() {
      return new IsNodeBeamingDevice_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsNodeBeamingDevice_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public IsNodeBeamingDevice_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeBeamingDevice_args)
        return this.equals((IsNodeBeamingDevice_args)that);
      return false;
    }

    public boolean equals(IsNodeBeamingDevice_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeBeamingDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeBeamingDevice_args typedOther = (IsNodeBeamingDevice_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeBeamingDevice_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeBeamingDevice_argsStandardSchemeFactory implements SchemeFactory {
      public IsNodeBeamingDevice_argsStandardScheme getScheme() {
        return new IsNodeBeamingDevice_argsStandardScheme();
      }
    }

    private static class IsNodeBeamingDevice_argsStandardScheme extends StandardScheme<IsNodeBeamingDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeBeamingDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeBeamingDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeBeamingDevice_argsTupleSchemeFactory implements SchemeFactory {
      public IsNodeBeamingDevice_argsTupleScheme getScheme() {
        return new IsNodeBeamingDevice_argsTupleScheme();
      }
    }

    private static class IsNodeBeamingDevice_argsTupleScheme extends TupleScheme<IsNodeBeamingDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeBeamingDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeBeamingDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class IsNodeBeamingDevice_result implements org.apache.thrift.TBase<IsNodeBeamingDevice_result, IsNodeBeamingDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeBeamingDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeBeamingDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeBeamingDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeBeamingDevice_result.class, metaDataMap);
    }

    public IsNodeBeamingDevice_result() {
    }

    public IsNodeBeamingDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeBeamingDevice_result(IsNodeBeamingDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsNodeBeamingDevice_result deepCopy() {
      return new IsNodeBeamingDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsNodeBeamingDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeBeamingDevice_result)
        return this.equals((IsNodeBeamingDevice_result)that);
      return false;
    }

    public boolean equals(IsNodeBeamingDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeBeamingDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeBeamingDevice_result typedOther = (IsNodeBeamingDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeBeamingDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeBeamingDevice_resultStandardSchemeFactory implements SchemeFactory {
      public IsNodeBeamingDevice_resultStandardScheme getScheme() {
        return new IsNodeBeamingDevice_resultStandardScheme();
      }
    }

    private static class IsNodeBeamingDevice_resultStandardScheme extends StandardScheme<IsNodeBeamingDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeBeamingDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeBeamingDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeBeamingDevice_resultTupleSchemeFactory implements SchemeFactory {
      public IsNodeBeamingDevice_resultTupleScheme getScheme() {
        return new IsNodeBeamingDevice_resultTupleScheme();
      }
    }

    private static class IsNodeBeamingDevice_resultTupleScheme extends TupleScheme<IsNodeBeamingDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeBeamingDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeBeamingDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsNodeRoutingDevice_args implements org.apache.thrift.TBase<IsNodeRoutingDevice_args, IsNodeRoutingDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeRoutingDevice_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeRoutingDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeRoutingDevice_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeRoutingDevice_args.class, metaDataMap);
    }

    public IsNodeRoutingDevice_args() {
    }

    public IsNodeRoutingDevice_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeRoutingDevice_args(IsNodeRoutingDevice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public IsNodeRoutingDevice_args deepCopy() {
      return new IsNodeRoutingDevice_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsNodeRoutingDevice_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public IsNodeRoutingDevice_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeRoutingDevice_args)
        return this.equals((IsNodeRoutingDevice_args)that);
      return false;
    }

    public boolean equals(IsNodeRoutingDevice_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeRoutingDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeRoutingDevice_args typedOther = (IsNodeRoutingDevice_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeRoutingDevice_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeRoutingDevice_argsStandardSchemeFactory implements SchemeFactory {
      public IsNodeRoutingDevice_argsStandardScheme getScheme() {
        return new IsNodeRoutingDevice_argsStandardScheme();
      }
    }

    private static class IsNodeRoutingDevice_argsStandardScheme extends StandardScheme<IsNodeRoutingDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeRoutingDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeRoutingDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeRoutingDevice_argsTupleSchemeFactory implements SchemeFactory {
      public IsNodeRoutingDevice_argsTupleScheme getScheme() {
        return new IsNodeRoutingDevice_argsTupleScheme();
      }
    }

    private static class IsNodeRoutingDevice_argsTupleScheme extends TupleScheme<IsNodeRoutingDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeRoutingDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeRoutingDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class IsNodeRoutingDevice_result implements org.apache.thrift.TBase<IsNodeRoutingDevice_result, IsNodeRoutingDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeRoutingDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeRoutingDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeRoutingDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeRoutingDevice_result.class, metaDataMap);
    }

    public IsNodeRoutingDevice_result() {
    }

    public IsNodeRoutingDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeRoutingDevice_result(IsNodeRoutingDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsNodeRoutingDevice_result deepCopy() {
      return new IsNodeRoutingDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsNodeRoutingDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeRoutingDevice_result)
        return this.equals((IsNodeRoutingDevice_result)that);
      return false;
    }

    public boolean equals(IsNodeRoutingDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeRoutingDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeRoutingDevice_result typedOther = (IsNodeRoutingDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeRoutingDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeRoutingDevice_resultStandardSchemeFactory implements SchemeFactory {
      public IsNodeRoutingDevice_resultStandardScheme getScheme() {
        return new IsNodeRoutingDevice_resultStandardScheme();
      }
    }

    private static class IsNodeRoutingDevice_resultStandardScheme extends StandardScheme<IsNodeRoutingDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeRoutingDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeRoutingDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeRoutingDevice_resultTupleSchemeFactory implements SchemeFactory {
      public IsNodeRoutingDevice_resultTupleScheme getScheme() {
        return new IsNodeRoutingDevice_resultTupleScheme();
      }
    }

    private static class IsNodeRoutingDevice_resultTupleScheme extends TupleScheme<IsNodeRoutingDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeRoutingDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeRoutingDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsNodeSecurityDevice_args implements org.apache.thrift.TBase<IsNodeSecurityDevice_args, IsNodeSecurityDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeSecurityDevice_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeSecurityDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeSecurityDevice_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeSecurityDevice_args.class, metaDataMap);
    }

    public IsNodeSecurityDevice_args() {
    }

    public IsNodeSecurityDevice_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeSecurityDevice_args(IsNodeSecurityDevice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public IsNodeSecurityDevice_args deepCopy() {
      return new IsNodeSecurityDevice_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsNodeSecurityDevice_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public IsNodeSecurityDevice_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeSecurityDevice_args)
        return this.equals((IsNodeSecurityDevice_args)that);
      return false;
    }

    public boolean equals(IsNodeSecurityDevice_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeSecurityDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeSecurityDevice_args typedOther = (IsNodeSecurityDevice_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeSecurityDevice_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeSecurityDevice_argsStandardSchemeFactory implements SchemeFactory {
      public IsNodeSecurityDevice_argsStandardScheme getScheme() {
        return new IsNodeSecurityDevice_argsStandardScheme();
      }
    }

    private static class IsNodeSecurityDevice_argsStandardScheme extends StandardScheme<IsNodeSecurityDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeSecurityDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeSecurityDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeSecurityDevice_argsTupleSchemeFactory implements SchemeFactory {
      public IsNodeSecurityDevice_argsTupleScheme getScheme() {
        return new IsNodeSecurityDevice_argsTupleScheme();
      }
    }

    private static class IsNodeSecurityDevice_argsTupleScheme extends TupleScheme<IsNodeSecurityDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeSecurityDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeSecurityDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class IsNodeSecurityDevice_result implements org.apache.thrift.TBase<IsNodeSecurityDevice_result, IsNodeSecurityDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeSecurityDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeSecurityDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeSecurityDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeSecurityDevice_result.class, metaDataMap);
    }

    public IsNodeSecurityDevice_result() {
    }

    public IsNodeSecurityDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeSecurityDevice_result(IsNodeSecurityDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsNodeSecurityDevice_result deepCopy() {
      return new IsNodeSecurityDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsNodeSecurityDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeSecurityDevice_result)
        return this.equals((IsNodeSecurityDevice_result)that);
      return false;
    }

    public boolean equals(IsNodeSecurityDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeSecurityDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeSecurityDevice_result typedOther = (IsNodeSecurityDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeSecurityDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeSecurityDevice_resultStandardSchemeFactory implements SchemeFactory {
      public IsNodeSecurityDevice_resultStandardScheme getScheme() {
        return new IsNodeSecurityDevice_resultStandardScheme();
      }
    }

    private static class IsNodeSecurityDevice_resultStandardScheme extends StandardScheme<IsNodeSecurityDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeSecurityDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeSecurityDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeSecurityDevice_resultTupleSchemeFactory implements SchemeFactory {
      public IsNodeSecurityDevice_resultTupleScheme getScheme() {
        return new IsNodeSecurityDevice_resultTupleScheme();
      }
    }

    private static class IsNodeSecurityDevice_resultTupleScheme extends TupleScheme<IsNodeSecurityDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeSecurityDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeSecurityDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeMaxBaudRate_args implements org.apache.thrift.TBase<GetNodeMaxBaudRate_args, GetNodeMaxBaudRate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeMaxBaudRate_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeMaxBaudRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeMaxBaudRate_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeMaxBaudRate_args.class, metaDataMap);
    }

    public GetNodeMaxBaudRate_args() {
    }

    public GetNodeMaxBaudRate_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeMaxBaudRate_args(GetNodeMaxBaudRate_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeMaxBaudRate_args deepCopy() {
      return new GetNodeMaxBaudRate_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeMaxBaudRate_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeMaxBaudRate_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeMaxBaudRate_args)
        return this.equals((GetNodeMaxBaudRate_args)that);
      return false;
    }

    public boolean equals(GetNodeMaxBaudRate_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeMaxBaudRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeMaxBaudRate_args typedOther = (GetNodeMaxBaudRate_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeMaxBaudRate_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeMaxBaudRate_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeMaxBaudRate_argsStandardScheme getScheme() {
        return new GetNodeMaxBaudRate_argsStandardScheme();
      }
    }

    private static class GetNodeMaxBaudRate_argsStandardScheme extends StandardScheme<GetNodeMaxBaudRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeMaxBaudRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeMaxBaudRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeMaxBaudRate_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeMaxBaudRate_argsTupleScheme getScheme() {
        return new GetNodeMaxBaudRate_argsTupleScheme();
      }
    }

    private static class GetNodeMaxBaudRate_argsTupleScheme extends TupleScheme<GetNodeMaxBaudRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeMaxBaudRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeMaxBaudRate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeMaxBaudRate_result implements org.apache.thrift.TBase<GetNodeMaxBaudRate_result, GetNodeMaxBaudRate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeMaxBaudRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeMaxBaudRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeMaxBaudRate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeMaxBaudRate_result.class, metaDataMap);
    }

    public GetNodeMaxBaudRate_result() {
    }

    public GetNodeMaxBaudRate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeMaxBaudRate_result(GetNodeMaxBaudRate_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNodeMaxBaudRate_result deepCopy() {
      return new GetNodeMaxBaudRate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public GetNodeMaxBaudRate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeMaxBaudRate_result)
        return this.equals((GetNodeMaxBaudRate_result)that);
      return false;
    }

    public boolean equals(GetNodeMaxBaudRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeMaxBaudRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeMaxBaudRate_result typedOther = (GetNodeMaxBaudRate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeMaxBaudRate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeMaxBaudRate_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeMaxBaudRate_resultStandardScheme getScheme() {
        return new GetNodeMaxBaudRate_resultStandardScheme();
      }
    }

    private static class GetNodeMaxBaudRate_resultStandardScheme extends StandardScheme<GetNodeMaxBaudRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeMaxBaudRate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeMaxBaudRate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeMaxBaudRate_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeMaxBaudRate_resultTupleScheme getScheme() {
        return new GetNodeMaxBaudRate_resultTupleScheme();
      }
    }

    private static class GetNodeMaxBaudRate_resultTupleScheme extends TupleScheme<GetNodeMaxBaudRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeMaxBaudRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeMaxBaudRate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeVersion_args implements org.apache.thrift.TBase<GetNodeVersion_args, GetNodeVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeVersion_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeVersion_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeVersion_args.class, metaDataMap);
    }

    public GetNodeVersion_args() {
    }

    public GetNodeVersion_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeVersion_args(GetNodeVersion_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeVersion_args deepCopy() {
      return new GetNodeVersion_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeVersion_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeVersion_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeVersion_args)
        return this.equals((GetNodeVersion_args)that);
      return false;
    }

    public boolean equals(GetNodeVersion_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeVersion_args typedOther = (GetNodeVersion_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeVersion_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeVersion_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeVersion_argsStandardScheme getScheme() {
        return new GetNodeVersion_argsStandardScheme();
      }
    }

    private static class GetNodeVersion_argsStandardScheme extends StandardScheme<GetNodeVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeVersion_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeVersion_argsTupleScheme getScheme() {
        return new GetNodeVersion_argsTupleScheme();
      }
    }

    private static class GetNodeVersion_argsTupleScheme extends TupleScheme<GetNodeVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeVersion_result implements org.apache.thrift.TBase<GetNodeVersion_result, GetNodeVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeVersion_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeVersion_result.class, metaDataMap);
    }

    public GetNodeVersion_result() {
    }

    public GetNodeVersion_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeVersion_result(GetNodeVersion_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNodeVersion_result deepCopy() {
      return new GetNodeVersion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNodeVersion_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeVersion_result)
        return this.equals((GetNodeVersion_result)that);
      return false;
    }

    public boolean equals(GetNodeVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeVersion_result typedOther = (GetNodeVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeVersion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeVersion_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeVersion_resultStandardScheme getScheme() {
        return new GetNodeVersion_resultStandardScheme();
      }
    }

    private static class GetNodeVersion_resultStandardScheme extends StandardScheme<GetNodeVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeVersion_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeVersion_resultTupleScheme getScheme() {
        return new GetNodeVersion_resultTupleScheme();
      }
    }

    private static class GetNodeVersion_resultTupleScheme extends TupleScheme<GetNodeVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeSecurity_args implements org.apache.thrift.TBase<GetNodeSecurity_args, GetNodeSecurity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeSecurity_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeSecurity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeSecurity_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeSecurity_args.class, metaDataMap);
    }

    public GetNodeSecurity_args() {
    }

    public GetNodeSecurity_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeSecurity_args(GetNodeSecurity_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeSecurity_args deepCopy() {
      return new GetNodeSecurity_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeSecurity_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeSecurity_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeSecurity_args)
        return this.equals((GetNodeSecurity_args)that);
      return false;
    }

    public boolean equals(GetNodeSecurity_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeSecurity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeSecurity_args typedOther = (GetNodeSecurity_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeSecurity_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeSecurity_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeSecurity_argsStandardScheme getScheme() {
        return new GetNodeSecurity_argsStandardScheme();
      }
    }

    private static class GetNodeSecurity_argsStandardScheme extends StandardScheme<GetNodeSecurity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeSecurity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeSecurity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeSecurity_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeSecurity_argsTupleScheme getScheme() {
        return new GetNodeSecurity_argsTupleScheme();
      }
    }

    private static class GetNodeSecurity_argsTupleScheme extends TupleScheme<GetNodeSecurity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeSecurity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeSecurity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeSecurity_result implements org.apache.thrift.TBase<GetNodeSecurity_result, GetNodeSecurity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeSecurity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeSecurity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeSecurity_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeSecurity_result.class, metaDataMap);
    }

    public GetNodeSecurity_result() {
    }

    public GetNodeSecurity_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeSecurity_result(GetNodeSecurity_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNodeSecurity_result deepCopy() {
      return new GetNodeSecurity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNodeSecurity_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeSecurity_result)
        return this.equals((GetNodeSecurity_result)that);
      return false;
    }

    public boolean equals(GetNodeSecurity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeSecurity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeSecurity_result typedOther = (GetNodeSecurity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeSecurity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeSecurity_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeSecurity_resultStandardScheme getScheme() {
        return new GetNodeSecurity_resultStandardScheme();
      }
    }

    private static class GetNodeSecurity_resultStandardScheme extends StandardScheme<GetNodeSecurity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeSecurity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeSecurity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeSecurity_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeSecurity_resultTupleScheme getScheme() {
        return new GetNodeSecurity_resultTupleScheme();
      }
    }

    private static class GetNodeSecurity_resultTupleScheme extends TupleScheme<GetNodeSecurity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeSecurity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeSecurity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeBasic_args implements org.apache.thrift.TBase<GetNodeBasic_args, GetNodeBasic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeBasic_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeBasic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeBasic_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeBasic_args.class, metaDataMap);
    }

    public GetNodeBasic_args() {
    }

    public GetNodeBasic_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeBasic_args(GetNodeBasic_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeBasic_args deepCopy() {
      return new GetNodeBasic_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeBasic_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeBasic_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeBasic_args)
        return this.equals((GetNodeBasic_args)that);
      return false;
    }

    public boolean equals(GetNodeBasic_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeBasic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeBasic_args typedOther = (GetNodeBasic_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeBasic_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeBasic_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeBasic_argsStandardScheme getScheme() {
        return new GetNodeBasic_argsStandardScheme();
      }
    }

    private static class GetNodeBasic_argsStandardScheme extends StandardScheme<GetNodeBasic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeBasic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeBasic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeBasic_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeBasic_argsTupleScheme getScheme() {
        return new GetNodeBasic_argsTupleScheme();
      }
    }

    private static class GetNodeBasic_argsTupleScheme extends TupleScheme<GetNodeBasic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeBasic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeBasic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeBasic_result implements org.apache.thrift.TBase<GetNodeBasic_result, GetNodeBasic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeBasic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeBasic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeBasic_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeBasic_result.class, metaDataMap);
    }

    public GetNodeBasic_result() {
    }

    public GetNodeBasic_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeBasic_result(GetNodeBasic_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNodeBasic_result deepCopy() {
      return new GetNodeBasic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNodeBasic_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeBasic_result)
        return this.equals((GetNodeBasic_result)that);
      return false;
    }

    public boolean equals(GetNodeBasic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeBasic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeBasic_result typedOther = (GetNodeBasic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeBasic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeBasic_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeBasic_resultStandardScheme getScheme() {
        return new GetNodeBasic_resultStandardScheme();
      }
    }

    private static class GetNodeBasic_resultStandardScheme extends StandardScheme<GetNodeBasic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeBasic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeBasic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeBasic_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeBasic_resultTupleScheme getScheme() {
        return new GetNodeBasic_resultTupleScheme();
      }
    }

    private static class GetNodeBasic_resultTupleScheme extends TupleScheme<GetNodeBasic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeBasic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeBasic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeGeneric_args implements org.apache.thrift.TBase<GetNodeGeneric_args, GetNodeGeneric_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeGeneric_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeGeneric_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeGeneric_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeGeneric_args.class, metaDataMap);
    }

    public GetNodeGeneric_args() {
    }

    public GetNodeGeneric_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeGeneric_args(GetNodeGeneric_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeGeneric_args deepCopy() {
      return new GetNodeGeneric_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeGeneric_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeGeneric_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeGeneric_args)
        return this.equals((GetNodeGeneric_args)that);
      return false;
    }

    public boolean equals(GetNodeGeneric_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeGeneric_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeGeneric_args typedOther = (GetNodeGeneric_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeGeneric_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeGeneric_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeGeneric_argsStandardScheme getScheme() {
        return new GetNodeGeneric_argsStandardScheme();
      }
    }

    private static class GetNodeGeneric_argsStandardScheme extends StandardScheme<GetNodeGeneric_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeGeneric_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeGeneric_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeGeneric_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeGeneric_argsTupleScheme getScheme() {
        return new GetNodeGeneric_argsTupleScheme();
      }
    }

    private static class GetNodeGeneric_argsTupleScheme extends TupleScheme<GetNodeGeneric_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeGeneric_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeGeneric_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeGeneric_result implements org.apache.thrift.TBase<GetNodeGeneric_result, GetNodeGeneric_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeGeneric_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeGeneric_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeGeneric_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeGeneric_result.class, metaDataMap);
    }

    public GetNodeGeneric_result() {
    }

    public GetNodeGeneric_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeGeneric_result(GetNodeGeneric_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNodeGeneric_result deepCopy() {
      return new GetNodeGeneric_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNodeGeneric_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeGeneric_result)
        return this.equals((GetNodeGeneric_result)that);
      return false;
    }

    public boolean equals(GetNodeGeneric_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeGeneric_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeGeneric_result typedOther = (GetNodeGeneric_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeGeneric_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeGeneric_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeGeneric_resultStandardScheme getScheme() {
        return new GetNodeGeneric_resultStandardScheme();
      }
    }

    private static class GetNodeGeneric_resultStandardScheme extends StandardScheme<GetNodeGeneric_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeGeneric_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeGeneric_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeGeneric_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeGeneric_resultTupleScheme getScheme() {
        return new GetNodeGeneric_resultTupleScheme();
      }
    }

    private static class GetNodeGeneric_resultTupleScheme extends TupleScheme<GetNodeGeneric_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeGeneric_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeGeneric_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeSpecific_args implements org.apache.thrift.TBase<GetNodeSpecific_args, GetNodeSpecific_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeSpecific_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeSpecific_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeSpecific_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeSpecific_args.class, metaDataMap);
    }

    public GetNodeSpecific_args() {
    }

    public GetNodeSpecific_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeSpecific_args(GetNodeSpecific_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeSpecific_args deepCopy() {
      return new GetNodeSpecific_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeSpecific_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeSpecific_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeSpecific_args)
        return this.equals((GetNodeSpecific_args)that);
      return false;
    }

    public boolean equals(GetNodeSpecific_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeSpecific_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeSpecific_args typedOther = (GetNodeSpecific_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeSpecific_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeSpecific_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeSpecific_argsStandardScheme getScheme() {
        return new GetNodeSpecific_argsStandardScheme();
      }
    }

    private static class GetNodeSpecific_argsStandardScheme extends StandardScheme<GetNodeSpecific_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeSpecific_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeSpecific_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeSpecific_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeSpecific_argsTupleScheme getScheme() {
        return new GetNodeSpecific_argsTupleScheme();
      }
    }

    private static class GetNodeSpecific_argsTupleScheme extends TupleScheme<GetNodeSpecific_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeSpecific_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeSpecific_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeSpecific_result implements org.apache.thrift.TBase<GetNodeSpecific_result, GetNodeSpecific_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeSpecific_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeSpecific_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeSpecific_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeSpecific_result.class, metaDataMap);
    }

    public GetNodeSpecific_result() {
    }

    public GetNodeSpecific_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeSpecific_result(GetNodeSpecific_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNodeSpecific_result deepCopy() {
      return new GetNodeSpecific_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNodeSpecific_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeSpecific_result)
        return this.equals((GetNodeSpecific_result)that);
      return false;
    }

    public boolean equals(GetNodeSpecific_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeSpecific_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeSpecific_result typedOther = (GetNodeSpecific_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeSpecific_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeSpecific_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeSpecific_resultStandardScheme getScheme() {
        return new GetNodeSpecific_resultStandardScheme();
      }
    }

    private static class GetNodeSpecific_resultStandardScheme extends StandardScheme<GetNodeSpecific_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeSpecific_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeSpecific_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeSpecific_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeSpecific_resultTupleScheme getScheme() {
        return new GetNodeSpecific_resultTupleScheme();
      }
    }

    private static class GetNodeSpecific_resultTupleScheme extends TupleScheme<GetNodeSpecific_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeSpecific_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeSpecific_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeType_args implements org.apache.thrift.TBase<GetNodeType_args, GetNodeType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeType_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeType_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeType_args.class, metaDataMap);
    }

    public GetNodeType_args() {
    }

    public GetNodeType_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeType_args(GetNodeType_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeType_args deepCopy() {
      return new GetNodeType_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeType_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeType_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeType_args)
        return this.equals((GetNodeType_args)that);
      return false;
    }

    public boolean equals(GetNodeType_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeType_args typedOther = (GetNodeType_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeType_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeType_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeType_argsStandardScheme getScheme() {
        return new GetNodeType_argsStandardScheme();
      }
    }

    private static class GetNodeType_argsStandardScheme extends StandardScheme<GetNodeType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeType_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeType_argsTupleScheme getScheme() {
        return new GetNodeType_argsTupleScheme();
      }
    }

    private static class GetNodeType_argsTupleScheme extends TupleScheme<GetNodeType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeType_result implements org.apache.thrift.TBase<GetNodeType_result, GetNodeType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeType_result.class, metaDataMap);
    }

    public GetNodeType_result() {
    }

    public GetNodeType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeType_result(GetNodeType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeType_result deepCopy() {
      return new GetNodeType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeType_result)
        return this.equals((GetNodeType_result)that);
      return false;
    }

    public boolean equals(GetNodeType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeType_result typedOther = (GetNodeType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeType_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeType_resultStandardScheme getScheme() {
        return new GetNodeType_resultStandardScheme();
      }
    }

    private static class GetNodeType_resultStandardScheme extends StandardScheme<GetNodeType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeType_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeType_resultTupleScheme getScheme() {
        return new GetNodeType_resultTupleScheme();
      }
    }

    private static class GetNodeType_resultTupleScheme extends TupleScheme<GetNodeType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeNeighbors_args implements org.apache.thrift.TBase<GetNodeNeighbors_args, GetNodeNeighbors_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeNeighbors_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeNeighbors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeNeighbors_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeNeighbors_args.class, metaDataMap);
    }

    public GetNodeNeighbors_args() {
    }

    public GetNodeNeighbors_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeNeighbors_args(GetNodeNeighbors_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeNeighbors_args deepCopy() {
      return new GetNodeNeighbors_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeNeighbors_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeNeighbors_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeNeighbors_args)
        return this.equals((GetNodeNeighbors_args)that);
      return false;
    }

    public boolean equals(GetNodeNeighbors_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeNeighbors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeNeighbors_args typedOther = (GetNodeNeighbors_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeNeighbors_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeNeighbors_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeNeighbors_argsStandardScheme getScheme() {
        return new GetNodeNeighbors_argsStandardScheme();
      }
    }

    private static class GetNodeNeighbors_argsStandardScheme extends StandardScheme<GetNodeNeighbors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeNeighbors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeNeighbors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeNeighbors_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeNeighbors_argsTupleScheme getScheme() {
        return new GetNodeNeighbors_argsTupleScheme();
      }
    }

    private static class GetNodeNeighbors_argsTupleScheme extends TupleScheme<GetNodeNeighbors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeNeighbors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeNeighbors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeNeighbors_result implements org.apache.thrift.TBase<GetNodeNeighbors_result, GetNodeNeighbors_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeNeighbors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeNeighbors_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeNeighbors_resultTupleSchemeFactory());
    }

    public UInt32_ListByte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UInt32_ListByte.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeNeighbors_result.class, metaDataMap);
    }

    public GetNodeNeighbors_result() {
    }

    public GetNodeNeighbors_result(
      UInt32_ListByte success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeNeighbors_result(GetNodeNeighbors_result other) {
      if (other.isSetSuccess()) {
        this.success = new UInt32_ListByte(other.success);
      }
    }

    public GetNodeNeighbors_result deepCopy() {
      return new GetNodeNeighbors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UInt32_ListByte getSuccess() {
      return this.success;
    }

    public GetNodeNeighbors_result setSuccess(UInt32_ListByte success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UInt32_ListByte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeNeighbors_result)
        return this.equals((GetNodeNeighbors_result)that);
      return false;
    }

    public boolean equals(GetNodeNeighbors_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeNeighbors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeNeighbors_result typedOther = (GetNodeNeighbors_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeNeighbors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeNeighbors_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeNeighbors_resultStandardScheme getScheme() {
        return new GetNodeNeighbors_resultStandardScheme();
      }
    }

    private static class GetNodeNeighbors_resultStandardScheme extends StandardScheme<GetNodeNeighbors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeNeighbors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UInt32_ListByte();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeNeighbors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeNeighbors_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeNeighbors_resultTupleScheme getScheme() {
        return new GetNodeNeighbors_resultTupleScheme();
      }
    }

    private static class GetNodeNeighbors_resultTupleScheme extends TupleScheme<GetNodeNeighbors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeNeighbors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeNeighbors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UInt32_ListByte();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeManufacturerName_args implements org.apache.thrift.TBase<GetNodeManufacturerName_args, GetNodeManufacturerName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeManufacturerName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeManufacturerName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeManufacturerName_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeManufacturerName_args.class, metaDataMap);
    }

    public GetNodeManufacturerName_args() {
    }

    public GetNodeManufacturerName_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeManufacturerName_args(GetNodeManufacturerName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeManufacturerName_args deepCopy() {
      return new GetNodeManufacturerName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeManufacturerName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeManufacturerName_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeManufacturerName_args)
        return this.equals((GetNodeManufacturerName_args)that);
      return false;
    }

    public boolean equals(GetNodeManufacturerName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeManufacturerName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeManufacturerName_args typedOther = (GetNodeManufacturerName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeManufacturerName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeManufacturerName_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerName_argsStandardScheme getScheme() {
        return new GetNodeManufacturerName_argsStandardScheme();
      }
    }

    private static class GetNodeManufacturerName_argsStandardScheme extends StandardScheme<GetNodeManufacturerName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeManufacturerName_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerName_argsTupleScheme getScheme() {
        return new GetNodeManufacturerName_argsTupleScheme();
      }
    }

    private static class GetNodeManufacturerName_argsTupleScheme extends TupleScheme<GetNodeManufacturerName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeManufacturerName_result implements org.apache.thrift.TBase<GetNodeManufacturerName_result, GetNodeManufacturerName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeManufacturerName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeManufacturerName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeManufacturerName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeManufacturerName_result.class, metaDataMap);
    }

    public GetNodeManufacturerName_result() {
    }

    public GetNodeManufacturerName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeManufacturerName_result(GetNodeManufacturerName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeManufacturerName_result deepCopy() {
      return new GetNodeManufacturerName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeManufacturerName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeManufacturerName_result)
        return this.equals((GetNodeManufacturerName_result)that);
      return false;
    }

    public boolean equals(GetNodeManufacturerName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeManufacturerName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeManufacturerName_result typedOther = (GetNodeManufacturerName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeManufacturerName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeManufacturerName_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerName_resultStandardScheme getScheme() {
        return new GetNodeManufacturerName_resultStandardScheme();
      }
    }

    private static class GetNodeManufacturerName_resultStandardScheme extends StandardScheme<GetNodeManufacturerName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeManufacturerName_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerName_resultTupleScheme getScheme() {
        return new GetNodeManufacturerName_resultTupleScheme();
      }
    }

    private static class GetNodeManufacturerName_resultTupleScheme extends TupleScheme<GetNodeManufacturerName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeProductName_args implements org.apache.thrift.TBase<GetNodeProductName_args, GetNodeProductName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeProductName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeProductName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeProductName_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeProductName_args.class, metaDataMap);
    }

    public GetNodeProductName_args() {
    }

    public GetNodeProductName_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeProductName_args(GetNodeProductName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeProductName_args deepCopy() {
      return new GetNodeProductName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeProductName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeProductName_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeProductName_args)
        return this.equals((GetNodeProductName_args)that);
      return false;
    }

    public boolean equals(GetNodeProductName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeProductName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeProductName_args typedOther = (GetNodeProductName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeProductName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeProductName_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeProductName_argsStandardScheme getScheme() {
        return new GetNodeProductName_argsStandardScheme();
      }
    }

    private static class GetNodeProductName_argsStandardScheme extends StandardScheme<GetNodeProductName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeProductName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeProductName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeProductName_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeProductName_argsTupleScheme getScheme() {
        return new GetNodeProductName_argsTupleScheme();
      }
    }

    private static class GetNodeProductName_argsTupleScheme extends TupleScheme<GetNodeProductName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeProductName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeProductName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeProductName_result implements org.apache.thrift.TBase<GetNodeProductName_result, GetNodeProductName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeProductName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeProductName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeProductName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeProductName_result.class, metaDataMap);
    }

    public GetNodeProductName_result() {
    }

    public GetNodeProductName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeProductName_result(GetNodeProductName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeProductName_result deepCopy() {
      return new GetNodeProductName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeProductName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeProductName_result)
        return this.equals((GetNodeProductName_result)that);
      return false;
    }

    public boolean equals(GetNodeProductName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeProductName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeProductName_result typedOther = (GetNodeProductName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeProductName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeProductName_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeProductName_resultStandardScheme getScheme() {
        return new GetNodeProductName_resultStandardScheme();
      }
    }

    private static class GetNodeProductName_resultStandardScheme extends StandardScheme<GetNodeProductName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeProductName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeProductName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeProductName_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeProductName_resultTupleScheme getScheme() {
        return new GetNodeProductName_resultTupleScheme();
      }
    }

    private static class GetNodeProductName_resultTupleScheme extends TupleScheme<GetNodeProductName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeProductName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeProductName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeName_args implements org.apache.thrift.TBase<GetNodeName_args, GetNodeName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeName_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeName_args.class, metaDataMap);
    }

    public GetNodeName_args() {
    }

    public GetNodeName_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeName_args(GetNodeName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeName_args deepCopy() {
      return new GetNodeName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeName_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeName_args)
        return this.equals((GetNodeName_args)that);
      return false;
    }

    public boolean equals(GetNodeName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeName_args typedOther = (GetNodeName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeName_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeName_argsStandardScheme getScheme() {
        return new GetNodeName_argsStandardScheme();
      }
    }

    private static class GetNodeName_argsStandardScheme extends StandardScheme<GetNodeName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeName_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeName_argsTupleScheme getScheme() {
        return new GetNodeName_argsTupleScheme();
      }
    }

    private static class GetNodeName_argsTupleScheme extends TupleScheme<GetNodeName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeName_result implements org.apache.thrift.TBase<GetNodeName_result, GetNodeName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeName_result.class, metaDataMap);
    }

    public GetNodeName_result() {
    }

    public GetNodeName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeName_result(GetNodeName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeName_result deepCopy() {
      return new GetNodeName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeName_result)
        return this.equals((GetNodeName_result)that);
      return false;
    }

    public boolean equals(GetNodeName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeName_result typedOther = (GetNodeName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeName_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeName_resultStandardScheme getScheme() {
        return new GetNodeName_resultStandardScheme();
      }
    }

    private static class GetNodeName_resultStandardScheme extends StandardScheme<GetNodeName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeName_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeName_resultTupleScheme getScheme() {
        return new GetNodeName_resultTupleScheme();
      }
    }

    private static class GetNodeName_resultTupleScheme extends TupleScheme<GetNodeName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeLocation_args implements org.apache.thrift.TBase<GetNodeLocation_args, GetNodeLocation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeLocation_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeLocation_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeLocation_args.class, metaDataMap);
    }

    public GetNodeLocation_args() {
    }

    public GetNodeLocation_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeLocation_args(GetNodeLocation_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeLocation_args deepCopy() {
      return new GetNodeLocation_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeLocation_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeLocation_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeLocation_args)
        return this.equals((GetNodeLocation_args)that);
      return false;
    }

    public boolean equals(GetNodeLocation_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeLocation_args typedOther = (GetNodeLocation_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeLocation_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeLocation_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeLocation_argsStandardScheme getScheme() {
        return new GetNodeLocation_argsStandardScheme();
      }
    }

    private static class GetNodeLocation_argsStandardScheme extends StandardScheme<GetNodeLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeLocation_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeLocation_argsTupleScheme getScheme() {
        return new GetNodeLocation_argsTupleScheme();
      }
    }

    private static class GetNodeLocation_argsTupleScheme extends TupleScheme<GetNodeLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeLocation_result implements org.apache.thrift.TBase<GetNodeLocation_result, GetNodeLocation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeLocation_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeLocation_result.class, metaDataMap);
    }

    public GetNodeLocation_result() {
    }

    public GetNodeLocation_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeLocation_result(GetNodeLocation_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeLocation_result deepCopy() {
      return new GetNodeLocation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeLocation_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeLocation_result)
        return this.equals((GetNodeLocation_result)that);
      return false;
    }

    public boolean equals(GetNodeLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeLocation_result typedOther = (GetNodeLocation_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeLocation_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeLocation_resultStandardScheme getScheme() {
        return new GetNodeLocation_resultStandardScheme();
      }
    }

    private static class GetNodeLocation_resultStandardScheme extends StandardScheme<GetNodeLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeLocation_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeLocation_resultTupleScheme getScheme() {
        return new GetNodeLocation_resultTupleScheme();
      }
    }

    private static class GetNodeLocation_resultTupleScheme extends TupleScheme<GetNodeLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeManufacturerId_args implements org.apache.thrift.TBase<GetNodeManufacturerId_args, GetNodeManufacturerId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeManufacturerId_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeManufacturerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeManufacturerId_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeManufacturerId_args.class, metaDataMap);
    }

    public GetNodeManufacturerId_args() {
    }

    public GetNodeManufacturerId_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeManufacturerId_args(GetNodeManufacturerId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeManufacturerId_args deepCopy() {
      return new GetNodeManufacturerId_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeManufacturerId_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeManufacturerId_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeManufacturerId_args)
        return this.equals((GetNodeManufacturerId_args)that);
      return false;
    }

    public boolean equals(GetNodeManufacturerId_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeManufacturerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeManufacturerId_args typedOther = (GetNodeManufacturerId_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeManufacturerId_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeManufacturerId_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerId_argsStandardScheme getScheme() {
        return new GetNodeManufacturerId_argsStandardScheme();
      }
    }

    private static class GetNodeManufacturerId_argsStandardScheme extends StandardScheme<GetNodeManufacturerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeManufacturerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeManufacturerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeManufacturerId_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerId_argsTupleScheme getScheme() {
        return new GetNodeManufacturerId_argsTupleScheme();
      }
    }

    private static class GetNodeManufacturerId_argsTupleScheme extends TupleScheme<GetNodeManufacturerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeManufacturerId_result implements org.apache.thrift.TBase<GetNodeManufacturerId_result, GetNodeManufacturerId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeManufacturerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeManufacturerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeManufacturerId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeManufacturerId_result.class, metaDataMap);
    }

    public GetNodeManufacturerId_result() {
    }

    public GetNodeManufacturerId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeManufacturerId_result(GetNodeManufacturerId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeManufacturerId_result deepCopy() {
      return new GetNodeManufacturerId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeManufacturerId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeManufacturerId_result)
        return this.equals((GetNodeManufacturerId_result)that);
      return false;
    }

    public boolean equals(GetNodeManufacturerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeManufacturerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeManufacturerId_result typedOther = (GetNodeManufacturerId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeManufacturerId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeManufacturerId_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerId_resultStandardScheme getScheme() {
        return new GetNodeManufacturerId_resultStandardScheme();
      }
    }

    private static class GetNodeManufacturerId_resultStandardScheme extends StandardScheme<GetNodeManufacturerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeManufacturerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeManufacturerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeManufacturerId_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeManufacturerId_resultTupleScheme getScheme() {
        return new GetNodeManufacturerId_resultTupleScheme();
      }
    }

    private static class GetNodeManufacturerId_resultTupleScheme extends TupleScheme<GetNodeManufacturerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeManufacturerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeProductType_args implements org.apache.thrift.TBase<GetNodeProductType_args, GetNodeProductType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeProductType_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeProductType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeProductType_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeProductType_args.class, metaDataMap);
    }

    public GetNodeProductType_args() {
    }

    public GetNodeProductType_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeProductType_args(GetNodeProductType_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeProductType_args deepCopy() {
      return new GetNodeProductType_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeProductType_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeProductType_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeProductType_args)
        return this.equals((GetNodeProductType_args)that);
      return false;
    }

    public boolean equals(GetNodeProductType_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeProductType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeProductType_args typedOther = (GetNodeProductType_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeProductType_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeProductType_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeProductType_argsStandardScheme getScheme() {
        return new GetNodeProductType_argsStandardScheme();
      }
    }

    private static class GetNodeProductType_argsStandardScheme extends StandardScheme<GetNodeProductType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeProductType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeProductType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeProductType_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeProductType_argsTupleScheme getScheme() {
        return new GetNodeProductType_argsTupleScheme();
      }
    }

    private static class GetNodeProductType_argsTupleScheme extends TupleScheme<GetNodeProductType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeProductType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeProductType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeProductType_result implements org.apache.thrift.TBase<GetNodeProductType_result, GetNodeProductType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeProductType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeProductType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeProductType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeProductType_result.class, metaDataMap);
    }

    public GetNodeProductType_result() {
    }

    public GetNodeProductType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeProductType_result(GetNodeProductType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeProductType_result deepCopy() {
      return new GetNodeProductType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeProductType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeProductType_result)
        return this.equals((GetNodeProductType_result)that);
      return false;
    }

    public boolean equals(GetNodeProductType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeProductType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeProductType_result typedOther = (GetNodeProductType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeProductType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeProductType_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeProductType_resultStandardScheme getScheme() {
        return new GetNodeProductType_resultStandardScheme();
      }
    }

    private static class GetNodeProductType_resultStandardScheme extends StandardScheme<GetNodeProductType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeProductType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeProductType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeProductType_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeProductType_resultTupleScheme getScheme() {
        return new GetNodeProductType_resultTupleScheme();
      }
    }

    private static class GetNodeProductType_resultTupleScheme extends TupleScheme<GetNodeProductType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeProductType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeProductType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeProductId_args implements org.apache.thrift.TBase<GetNodeProductId_args, GetNodeProductId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeProductId_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeProductId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeProductId_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeProductId_args.class, metaDataMap);
    }

    public GetNodeProductId_args() {
    }

    public GetNodeProductId_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeProductId_args(GetNodeProductId_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNodeProductId_args deepCopy() {
      return new GetNodeProductId_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeProductId_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeProductId_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeProductId_args)
        return this.equals((GetNodeProductId_args)that);
      return false;
    }

    public boolean equals(GetNodeProductId_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeProductId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeProductId_args typedOther = (GetNodeProductId_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeProductId_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeProductId_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeProductId_argsStandardScheme getScheme() {
        return new GetNodeProductId_argsStandardScheme();
      }
    }

    private static class GetNodeProductId_argsStandardScheme extends StandardScheme<GetNodeProductId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeProductId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeProductId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeProductId_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeProductId_argsTupleScheme getScheme() {
        return new GetNodeProductId_argsTupleScheme();
      }
    }

    private static class GetNodeProductId_argsTupleScheme extends TupleScheme<GetNodeProductId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeProductId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeProductId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeProductId_result implements org.apache.thrift.TBase<GetNodeProductId_result, GetNodeProductId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeProductId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeProductId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeProductId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeProductId_result.class, metaDataMap);
    }

    public GetNodeProductId_result() {
    }

    public GetNodeProductId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeProductId_result(GetNodeProductId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetNodeProductId_result deepCopy() {
      return new GetNodeProductId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetNodeProductId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeProductId_result)
        return this.equals((GetNodeProductId_result)that);
      return false;
    }

    public boolean equals(GetNodeProductId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeProductId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeProductId_result typedOther = (GetNodeProductId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeProductId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeProductId_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeProductId_resultStandardScheme getScheme() {
        return new GetNodeProductId_resultStandardScheme();
      }
    }

    private static class GetNodeProductId_resultStandardScheme extends StandardScheme<GetNodeProductId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeProductId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeProductId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeProductId_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeProductId_resultTupleScheme getScheme() {
        return new GetNodeProductId_resultTupleScheme();
      }
    }

    private static class GetNodeProductId_resultTupleScheme extends TupleScheme<GetNodeProductId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeProductId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeProductId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetNodeManufacturerName_args implements org.apache.thrift.TBase<SetNodeManufacturerName_args, SetNodeManufacturerName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeManufacturerName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _MANUFACTURER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_manufacturerName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeManufacturerName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeManufacturerName_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public String _manufacturerName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _MANUFACTURER_NAME((short)3, "_manufacturerName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _MANUFACTURER_NAME
            return _MANUFACTURER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._MANUFACTURER_NAME, new org.apache.thrift.meta_data.FieldMetaData("_manufacturerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeManufacturerName_args.class, metaDataMap);
    }

    public SetNodeManufacturerName_args() {
    }

    public SetNodeManufacturerName_args(
      int _homeId,
      byte _nodeId,
      String _manufacturerName)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._manufacturerName = _manufacturerName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeManufacturerName_args(SetNodeManufacturerName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      if (other.isSet_manufacturerName()) {
        this._manufacturerName = other._manufacturerName;
      }
    }

    public SetNodeManufacturerName_args deepCopy() {
      return new SetNodeManufacturerName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      this._manufacturerName = null;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeManufacturerName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeManufacturerName_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public String get_manufacturerName() {
      return this._manufacturerName;
    }

    public SetNodeManufacturerName_args set_manufacturerName(String _manufacturerName) {
      this._manufacturerName = _manufacturerName;
      return this;
    }

    public void unset_manufacturerName() {
      this._manufacturerName = null;
    }

    /** Returns true if field _manufacturerName is set (has been assigned a value) and false otherwise */
    public boolean isSet_manufacturerName() {
      return this._manufacturerName != null;
    }

    public void set_manufacturerNameIsSet(boolean value) {
      if (!value) {
        this._manufacturerName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _MANUFACTURER_NAME:
        if (value == null) {
          unset_manufacturerName();
        } else {
          set_manufacturerName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _MANUFACTURER_NAME:
        return get_manufacturerName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _MANUFACTURER_NAME:
        return isSet_manufacturerName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeManufacturerName_args)
        return this.equals((SetNodeManufacturerName_args)that);
      return false;
    }

    public boolean equals(SetNodeManufacturerName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__manufacturerName = true && this.isSet_manufacturerName();
      boolean that_present__manufacturerName = true && that.isSet_manufacturerName();
      if (this_present__manufacturerName || that_present__manufacturerName) {
        if (!(this_present__manufacturerName && that_present__manufacturerName))
          return false;
        if (!this._manufacturerName.equals(that._manufacturerName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeManufacturerName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeManufacturerName_args typedOther = (SetNodeManufacturerName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_manufacturerName()).compareTo(typedOther.isSet_manufacturerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_manufacturerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._manufacturerName, typedOther._manufacturerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeManufacturerName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_manufacturerName:");
      if (this._manufacturerName == null) {
        sb.append("null");
      } else {
        sb.append(this._manufacturerName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeManufacturerName_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeManufacturerName_argsStandardScheme getScheme() {
        return new SetNodeManufacturerName_argsStandardScheme();
      }
    }

    private static class SetNodeManufacturerName_argsStandardScheme extends StandardScheme<SetNodeManufacturerName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _MANUFACTURER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._manufacturerName = iprot.readString();
                struct.set_manufacturerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        if (struct._manufacturerName != null) {
          oprot.writeFieldBegin(_MANUFACTURER_NAME_FIELD_DESC);
          oprot.writeString(struct._manufacturerName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeManufacturerName_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeManufacturerName_argsTupleScheme getScheme() {
        return new SetNodeManufacturerName_argsTupleScheme();
      }
    }

    private static class SetNodeManufacturerName_argsTupleScheme extends TupleScheme<SetNodeManufacturerName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_manufacturerName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_manufacturerName()) {
          oprot.writeString(struct._manufacturerName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeManufacturerName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._manufacturerName = iprot.readString();
          struct.set_manufacturerNameIsSet(true);
        }
      }
    }

  }

  public static class SetNodeManufacturerName_result implements org.apache.thrift.TBase<SetNodeManufacturerName_result, SetNodeManufacturerName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeManufacturerName_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeManufacturerName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeManufacturerName_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeManufacturerName_result.class, metaDataMap);
    }

    public SetNodeManufacturerName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeManufacturerName_result(SetNodeManufacturerName_result other) {
    }

    public SetNodeManufacturerName_result deepCopy() {
      return new SetNodeManufacturerName_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeManufacturerName_result)
        return this.equals((SetNodeManufacturerName_result)that);
      return false;
    }

    public boolean equals(SetNodeManufacturerName_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeManufacturerName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeManufacturerName_result typedOther = (SetNodeManufacturerName_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeManufacturerName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeManufacturerName_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeManufacturerName_resultStandardScheme getScheme() {
        return new SetNodeManufacturerName_resultStandardScheme();
      }
    }

    private static class SetNodeManufacturerName_resultStandardScheme extends StandardScheme<SetNodeManufacturerName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeManufacturerName_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeManufacturerName_resultTupleScheme getScheme() {
        return new SetNodeManufacturerName_resultTupleScheme();
      }
    }

    private static class SetNodeManufacturerName_resultTupleScheme extends TupleScheme<SetNodeManufacturerName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeManufacturerName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetNodeProductName_args implements org.apache.thrift.TBase<SetNodeProductName_args, SetNodeProductName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeProductName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_productName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeProductName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeProductName_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public String _productName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _PRODUCT_NAME((short)3, "_productName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _PRODUCT_NAME
            return _PRODUCT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("_productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeProductName_args.class, metaDataMap);
    }

    public SetNodeProductName_args() {
    }

    public SetNodeProductName_args(
      int _homeId,
      byte _nodeId,
      String _productName)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._productName = _productName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeProductName_args(SetNodeProductName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      if (other.isSet_productName()) {
        this._productName = other._productName;
      }
    }

    public SetNodeProductName_args deepCopy() {
      return new SetNodeProductName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      this._productName = null;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeProductName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeProductName_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public String get_productName() {
      return this._productName;
    }

    public SetNodeProductName_args set_productName(String _productName) {
      this._productName = _productName;
      return this;
    }

    public void unset_productName() {
      this._productName = null;
    }

    /** Returns true if field _productName is set (has been assigned a value) and false otherwise */
    public boolean isSet_productName() {
      return this._productName != null;
    }

    public void set_productNameIsSet(boolean value) {
      if (!value) {
        this._productName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _PRODUCT_NAME:
        if (value == null) {
          unset_productName();
        } else {
          set_productName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _PRODUCT_NAME:
        return get_productName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _PRODUCT_NAME:
        return isSet_productName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeProductName_args)
        return this.equals((SetNodeProductName_args)that);
      return false;
    }

    public boolean equals(SetNodeProductName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__productName = true && this.isSet_productName();
      boolean that_present__productName = true && that.isSet_productName();
      if (this_present__productName || that_present__productName) {
        if (!(this_present__productName && that_present__productName))
          return false;
        if (!this._productName.equals(that._productName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeProductName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeProductName_args typedOther = (SetNodeProductName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_productName()).compareTo(typedOther.isSet_productName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_productName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._productName, typedOther._productName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeProductName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_productName:");
      if (this._productName == null) {
        sb.append("null");
      } else {
        sb.append(this._productName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeProductName_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeProductName_argsStandardScheme getScheme() {
        return new SetNodeProductName_argsStandardScheme();
      }
    }

    private static class SetNodeProductName_argsStandardScheme extends StandardScheme<SetNodeProductName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeProductName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _PRODUCT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._productName = iprot.readString();
                struct.set_productNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeProductName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        if (struct._productName != null) {
          oprot.writeFieldBegin(_PRODUCT_NAME_FIELD_DESC);
          oprot.writeString(struct._productName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeProductName_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeProductName_argsTupleScheme getScheme() {
        return new SetNodeProductName_argsTupleScheme();
      }
    }

    private static class SetNodeProductName_argsTupleScheme extends TupleScheme<SetNodeProductName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeProductName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_productName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_productName()) {
          oprot.writeString(struct._productName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeProductName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._productName = iprot.readString();
          struct.set_productNameIsSet(true);
        }
      }
    }

  }

  public static class SetNodeProductName_result implements org.apache.thrift.TBase<SetNodeProductName_result, SetNodeProductName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeProductName_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeProductName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeProductName_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeProductName_result.class, metaDataMap);
    }

    public SetNodeProductName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeProductName_result(SetNodeProductName_result other) {
    }

    public SetNodeProductName_result deepCopy() {
      return new SetNodeProductName_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeProductName_result)
        return this.equals((SetNodeProductName_result)that);
      return false;
    }

    public boolean equals(SetNodeProductName_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeProductName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeProductName_result typedOther = (SetNodeProductName_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeProductName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeProductName_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeProductName_resultStandardScheme getScheme() {
        return new SetNodeProductName_resultStandardScheme();
      }
    }

    private static class SetNodeProductName_resultStandardScheme extends StandardScheme<SetNodeProductName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeProductName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeProductName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeProductName_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeProductName_resultTupleScheme getScheme() {
        return new SetNodeProductName_resultTupleScheme();
      }
    }

    private static class SetNodeProductName_resultTupleScheme extends TupleScheme<SetNodeProductName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeProductName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeProductName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetNodeName_args implements org.apache.thrift.TBase<SetNodeName_args, SetNodeName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeName_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeName_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public String _nodeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _NODE_NAME((short)3, "_nodeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _NODE_NAME
            return _NODE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("_nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeName_args.class, metaDataMap);
    }

    public SetNodeName_args() {
    }

    public SetNodeName_args(
      int _homeId,
      byte _nodeId,
      String _nodeName)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._nodeName = _nodeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeName_args(SetNodeName_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      if (other.isSet_nodeName()) {
        this._nodeName = other._nodeName;
      }
    }

    public SetNodeName_args deepCopy() {
      return new SetNodeName_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      this._nodeName = null;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeName_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeName_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public String get_nodeName() {
      return this._nodeName;
    }

    public SetNodeName_args set_nodeName(String _nodeName) {
      this._nodeName = _nodeName;
      return this;
    }

    public void unset_nodeName() {
      this._nodeName = null;
    }

    /** Returns true if field _nodeName is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeName() {
      return this._nodeName != null;
    }

    public void set_nodeNameIsSet(boolean value) {
      if (!value) {
        this._nodeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _NODE_NAME:
        if (value == null) {
          unset_nodeName();
        } else {
          set_nodeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _NODE_NAME:
        return get_nodeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _NODE_NAME:
        return isSet_nodeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeName_args)
        return this.equals((SetNodeName_args)that);
      return false;
    }

    public boolean equals(SetNodeName_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__nodeName = true && this.isSet_nodeName();
      boolean that_present__nodeName = true && that.isSet_nodeName();
      if (this_present__nodeName || that_present__nodeName) {
        if (!(this_present__nodeName && that_present__nodeName))
          return false;
        if (!this._nodeName.equals(that._nodeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeName_args typedOther = (SetNodeName_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeName()).compareTo(typedOther.isSet_nodeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeName, typedOther._nodeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeName_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeName:");
      if (this._nodeName == null) {
        sb.append("null");
      } else {
        sb.append(this._nodeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeName_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeName_argsStandardScheme getScheme() {
        return new SetNodeName_argsStandardScheme();
      }
    }

    private static class SetNodeName_argsStandardScheme extends StandardScheme<SetNodeName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _NODE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._nodeName = iprot.readString();
                struct.set_nodeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        if (struct._nodeName != null) {
          oprot.writeFieldBegin(_NODE_NAME_FIELD_DESC);
          oprot.writeString(struct._nodeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeName_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeName_argsTupleScheme getScheme() {
        return new SetNodeName_argsTupleScheme();
      }
    }

    private static class SetNodeName_argsTupleScheme extends TupleScheme<SetNodeName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_nodeName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_nodeName()) {
          oprot.writeString(struct._nodeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._nodeName = iprot.readString();
          struct.set_nodeNameIsSet(true);
        }
      }
    }

  }

  public static class SetNodeName_result implements org.apache.thrift.TBase<SetNodeName_result, SetNodeName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeName_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeName_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeName_result.class, metaDataMap);
    }

    public SetNodeName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeName_result(SetNodeName_result other) {
    }

    public SetNodeName_result deepCopy() {
      return new SetNodeName_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeName_result)
        return this.equals((SetNodeName_result)that);
      return false;
    }

    public boolean equals(SetNodeName_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeName_result typedOther = (SetNodeName_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeName_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeName_resultStandardScheme getScheme() {
        return new SetNodeName_resultStandardScheme();
      }
    }

    private static class SetNodeName_resultStandardScheme extends StandardScheme<SetNodeName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeName_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeName_resultTupleScheme getScheme() {
        return new SetNodeName_resultTupleScheme();
      }
    }

    private static class SetNodeName_resultTupleScheme extends TupleScheme<SetNodeName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetNodeLocation_args implements org.apache.thrift.TBase<SetNodeLocation_args, SetNodeLocation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeLocation_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("_location", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeLocation_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public String _location; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _LOCATION((short)3, "_location");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _LOCATION
            return _LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._LOCATION, new org.apache.thrift.meta_data.FieldMetaData("_location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeLocation_args.class, metaDataMap);
    }

    public SetNodeLocation_args() {
    }

    public SetNodeLocation_args(
      int _homeId,
      byte _nodeId,
      String _location)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._location = _location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeLocation_args(SetNodeLocation_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      if (other.isSet_location()) {
        this._location = other._location;
      }
    }

    public SetNodeLocation_args deepCopy() {
      return new SetNodeLocation_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      this._location = null;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeLocation_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeLocation_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public String get_location() {
      return this._location;
    }

    public SetNodeLocation_args set_location(String _location) {
      this._location = _location;
      return this;
    }

    public void unset_location() {
      this._location = null;
    }

    /** Returns true if field _location is set (has been assigned a value) and false otherwise */
    public boolean isSet_location() {
      return this._location != null;
    }

    public void set_locationIsSet(boolean value) {
      if (!value) {
        this._location = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _LOCATION:
        if (value == null) {
          unset_location();
        } else {
          set_location((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _LOCATION:
        return get_location();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _LOCATION:
        return isSet_location();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeLocation_args)
        return this.equals((SetNodeLocation_args)that);
      return false;
    }

    public boolean equals(SetNodeLocation_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__location = true && this.isSet_location();
      boolean that_present__location = true && that.isSet_location();
      if (this_present__location || that_present__location) {
        if (!(this_present__location && that_present__location))
          return false;
        if (!this._location.equals(that._location))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeLocation_args typedOther = (SetNodeLocation_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_location()).compareTo(typedOther.isSet_location());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_location()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._location, typedOther._location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeLocation_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_location:");
      if (this._location == null) {
        sb.append("null");
      } else {
        sb.append(this._location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeLocation_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeLocation_argsStandardScheme getScheme() {
        return new SetNodeLocation_argsStandardScheme();
      }
    }

    private static class SetNodeLocation_argsStandardScheme extends StandardScheme<SetNodeLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._location = iprot.readString();
                struct.set_locationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        if (struct._location != null) {
          oprot.writeFieldBegin(_LOCATION_FIELD_DESC);
          oprot.writeString(struct._location);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeLocation_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeLocation_argsTupleScheme getScheme() {
        return new SetNodeLocation_argsTupleScheme();
      }
    }

    private static class SetNodeLocation_argsTupleScheme extends TupleScheme<SetNodeLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_location()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_location()) {
          oprot.writeString(struct._location);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._location = iprot.readString();
          struct.set_locationIsSet(true);
        }
      }
    }

  }

  public static class SetNodeLocation_result implements org.apache.thrift.TBase<SetNodeLocation_result, SetNodeLocation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeLocation_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeLocation_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeLocation_result.class, metaDataMap);
    }

    public SetNodeLocation_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeLocation_result(SetNodeLocation_result other) {
    }

    public SetNodeLocation_result deepCopy() {
      return new SetNodeLocation_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeLocation_result)
        return this.equals((SetNodeLocation_result)that);
      return false;
    }

    public boolean equals(SetNodeLocation_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeLocation_result typedOther = (SetNodeLocation_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeLocation_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeLocation_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeLocation_resultStandardScheme getScheme() {
        return new SetNodeLocation_resultStandardScheme();
      }
    }

    private static class SetNodeLocation_resultStandardScheme extends StandardScheme<SetNodeLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeLocation_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeLocation_resultTupleScheme getScheme() {
        return new SetNodeLocation_resultTupleScheme();
      }
    }

    private static class SetNodeLocation_resultTupleScheme extends TupleScheme<SetNodeLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetNodeOn_args implements org.apache.thrift.TBase<SetNodeOn_args, SetNodeOn_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeOn_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeOn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeOn_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeOn_args.class, metaDataMap);
    }

    public SetNodeOn_args() {
    }

    public SetNodeOn_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeOn_args(SetNodeOn_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public SetNodeOn_args deepCopy() {
      return new SetNodeOn_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeOn_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeOn_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeOn_args)
        return this.equals((SetNodeOn_args)that);
      return false;
    }

    public boolean equals(SetNodeOn_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeOn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeOn_args typedOther = (SetNodeOn_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeOn_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeOn_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeOn_argsStandardScheme getScheme() {
        return new SetNodeOn_argsStandardScheme();
      }
    }

    private static class SetNodeOn_argsStandardScheme extends StandardScheme<SetNodeOn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeOn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeOn_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeOn_argsTupleScheme getScheme() {
        return new SetNodeOn_argsTupleScheme();
      }
    }

    private static class SetNodeOn_argsTupleScheme extends TupleScheme<SetNodeOn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class SetNodeOn_result implements org.apache.thrift.TBase<SetNodeOn_result, SetNodeOn_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeOn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeOn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeOn_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeOn_result.class, metaDataMap);
    }

    public SetNodeOn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeOn_result(SetNodeOn_result other) {
    }

    public SetNodeOn_result deepCopy() {
      return new SetNodeOn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeOn_result)
        return this.equals((SetNodeOn_result)that);
      return false;
    }

    public boolean equals(SetNodeOn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeOn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeOn_result typedOther = (SetNodeOn_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeOn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeOn_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeOn_resultStandardScheme getScheme() {
        return new SetNodeOn_resultStandardScheme();
      }
    }

    private static class SetNodeOn_resultStandardScheme extends StandardScheme<SetNodeOn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeOn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeOn_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeOn_resultTupleScheme getScheme() {
        return new SetNodeOn_resultTupleScheme();
      }
    }

    private static class SetNodeOn_resultTupleScheme extends TupleScheme<SetNodeOn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetNodeOff_args implements org.apache.thrift.TBase<SetNodeOff_args, SetNodeOff_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeOff_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeOff_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeOff_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeOff_args.class, metaDataMap);
    }

    public SetNodeOff_args() {
    }

    public SetNodeOff_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeOff_args(SetNodeOff_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public SetNodeOff_args deepCopy() {
      return new SetNodeOff_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeOff_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeOff_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeOff_args)
        return this.equals((SetNodeOff_args)that);
      return false;
    }

    public boolean equals(SetNodeOff_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeOff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeOff_args typedOther = (SetNodeOff_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeOff_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeOff_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeOff_argsStandardScheme getScheme() {
        return new SetNodeOff_argsStandardScheme();
      }
    }

    private static class SetNodeOff_argsStandardScheme extends StandardScheme<SetNodeOff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeOff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeOff_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeOff_argsTupleScheme getScheme() {
        return new SetNodeOff_argsTupleScheme();
      }
    }

    private static class SetNodeOff_argsTupleScheme extends TupleScheme<SetNodeOff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class SetNodeOff_result implements org.apache.thrift.TBase<SetNodeOff_result, SetNodeOff_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeOff_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeOff_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeOff_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeOff_result.class, metaDataMap);
    }

    public SetNodeOff_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeOff_result(SetNodeOff_result other) {
    }

    public SetNodeOff_result deepCopy() {
      return new SetNodeOff_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeOff_result)
        return this.equals((SetNodeOff_result)that);
      return false;
    }

    public boolean equals(SetNodeOff_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeOff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeOff_result typedOther = (SetNodeOff_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeOff_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeOff_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeOff_resultStandardScheme getScheme() {
        return new SetNodeOff_resultStandardScheme();
      }
    }

    private static class SetNodeOff_resultStandardScheme extends StandardScheme<SetNodeOff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeOff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeOff_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeOff_resultTupleScheme getScheme() {
        return new SetNodeOff_resultTupleScheme();
      }
    }

    private static class SetNodeOff_resultTupleScheme extends TupleScheme<SetNodeOff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetNodeLevel_args implements org.apache.thrift.TBase<SetNodeLevel_args, SetNodeLevel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeLevel_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("_level", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeLevel_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _LEVEL((short)3, "_level");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _LEVEL
            return _LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___LEVEL_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._LEVEL, new org.apache.thrift.meta_data.FieldMetaData("_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeLevel_args.class, metaDataMap);
    }

    public SetNodeLevel_args() {
    }

    public SetNodeLevel_args(
      int _homeId,
      byte _nodeId,
      byte _level)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._level = _level;
      set_levelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeLevel_args(SetNodeLevel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._level = other._level;
    }

    public SetNodeLevel_args deepCopy() {
      return new SetNodeLevel_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_levelIsSet(false);
      this._level = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetNodeLevel_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetNodeLevel_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_level() {
      return this._level;
    }

    public SetNodeLevel_args set_level(byte _level) {
      this._level = _level;
      set_levelIsSet(true);
      return this;
    }

    public void unset_level() {
      __isset_bit_vector.clear(___LEVEL_ISSET_ID);
    }

    /** Returns true if field _level is set (has been assigned a value) and false otherwise */
    public boolean isSet_level() {
      return __isset_bit_vector.get(___LEVEL_ISSET_ID);
    }

    public void set_levelIsSet(boolean value) {
      __isset_bit_vector.set(___LEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _LEVEL:
        if (value == null) {
          unset_level();
        } else {
          set_level((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _LEVEL:
        return Byte.valueOf(get_level());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _LEVEL:
        return isSet_level();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeLevel_args)
        return this.equals((SetNodeLevel_args)that);
      return false;
    }

    public boolean equals(SetNodeLevel_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__level = true;
      boolean that_present__level = true;
      if (this_present__level || that_present__level) {
        if (!(this_present__level && that_present__level))
          return false;
        if (this._level != that._level)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeLevel_args typedOther = (SetNodeLevel_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_level()).compareTo(typedOther.isSet_level());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_level()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._level, typedOther._level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeLevel_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_level:");
      sb.append(this._level);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeLevel_argsStandardSchemeFactory implements SchemeFactory {
      public SetNodeLevel_argsStandardScheme getScheme() {
        return new SetNodeLevel_argsStandardScheme();
      }
    }

    private static class SetNodeLevel_argsStandardScheme extends StandardScheme<SetNodeLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._level = iprot.readByte();
                struct.set_levelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_LEVEL_FIELD_DESC);
        oprot.writeByte(struct._level);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeLevel_argsTupleSchemeFactory implements SchemeFactory {
      public SetNodeLevel_argsTupleScheme getScheme() {
        return new SetNodeLevel_argsTupleScheme();
      }
    }

    private static class SetNodeLevel_argsTupleScheme extends TupleScheme<SetNodeLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_level()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_level()) {
          oprot.writeByte(struct._level);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._level = iprot.readByte();
          struct.set_levelIsSet(true);
        }
      }
    }

  }

  public static class SetNodeLevel_result implements org.apache.thrift.TBase<SetNodeLevel_result, SetNodeLevel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetNodeLevel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetNodeLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetNodeLevel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetNodeLevel_result.class, metaDataMap);
    }

    public SetNodeLevel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetNodeLevel_result(SetNodeLevel_result other) {
    }

    public SetNodeLevel_result deepCopy() {
      return new SetNodeLevel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetNodeLevel_result)
        return this.equals((SetNodeLevel_result)that);
      return false;
    }

    public boolean equals(SetNodeLevel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetNodeLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetNodeLevel_result typedOther = (SetNodeLevel_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetNodeLevel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetNodeLevel_resultStandardSchemeFactory implements SchemeFactory {
      public SetNodeLevel_resultStandardScheme getScheme() {
        return new SetNodeLevel_resultStandardScheme();
      }
    }

    private static class SetNodeLevel_resultStandardScheme extends StandardScheme<SetNodeLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetNodeLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetNodeLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetNodeLevel_resultTupleSchemeFactory implements SchemeFactory {
      public SetNodeLevel_resultTupleScheme getScheme() {
        return new SetNodeLevel_resultTupleScheme();
      }
    }

    private static class SetNodeLevel_resultTupleScheme extends TupleScheme<SetNodeLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetNodeLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetNodeLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class IsNodeInfoReceived_args implements org.apache.thrift.TBase<IsNodeInfoReceived_args, IsNodeInfoReceived_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeInfoReceived_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeInfoReceived_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeInfoReceived_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeInfoReceived_args.class, metaDataMap);
    }

    public IsNodeInfoReceived_args() {
    }

    public IsNodeInfoReceived_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeInfoReceived_args(IsNodeInfoReceived_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public IsNodeInfoReceived_args deepCopy() {
      return new IsNodeInfoReceived_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public IsNodeInfoReceived_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public IsNodeInfoReceived_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeInfoReceived_args)
        return this.equals((IsNodeInfoReceived_args)that);
      return false;
    }

    public boolean equals(IsNodeInfoReceived_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeInfoReceived_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeInfoReceived_args typedOther = (IsNodeInfoReceived_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeInfoReceived_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeInfoReceived_argsStandardSchemeFactory implements SchemeFactory {
      public IsNodeInfoReceived_argsStandardScheme getScheme() {
        return new IsNodeInfoReceived_argsStandardScheme();
      }
    }

    private static class IsNodeInfoReceived_argsStandardScheme extends StandardScheme<IsNodeInfoReceived_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeInfoReceived_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeInfoReceived_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeInfoReceived_argsTupleSchemeFactory implements SchemeFactory {
      public IsNodeInfoReceived_argsTupleScheme getScheme() {
        return new IsNodeInfoReceived_argsTupleScheme();
      }
    }

    private static class IsNodeInfoReceived_argsTupleScheme extends TupleScheme<IsNodeInfoReceived_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeInfoReceived_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeInfoReceived_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class IsNodeInfoReceived_result implements org.apache.thrift.TBase<IsNodeInfoReceived_result, IsNodeInfoReceived_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsNodeInfoReceived_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsNodeInfoReceived_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsNodeInfoReceived_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsNodeInfoReceived_result.class, metaDataMap);
    }

    public IsNodeInfoReceived_result() {
    }

    public IsNodeInfoReceived_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsNodeInfoReceived_result(IsNodeInfoReceived_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsNodeInfoReceived_result deepCopy() {
      return new IsNodeInfoReceived_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsNodeInfoReceived_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsNodeInfoReceived_result)
        return this.equals((IsNodeInfoReceived_result)that);
      return false;
    }

    public boolean equals(IsNodeInfoReceived_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsNodeInfoReceived_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsNodeInfoReceived_result typedOther = (IsNodeInfoReceived_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsNodeInfoReceived_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsNodeInfoReceived_resultStandardSchemeFactory implements SchemeFactory {
      public IsNodeInfoReceived_resultStandardScheme getScheme() {
        return new IsNodeInfoReceived_resultStandardScheme();
      }
    }

    private static class IsNodeInfoReceived_resultStandardScheme extends StandardScheme<IsNodeInfoReceived_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsNodeInfoReceived_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsNodeInfoReceived_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsNodeInfoReceived_resultTupleSchemeFactory implements SchemeFactory {
      public IsNodeInfoReceived_resultTupleScheme getScheme() {
        return new IsNodeInfoReceived_resultTupleScheme();
      }
    }

    private static class IsNodeInfoReceived_resultTupleScheme extends TupleScheme<IsNodeInfoReceived_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsNodeInfoReceived_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsNodeInfoReceived_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNodeClassInformation_args implements org.apache.thrift.TBase<GetNodeClassInformation_args, GetNodeClassInformation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeClassInformation_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _COMMAND_CLASS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_commandClassId", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeClassInformation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeClassInformation_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _commandClassId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _COMMAND_CLASS_ID((short)3, "_commandClassId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _COMMAND_CLASS_ID
            return _COMMAND_CLASS_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___COMMANDCLASSID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._COMMAND_CLASS_ID, new org.apache.thrift.meta_data.FieldMetaData("_commandClassId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeClassInformation_args.class, metaDataMap);
    }

    public GetNodeClassInformation_args() {
    }

    public GetNodeClassInformation_args(
      int _homeId,
      byte _nodeId,
      byte _commandClassId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._commandClassId = _commandClassId;
      set_commandClassIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeClassInformation_args(GetNodeClassInformation_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._commandClassId = other._commandClassId;
    }

    public GetNodeClassInformation_args deepCopy() {
      return new GetNodeClassInformation_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_commandClassIdIsSet(false);
      this._commandClassId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNodeClassInformation_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNodeClassInformation_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_commandClassId() {
      return this._commandClassId;
    }

    public GetNodeClassInformation_args set_commandClassId(byte _commandClassId) {
      this._commandClassId = _commandClassId;
      set_commandClassIdIsSet(true);
      return this;
    }

    public void unset_commandClassId() {
      __isset_bit_vector.clear(___COMMANDCLASSID_ISSET_ID);
    }

    /** Returns true if field _commandClassId is set (has been assigned a value) and false otherwise */
    public boolean isSet_commandClassId() {
      return __isset_bit_vector.get(___COMMANDCLASSID_ISSET_ID);
    }

    public void set_commandClassIdIsSet(boolean value) {
      __isset_bit_vector.set(___COMMANDCLASSID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _COMMAND_CLASS_ID:
        if (value == null) {
          unset_commandClassId();
        } else {
          set_commandClassId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _COMMAND_CLASS_ID:
        return Byte.valueOf(get_commandClassId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _COMMAND_CLASS_ID:
        return isSet_commandClassId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeClassInformation_args)
        return this.equals((GetNodeClassInformation_args)that);
      return false;
    }

    public boolean equals(GetNodeClassInformation_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__commandClassId = true;
      boolean that_present__commandClassId = true;
      if (this_present__commandClassId || that_present__commandClassId) {
        if (!(this_present__commandClassId && that_present__commandClassId))
          return false;
        if (this._commandClassId != that._commandClassId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeClassInformation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeClassInformation_args typedOther = (GetNodeClassInformation_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_commandClassId()).compareTo(typedOther.isSet_commandClassId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_commandClassId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._commandClassId, typedOther._commandClassId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeClassInformation_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_commandClassId:");
      sb.append(this._commandClassId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeClassInformation_argsStandardSchemeFactory implements SchemeFactory {
      public GetNodeClassInformation_argsStandardScheme getScheme() {
        return new GetNodeClassInformation_argsStandardScheme();
      }
    }

    private static class GetNodeClassInformation_argsStandardScheme extends StandardScheme<GetNodeClassInformation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeClassInformation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _COMMAND_CLASS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._commandClassId = iprot.readByte();
                struct.set_commandClassIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeClassInformation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_COMMAND_CLASS_ID_FIELD_DESC);
        oprot.writeByte(struct._commandClassId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeClassInformation_argsTupleSchemeFactory implements SchemeFactory {
      public GetNodeClassInformation_argsTupleScheme getScheme() {
        return new GetNodeClassInformation_argsTupleScheme();
      }
    }

    private static class GetNodeClassInformation_argsTupleScheme extends TupleScheme<GetNodeClassInformation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeClassInformation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_commandClassId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_commandClassId()) {
          oprot.writeByte(struct._commandClassId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeClassInformation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._commandClassId = iprot.readByte();
          struct.set_commandClassIdIsSet(true);
        }
      }
    }

  }

  public static class GetNodeClassInformation_result implements org.apache.thrift.TBase<GetNodeClassInformation_result, GetNodeClassInformation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNodeClassInformation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNodeClassInformation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNodeClassInformation_resultTupleSchemeFactory());
    }

    public Bool_GetNodeClassInformation success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_GetNodeClassInformation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNodeClassInformation_result.class, metaDataMap);
    }

    public GetNodeClassInformation_result() {
    }

    public GetNodeClassInformation_result(
      Bool_GetNodeClassInformation success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNodeClassInformation_result(GetNodeClassInformation_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_GetNodeClassInformation(other.success);
      }
    }

    public GetNodeClassInformation_result deepCopy() {
      return new GetNodeClassInformation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_GetNodeClassInformation getSuccess() {
      return this.success;
    }

    public GetNodeClassInformation_result setSuccess(Bool_GetNodeClassInformation success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_GetNodeClassInformation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNodeClassInformation_result)
        return this.equals((GetNodeClassInformation_result)that);
      return false;
    }

    public boolean equals(GetNodeClassInformation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNodeClassInformation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNodeClassInformation_result typedOther = (GetNodeClassInformation_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNodeClassInformation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNodeClassInformation_resultStandardSchemeFactory implements SchemeFactory {
      public GetNodeClassInformation_resultStandardScheme getScheme() {
        return new GetNodeClassInformation_resultStandardScheme();
      }
    }

    private static class GetNodeClassInformation_resultStandardScheme extends StandardScheme<GetNodeClassInformation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNodeClassInformation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_GetNodeClassInformation();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNodeClassInformation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNodeClassInformation_resultTupleSchemeFactory implements SchemeFactory {
      public GetNodeClassInformation_resultTupleScheme getScheme() {
        return new GetNodeClassInformation_resultTupleScheme();
      }
    }

    private static class GetNodeClassInformation_resultTupleScheme extends TupleScheme<GetNodeClassInformation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNodeClassInformation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNodeClassInformation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_GetNodeClassInformation();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueLabel_args implements org.apache.thrift.TBase<GetValueLabel_args, GetValueLabel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueLabel_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueLabel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueLabel_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueLabel_args.class, metaDataMap);
    }

    public GetValueLabel_args() {
    }

    public GetValueLabel_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueLabel_args(GetValueLabel_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueLabel_args deepCopy() {
      return new GetValueLabel_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueLabel_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueLabel_args)
        return this.equals((GetValueLabel_args)that);
      return false;
    }

    public boolean equals(GetValueLabel_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueLabel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueLabel_args typedOther = (GetValueLabel_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueLabel_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueLabel_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueLabel_argsStandardScheme getScheme() {
        return new GetValueLabel_argsStandardScheme();
      }
    }

    private static class GetValueLabel_argsStandardScheme extends StandardScheme<GetValueLabel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueLabel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueLabel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueLabel_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueLabel_argsTupleScheme getScheme() {
        return new GetValueLabel_argsTupleScheme();
      }
    }

    private static class GetValueLabel_argsTupleScheme extends TupleScheme<GetValueLabel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueLabel_result implements org.apache.thrift.TBase<GetValueLabel_result, GetValueLabel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueLabel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueLabel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueLabel_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueLabel_result.class, metaDataMap);
    }

    public GetValueLabel_result() {
    }

    public GetValueLabel_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueLabel_result(GetValueLabel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetValueLabel_result deepCopy() {
      return new GetValueLabel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetValueLabel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueLabel_result)
        return this.equals((GetValueLabel_result)that);
      return false;
    }

    public boolean equals(GetValueLabel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueLabel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueLabel_result typedOther = (GetValueLabel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueLabel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueLabel_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueLabel_resultStandardScheme getScheme() {
        return new GetValueLabel_resultStandardScheme();
      }
    }

    private static class GetValueLabel_resultStandardScheme extends StandardScheme<GetValueLabel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueLabel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueLabel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueLabel_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueLabel_resultTupleScheme getScheme() {
        return new GetValueLabel_resultTupleScheme();
      }
    }

    private static class GetValueLabel_resultTupleScheme extends TupleScheme<GetValueLabel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValueLabel_args implements org.apache.thrift.TBase<SetValueLabel_args, SetValueLabel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueLabel_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueLabel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueLabel_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueLabel_args.class, metaDataMap);
    }

    public SetValueLabel_args() {
    }

    public SetValueLabel_args(
      RemoteValueID _id,
      String _value)
    {
      this();
      this._id = _id;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueLabel_args(SetValueLabel_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetValueLabel_args deepCopy() {
      return new SetValueLabel_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      this._value = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValueLabel_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public SetValueLabel_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueLabel_args)
        return this.equals((SetValueLabel_args)that);
      return false;
    }

    public boolean equals(SetValueLabel_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueLabel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueLabel_args typedOther = (SetValueLabel_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueLabel_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueLabel_argsStandardSchemeFactory implements SchemeFactory {
      public SetValueLabel_argsStandardScheme getScheme() {
        return new SetValueLabel_argsStandardScheme();
      }
    }

    private static class SetValueLabel_argsStandardScheme extends StandardScheme<SetValueLabel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueLabel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueLabel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueLabel_argsTupleSchemeFactory implements SchemeFactory {
      public SetValueLabel_argsTupleScheme getScheme() {
        return new SetValueLabel_argsTupleScheme();
      }
    }

    private static class SetValueLabel_argsTupleScheme extends TupleScheme<SetValueLabel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValueLabel_result implements org.apache.thrift.TBase<SetValueLabel_result, SetValueLabel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueLabel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueLabel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueLabel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueLabel_result.class, metaDataMap);
    }

    public SetValueLabel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueLabel_result(SetValueLabel_result other) {
    }

    public SetValueLabel_result deepCopy() {
      return new SetValueLabel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueLabel_result)
        return this.equals((SetValueLabel_result)that);
      return false;
    }

    public boolean equals(SetValueLabel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueLabel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueLabel_result typedOther = (SetValueLabel_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueLabel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueLabel_resultStandardSchemeFactory implements SchemeFactory {
      public SetValueLabel_resultStandardScheme getScheme() {
        return new SetValueLabel_resultStandardScheme();
      }
    }

    private static class SetValueLabel_resultStandardScheme extends StandardScheme<SetValueLabel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueLabel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueLabel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueLabel_resultTupleSchemeFactory implements SchemeFactory {
      public SetValueLabel_resultTupleScheme getScheme() {
        return new SetValueLabel_resultTupleScheme();
      }
    }

    private static class SetValueLabel_resultTupleScheme extends TupleScheme<SetValueLabel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetValueUnits_args implements org.apache.thrift.TBase<GetValueUnits_args, GetValueUnits_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueUnits_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueUnits_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueUnits_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueUnits_args.class, metaDataMap);
    }

    public GetValueUnits_args() {
    }

    public GetValueUnits_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueUnits_args(GetValueUnits_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueUnits_args deepCopy() {
      return new GetValueUnits_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueUnits_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueUnits_args)
        return this.equals((GetValueUnits_args)that);
      return false;
    }

    public boolean equals(GetValueUnits_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueUnits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueUnits_args typedOther = (GetValueUnits_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueUnits_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueUnits_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueUnits_argsStandardScheme getScheme() {
        return new GetValueUnits_argsStandardScheme();
      }
    }

    private static class GetValueUnits_argsStandardScheme extends StandardScheme<GetValueUnits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueUnits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueUnits_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueUnits_argsTupleScheme getScheme() {
        return new GetValueUnits_argsTupleScheme();
      }
    }

    private static class GetValueUnits_argsTupleScheme extends TupleScheme<GetValueUnits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueUnits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueUnits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueUnits_result implements org.apache.thrift.TBase<GetValueUnits_result, GetValueUnits_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueUnits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueUnits_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueUnits_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueUnits_result.class, metaDataMap);
    }

    public GetValueUnits_result() {
    }

    public GetValueUnits_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueUnits_result(GetValueUnits_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetValueUnits_result deepCopy() {
      return new GetValueUnits_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetValueUnits_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueUnits_result)
        return this.equals((GetValueUnits_result)that);
      return false;
    }

    public boolean equals(GetValueUnits_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueUnits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueUnits_result typedOther = (GetValueUnits_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueUnits_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueUnits_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueUnits_resultStandardScheme getScheme() {
        return new GetValueUnits_resultStandardScheme();
      }
    }

    private static class GetValueUnits_resultStandardScheme extends StandardScheme<GetValueUnits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueUnits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueUnits_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueUnits_resultTupleScheme getScheme() {
        return new GetValueUnits_resultTupleScheme();
      }
    }

    private static class GetValueUnits_resultTupleScheme extends TupleScheme<GetValueUnits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueUnits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueUnits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValueUnits_args implements org.apache.thrift.TBase<SetValueUnits_args, SetValueUnits_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueUnits_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueUnits_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueUnits_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueUnits_args.class, metaDataMap);
    }

    public SetValueUnits_args() {
    }

    public SetValueUnits_args(
      RemoteValueID _id,
      String _value)
    {
      this();
      this._id = _id;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueUnits_args(SetValueUnits_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetValueUnits_args deepCopy() {
      return new SetValueUnits_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      this._value = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValueUnits_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public SetValueUnits_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueUnits_args)
        return this.equals((SetValueUnits_args)that);
      return false;
    }

    public boolean equals(SetValueUnits_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueUnits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueUnits_args typedOther = (SetValueUnits_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueUnits_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueUnits_argsStandardSchemeFactory implements SchemeFactory {
      public SetValueUnits_argsStandardScheme getScheme() {
        return new SetValueUnits_argsStandardScheme();
      }
    }

    private static class SetValueUnits_argsStandardScheme extends StandardScheme<SetValueUnits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueUnits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueUnits_argsTupleSchemeFactory implements SchemeFactory {
      public SetValueUnits_argsTupleScheme getScheme() {
        return new SetValueUnits_argsTupleScheme();
      }
    }

    private static class SetValueUnits_argsTupleScheme extends TupleScheme<SetValueUnits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueUnits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueUnits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValueUnits_result implements org.apache.thrift.TBase<SetValueUnits_result, SetValueUnits_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueUnits_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueUnits_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueUnits_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueUnits_result.class, metaDataMap);
    }

    public SetValueUnits_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueUnits_result(SetValueUnits_result other) {
    }

    public SetValueUnits_result deepCopy() {
      return new SetValueUnits_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueUnits_result)
        return this.equals((SetValueUnits_result)that);
      return false;
    }

    public boolean equals(SetValueUnits_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueUnits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueUnits_result typedOther = (SetValueUnits_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueUnits_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueUnits_resultStandardSchemeFactory implements SchemeFactory {
      public SetValueUnits_resultStandardScheme getScheme() {
        return new SetValueUnits_resultStandardScheme();
      }
    }

    private static class SetValueUnits_resultStandardScheme extends StandardScheme<SetValueUnits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueUnits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueUnits_resultTupleSchemeFactory implements SchemeFactory {
      public SetValueUnits_resultTupleScheme getScheme() {
        return new SetValueUnits_resultTupleScheme();
      }
    }

    private static class SetValueUnits_resultTupleScheme extends TupleScheme<SetValueUnits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueUnits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueUnits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetValueHelp_args implements org.apache.thrift.TBase<GetValueHelp_args, GetValueHelp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueHelp_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueHelp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueHelp_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueHelp_args.class, metaDataMap);
    }

    public GetValueHelp_args() {
    }

    public GetValueHelp_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueHelp_args(GetValueHelp_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueHelp_args deepCopy() {
      return new GetValueHelp_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueHelp_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueHelp_args)
        return this.equals((GetValueHelp_args)that);
      return false;
    }

    public boolean equals(GetValueHelp_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueHelp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueHelp_args typedOther = (GetValueHelp_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueHelp_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueHelp_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueHelp_argsStandardScheme getScheme() {
        return new GetValueHelp_argsStandardScheme();
      }
    }

    private static class GetValueHelp_argsStandardScheme extends StandardScheme<GetValueHelp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueHelp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueHelp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueHelp_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueHelp_argsTupleScheme getScheme() {
        return new GetValueHelp_argsTupleScheme();
      }
    }

    private static class GetValueHelp_argsTupleScheme extends TupleScheme<GetValueHelp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueHelp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueHelp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueHelp_result implements org.apache.thrift.TBase<GetValueHelp_result, GetValueHelp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueHelp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueHelp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueHelp_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueHelp_result.class, metaDataMap);
    }

    public GetValueHelp_result() {
    }

    public GetValueHelp_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueHelp_result(GetValueHelp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetValueHelp_result deepCopy() {
      return new GetValueHelp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetValueHelp_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueHelp_result)
        return this.equals((GetValueHelp_result)that);
      return false;
    }

    public boolean equals(GetValueHelp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueHelp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueHelp_result typedOther = (GetValueHelp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueHelp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueHelp_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueHelp_resultStandardScheme getScheme() {
        return new GetValueHelp_resultStandardScheme();
      }
    }

    private static class GetValueHelp_resultStandardScheme extends StandardScheme<GetValueHelp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueHelp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueHelp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueHelp_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueHelp_resultTupleScheme getScheme() {
        return new GetValueHelp_resultTupleScheme();
      }
    }

    private static class GetValueHelp_resultTupleScheme extends TupleScheme<GetValueHelp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueHelp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueHelp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValueHelp_args implements org.apache.thrift.TBase<SetValueHelp_args, SetValueHelp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueHelp_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueHelp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueHelp_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueHelp_args.class, metaDataMap);
    }

    public SetValueHelp_args() {
    }

    public SetValueHelp_args(
      RemoteValueID _id,
      String _value)
    {
      this();
      this._id = _id;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueHelp_args(SetValueHelp_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetValueHelp_args deepCopy() {
      return new SetValueHelp_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      this._value = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValueHelp_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public SetValueHelp_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueHelp_args)
        return this.equals((SetValueHelp_args)that);
      return false;
    }

    public boolean equals(SetValueHelp_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueHelp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueHelp_args typedOther = (SetValueHelp_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueHelp_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueHelp_argsStandardSchemeFactory implements SchemeFactory {
      public SetValueHelp_argsStandardScheme getScheme() {
        return new SetValueHelp_argsStandardScheme();
      }
    }

    private static class SetValueHelp_argsStandardScheme extends StandardScheme<SetValueHelp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueHelp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueHelp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueHelp_argsTupleSchemeFactory implements SchemeFactory {
      public SetValueHelp_argsTupleScheme getScheme() {
        return new SetValueHelp_argsTupleScheme();
      }
    }

    private static class SetValueHelp_argsTupleScheme extends TupleScheme<SetValueHelp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueHelp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueHelp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValueHelp_result implements org.apache.thrift.TBase<SetValueHelp_result, SetValueHelp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueHelp_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueHelp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueHelp_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueHelp_result.class, metaDataMap);
    }

    public SetValueHelp_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueHelp_result(SetValueHelp_result other) {
    }

    public SetValueHelp_result deepCopy() {
      return new SetValueHelp_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueHelp_result)
        return this.equals((SetValueHelp_result)that);
      return false;
    }

    public boolean equals(SetValueHelp_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueHelp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueHelp_result typedOther = (SetValueHelp_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueHelp_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueHelp_resultStandardSchemeFactory implements SchemeFactory {
      public SetValueHelp_resultStandardScheme getScheme() {
        return new SetValueHelp_resultStandardScheme();
      }
    }

    private static class SetValueHelp_resultStandardScheme extends StandardScheme<SetValueHelp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueHelp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueHelp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueHelp_resultTupleSchemeFactory implements SchemeFactory {
      public SetValueHelp_resultTupleScheme getScheme() {
        return new SetValueHelp_resultTupleScheme();
      }
    }

    private static class SetValueHelp_resultTupleScheme extends TupleScheme<SetValueHelp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueHelp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueHelp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetValueMin_args implements org.apache.thrift.TBase<GetValueMin_args, GetValueMin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueMin_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueMin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueMin_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueMin_args.class, metaDataMap);
    }

    public GetValueMin_args() {
    }

    public GetValueMin_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueMin_args(GetValueMin_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueMin_args deepCopy() {
      return new GetValueMin_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueMin_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueMin_args)
        return this.equals((GetValueMin_args)that);
      return false;
    }

    public boolean equals(GetValueMin_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueMin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueMin_args typedOther = (GetValueMin_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueMin_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueMin_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueMin_argsStandardScheme getScheme() {
        return new GetValueMin_argsStandardScheme();
      }
    }

    private static class GetValueMin_argsStandardScheme extends StandardScheme<GetValueMin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueMin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueMin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueMin_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueMin_argsTupleScheme getScheme() {
        return new GetValueMin_argsTupleScheme();
      }
    }

    private static class GetValueMin_argsTupleScheme extends TupleScheme<GetValueMin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueMin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueMin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueMin_result implements org.apache.thrift.TBase<GetValueMin_result, GetValueMin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueMin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueMin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueMin_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueMin_result.class, metaDataMap);
    }

    public GetValueMin_result() {
    }

    public GetValueMin_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueMin_result(GetValueMin_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetValueMin_result deepCopy() {
      return new GetValueMin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public GetValueMin_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueMin_result)
        return this.equals((GetValueMin_result)that);
      return false;
    }

    public boolean equals(GetValueMin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueMin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueMin_result typedOther = (GetValueMin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueMin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueMin_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueMin_resultStandardScheme getScheme() {
        return new GetValueMin_resultStandardScheme();
      }
    }

    private static class GetValueMin_resultStandardScheme extends StandardScheme<GetValueMin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueMin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueMin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueMin_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueMin_resultTupleScheme getScheme() {
        return new GetValueMin_resultTupleScheme();
      }
    }

    private static class GetValueMin_resultTupleScheme extends TupleScheme<GetValueMin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueMin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueMin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueMax_args implements org.apache.thrift.TBase<GetValueMax_args, GetValueMax_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueMax_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueMax_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueMax_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueMax_args.class, metaDataMap);
    }

    public GetValueMax_args() {
    }

    public GetValueMax_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueMax_args(GetValueMax_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueMax_args deepCopy() {
      return new GetValueMax_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueMax_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueMax_args)
        return this.equals((GetValueMax_args)that);
      return false;
    }

    public boolean equals(GetValueMax_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueMax_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueMax_args typedOther = (GetValueMax_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueMax_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueMax_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueMax_argsStandardScheme getScheme() {
        return new GetValueMax_argsStandardScheme();
      }
    }

    private static class GetValueMax_argsStandardScheme extends StandardScheme<GetValueMax_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueMax_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueMax_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueMax_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueMax_argsTupleScheme getScheme() {
        return new GetValueMax_argsTupleScheme();
      }
    }

    private static class GetValueMax_argsTupleScheme extends TupleScheme<GetValueMax_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueMax_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueMax_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueMax_result implements org.apache.thrift.TBase<GetValueMax_result, GetValueMax_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueMax_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueMax_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueMax_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueMax_result.class, metaDataMap);
    }

    public GetValueMax_result() {
    }

    public GetValueMax_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueMax_result(GetValueMax_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetValueMax_result deepCopy() {
      return new GetValueMax_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public GetValueMax_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueMax_result)
        return this.equals((GetValueMax_result)that);
      return false;
    }

    public boolean equals(GetValueMax_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueMax_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueMax_result typedOther = (GetValueMax_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueMax_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueMax_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueMax_resultStandardScheme getScheme() {
        return new GetValueMax_resultStandardScheme();
      }
    }

    private static class GetValueMax_resultStandardScheme extends StandardScheme<GetValueMax_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueMax_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueMax_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueMax_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueMax_resultTupleScheme getScheme() {
        return new GetValueMax_resultTupleScheme();
      }
    }

    private static class GetValueMax_resultTupleScheme extends TupleScheme<GetValueMax_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueMax_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueMax_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsValueReadOnly_args implements org.apache.thrift.TBase<IsValueReadOnly_args, IsValueReadOnly_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValueReadOnly_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValueReadOnly_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValueReadOnly_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValueReadOnly_args.class, metaDataMap);
    }

    public IsValueReadOnly_args() {
    }

    public IsValueReadOnly_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValueReadOnly_args(IsValueReadOnly_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public IsValueReadOnly_args deepCopy() {
      return new IsValueReadOnly_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public IsValueReadOnly_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValueReadOnly_args)
        return this.equals((IsValueReadOnly_args)that);
      return false;
    }

    public boolean equals(IsValueReadOnly_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValueReadOnly_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValueReadOnly_args typedOther = (IsValueReadOnly_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValueReadOnly_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValueReadOnly_argsStandardSchemeFactory implements SchemeFactory {
      public IsValueReadOnly_argsStandardScheme getScheme() {
        return new IsValueReadOnly_argsStandardScheme();
      }
    }

    private static class IsValueReadOnly_argsStandardScheme extends StandardScheme<IsValueReadOnly_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValueReadOnly_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValueReadOnly_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValueReadOnly_argsTupleSchemeFactory implements SchemeFactory {
      public IsValueReadOnly_argsTupleScheme getScheme() {
        return new IsValueReadOnly_argsTupleScheme();
      }
    }

    private static class IsValueReadOnly_argsTupleScheme extends TupleScheme<IsValueReadOnly_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValueReadOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValueReadOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class IsValueReadOnly_result implements org.apache.thrift.TBase<IsValueReadOnly_result, IsValueReadOnly_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValueReadOnly_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValueReadOnly_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValueReadOnly_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValueReadOnly_result.class, metaDataMap);
    }

    public IsValueReadOnly_result() {
    }

    public IsValueReadOnly_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValueReadOnly_result(IsValueReadOnly_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsValueReadOnly_result deepCopy() {
      return new IsValueReadOnly_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsValueReadOnly_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValueReadOnly_result)
        return this.equals((IsValueReadOnly_result)that);
      return false;
    }

    public boolean equals(IsValueReadOnly_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValueReadOnly_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValueReadOnly_result typedOther = (IsValueReadOnly_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValueReadOnly_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValueReadOnly_resultStandardSchemeFactory implements SchemeFactory {
      public IsValueReadOnly_resultStandardScheme getScheme() {
        return new IsValueReadOnly_resultStandardScheme();
      }
    }

    private static class IsValueReadOnly_resultStandardScheme extends StandardScheme<IsValueReadOnly_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValueReadOnly_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValueReadOnly_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValueReadOnly_resultTupleSchemeFactory implements SchemeFactory {
      public IsValueReadOnly_resultTupleScheme getScheme() {
        return new IsValueReadOnly_resultTupleScheme();
      }
    }

    private static class IsValueReadOnly_resultTupleScheme extends TupleScheme<IsValueReadOnly_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValueReadOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValueReadOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsValueWriteOnly_args implements org.apache.thrift.TBase<IsValueWriteOnly_args, IsValueWriteOnly_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValueWriteOnly_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValueWriteOnly_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValueWriteOnly_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValueWriteOnly_args.class, metaDataMap);
    }

    public IsValueWriteOnly_args() {
    }

    public IsValueWriteOnly_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValueWriteOnly_args(IsValueWriteOnly_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public IsValueWriteOnly_args deepCopy() {
      return new IsValueWriteOnly_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public IsValueWriteOnly_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValueWriteOnly_args)
        return this.equals((IsValueWriteOnly_args)that);
      return false;
    }

    public boolean equals(IsValueWriteOnly_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValueWriteOnly_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValueWriteOnly_args typedOther = (IsValueWriteOnly_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValueWriteOnly_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValueWriteOnly_argsStandardSchemeFactory implements SchemeFactory {
      public IsValueWriteOnly_argsStandardScheme getScheme() {
        return new IsValueWriteOnly_argsStandardScheme();
      }
    }

    private static class IsValueWriteOnly_argsStandardScheme extends StandardScheme<IsValueWriteOnly_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValueWriteOnly_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValueWriteOnly_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValueWriteOnly_argsTupleSchemeFactory implements SchemeFactory {
      public IsValueWriteOnly_argsTupleScheme getScheme() {
        return new IsValueWriteOnly_argsTupleScheme();
      }
    }

    private static class IsValueWriteOnly_argsTupleScheme extends TupleScheme<IsValueWriteOnly_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValueWriteOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValueWriteOnly_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class IsValueWriteOnly_result implements org.apache.thrift.TBase<IsValueWriteOnly_result, IsValueWriteOnly_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValueWriteOnly_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValueWriteOnly_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValueWriteOnly_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValueWriteOnly_result.class, metaDataMap);
    }

    public IsValueWriteOnly_result() {
    }

    public IsValueWriteOnly_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValueWriteOnly_result(IsValueWriteOnly_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsValueWriteOnly_result deepCopy() {
      return new IsValueWriteOnly_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsValueWriteOnly_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValueWriteOnly_result)
        return this.equals((IsValueWriteOnly_result)that);
      return false;
    }

    public boolean equals(IsValueWriteOnly_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValueWriteOnly_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValueWriteOnly_result typedOther = (IsValueWriteOnly_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValueWriteOnly_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValueWriteOnly_resultStandardSchemeFactory implements SchemeFactory {
      public IsValueWriteOnly_resultStandardScheme getScheme() {
        return new IsValueWriteOnly_resultStandardScheme();
      }
    }

    private static class IsValueWriteOnly_resultStandardScheme extends StandardScheme<IsValueWriteOnly_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValueWriteOnly_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValueWriteOnly_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValueWriteOnly_resultTupleSchemeFactory implements SchemeFactory {
      public IsValueWriteOnly_resultTupleScheme getScheme() {
        return new IsValueWriteOnly_resultTupleScheme();
      }
    }

    private static class IsValueWriteOnly_resultTupleScheme extends TupleScheme<IsValueWriteOnly_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValueWriteOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValueWriteOnly_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsValueSet_args implements org.apache.thrift.TBase<IsValueSet_args, IsValueSet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValueSet_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValueSet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValueSet_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValueSet_args.class, metaDataMap);
    }

    public IsValueSet_args() {
    }

    public IsValueSet_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValueSet_args(IsValueSet_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public IsValueSet_args deepCopy() {
      return new IsValueSet_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public IsValueSet_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValueSet_args)
        return this.equals((IsValueSet_args)that);
      return false;
    }

    public boolean equals(IsValueSet_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValueSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValueSet_args typedOther = (IsValueSet_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValueSet_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValueSet_argsStandardSchemeFactory implements SchemeFactory {
      public IsValueSet_argsStandardScheme getScheme() {
        return new IsValueSet_argsStandardScheme();
      }
    }

    private static class IsValueSet_argsStandardScheme extends StandardScheme<IsValueSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValueSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValueSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValueSet_argsTupleSchemeFactory implements SchemeFactory {
      public IsValueSet_argsTupleScheme getScheme() {
        return new IsValueSet_argsTupleScheme();
      }
    }

    private static class IsValueSet_argsTupleScheme extends TupleScheme<IsValueSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValueSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValueSet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class IsValueSet_result implements org.apache.thrift.TBase<IsValueSet_result, IsValueSet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValueSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValueSet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValueSet_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValueSet_result.class, metaDataMap);
    }

    public IsValueSet_result() {
    }

    public IsValueSet_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValueSet_result(IsValueSet_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsValueSet_result deepCopy() {
      return new IsValueSet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsValueSet_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValueSet_result)
        return this.equals((IsValueSet_result)that);
      return false;
    }

    public boolean equals(IsValueSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValueSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValueSet_result typedOther = (IsValueSet_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValueSet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValueSet_resultStandardSchemeFactory implements SchemeFactory {
      public IsValueSet_resultStandardScheme getScheme() {
        return new IsValueSet_resultStandardScheme();
      }
    }

    private static class IsValueSet_resultStandardScheme extends StandardScheme<IsValueSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValueSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValueSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValueSet_resultTupleSchemeFactory implements SchemeFactory {
      public IsValueSet_resultTupleScheme getScheme() {
        return new IsValueSet_resultTupleScheme();
      }
    }

    private static class IsValueSet_resultTupleScheme extends TupleScheme<IsValueSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValueSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValueSet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsValuePolled_args implements org.apache.thrift.TBase<IsValuePolled_args, IsValuePolled_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValuePolled_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValuePolled_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValuePolled_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValuePolled_args.class, metaDataMap);
    }

    public IsValuePolled_args() {
    }

    public IsValuePolled_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValuePolled_args(IsValuePolled_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public IsValuePolled_args deepCopy() {
      return new IsValuePolled_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public IsValuePolled_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValuePolled_args)
        return this.equals((IsValuePolled_args)that);
      return false;
    }

    public boolean equals(IsValuePolled_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValuePolled_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValuePolled_args typedOther = (IsValuePolled_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValuePolled_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValuePolled_argsStandardSchemeFactory implements SchemeFactory {
      public IsValuePolled_argsStandardScheme getScheme() {
        return new IsValuePolled_argsStandardScheme();
      }
    }

    private static class IsValuePolled_argsStandardScheme extends StandardScheme<IsValuePolled_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValuePolled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValuePolled_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValuePolled_argsTupleSchemeFactory implements SchemeFactory {
      public IsValuePolled_argsTupleScheme getScheme() {
        return new IsValuePolled_argsTupleScheme();
      }
    }

    private static class IsValuePolled_argsTupleScheme extends TupleScheme<IsValuePolled_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValuePolled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValuePolled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class IsValuePolled_result implements org.apache.thrift.TBase<IsValuePolled_result, IsValuePolled_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsValuePolled_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsValuePolled_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsValuePolled_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsValuePolled_result.class, metaDataMap);
    }

    public IsValuePolled_result() {
    }

    public IsValuePolled_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsValuePolled_result(IsValuePolled_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public IsValuePolled_result deepCopy() {
      return new IsValuePolled_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public IsValuePolled_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsValuePolled_result)
        return this.equals((IsValuePolled_result)that);
      return false;
    }

    public boolean equals(IsValuePolled_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsValuePolled_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsValuePolled_result typedOther = (IsValuePolled_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsValuePolled_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsValuePolled_resultStandardSchemeFactory implements SchemeFactory {
      public IsValuePolled_resultStandardScheme getScheme() {
        return new IsValuePolled_resultStandardScheme();
      }
    }

    private static class IsValuePolled_resultStandardScheme extends StandardScheme<IsValuePolled_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsValuePolled_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsValuePolled_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsValuePolled_resultTupleSchemeFactory implements SchemeFactory {
      public IsValuePolled_resultTupleScheme getScheme() {
        return new IsValuePolled_resultTupleScheme();
      }
    }

    private static class IsValuePolled_resultTupleScheme extends TupleScheme<IsValuePolled_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsValuePolled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsValuePolled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsBool_args implements org.apache.thrift.TBase<GetValueAsBool_args, GetValueAsBool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsBool_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsBool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsBool_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsBool_args.class, metaDataMap);
    }

    public GetValueAsBool_args() {
    }

    public GetValueAsBool_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsBool_args(GetValueAsBool_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueAsBool_args deepCopy() {
      return new GetValueAsBool_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueAsBool_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsBool_args)
        return this.equals((GetValueAsBool_args)that);
      return false;
    }

    public boolean equals(GetValueAsBool_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsBool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsBool_args typedOther = (GetValueAsBool_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsBool_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsBool_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueAsBool_argsStandardScheme getScheme() {
        return new GetValueAsBool_argsStandardScheme();
      }
    }

    private static class GetValueAsBool_argsStandardScheme extends StandardScheme<GetValueAsBool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsBool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsBool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsBool_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueAsBool_argsTupleScheme getScheme() {
        return new GetValueAsBool_argsTupleScheme();
      }
    }

    private static class GetValueAsBool_argsTupleScheme extends TupleScheme<GetValueAsBool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsBool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsBool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsBool_result implements org.apache.thrift.TBase<GetValueAsBool_result, GetValueAsBool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsBool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsBool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsBool_resultTupleSchemeFactory());
    }

    public Bool_Bool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Bool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsBool_result.class, metaDataMap);
    }

    public GetValueAsBool_result() {
    }

    public GetValueAsBool_result(
      Bool_Bool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsBool_result(GetValueAsBool_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Bool(other.success);
      }
    }

    public GetValueAsBool_result deepCopy() {
      return new GetValueAsBool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Bool getSuccess() {
      return this.success;
    }

    public GetValueAsBool_result setSuccess(Bool_Bool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Bool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsBool_result)
        return this.equals((GetValueAsBool_result)that);
      return false;
    }

    public boolean equals(GetValueAsBool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsBool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsBool_result typedOther = (GetValueAsBool_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsBool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsBool_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueAsBool_resultStandardScheme getScheme() {
        return new GetValueAsBool_resultStandardScheme();
      }
    }

    private static class GetValueAsBool_resultStandardScheme extends StandardScheme<GetValueAsBool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsBool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Bool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsBool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsBool_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueAsBool_resultTupleScheme getScheme() {
        return new GetValueAsBool_resultTupleScheme();
      }
    }

    private static class GetValueAsBool_resultTupleScheme extends TupleScheme<GetValueAsBool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsBool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsBool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Bool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsByte_args implements org.apache.thrift.TBase<GetValueAsByte_args, GetValueAsByte_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsByte_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsByte_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsByte_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsByte_args.class, metaDataMap);
    }

    public GetValueAsByte_args() {
    }

    public GetValueAsByte_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsByte_args(GetValueAsByte_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueAsByte_args deepCopy() {
      return new GetValueAsByte_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueAsByte_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsByte_args)
        return this.equals((GetValueAsByte_args)that);
      return false;
    }

    public boolean equals(GetValueAsByte_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsByte_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsByte_args typedOther = (GetValueAsByte_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsByte_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsByte_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueAsByte_argsStandardScheme getScheme() {
        return new GetValueAsByte_argsStandardScheme();
      }
    }

    private static class GetValueAsByte_argsStandardScheme extends StandardScheme<GetValueAsByte_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsByte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsByte_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsByte_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueAsByte_argsTupleScheme getScheme() {
        return new GetValueAsByte_argsTupleScheme();
      }
    }

    private static class GetValueAsByte_argsTupleScheme extends TupleScheme<GetValueAsByte_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsByte_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsByte_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsByte_result implements org.apache.thrift.TBase<GetValueAsByte_result, GetValueAsByte_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsByte_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsByte_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsByte_resultTupleSchemeFactory());
    }

    public Bool_UInt8 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_UInt8.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsByte_result.class, metaDataMap);
    }

    public GetValueAsByte_result() {
    }

    public GetValueAsByte_result(
      Bool_UInt8 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsByte_result(GetValueAsByte_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_UInt8(other.success);
      }
    }

    public GetValueAsByte_result deepCopy() {
      return new GetValueAsByte_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_UInt8 getSuccess() {
      return this.success;
    }

    public GetValueAsByte_result setSuccess(Bool_UInt8 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_UInt8)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsByte_result)
        return this.equals((GetValueAsByte_result)that);
      return false;
    }

    public boolean equals(GetValueAsByte_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsByte_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsByte_result typedOther = (GetValueAsByte_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsByte_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsByte_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueAsByte_resultStandardScheme getScheme() {
        return new GetValueAsByte_resultStandardScheme();
      }
    }

    private static class GetValueAsByte_resultStandardScheme extends StandardScheme<GetValueAsByte_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsByte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_UInt8();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsByte_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsByte_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueAsByte_resultTupleScheme getScheme() {
        return new GetValueAsByte_resultTupleScheme();
      }
    }

    private static class GetValueAsByte_resultTupleScheme extends TupleScheme<GetValueAsByte_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsByte_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsByte_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_UInt8();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsFloat_args implements org.apache.thrift.TBase<GetValueAsFloat_args, GetValueAsFloat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsFloat_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsFloat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsFloat_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsFloat_args.class, metaDataMap);
    }

    public GetValueAsFloat_args() {
    }

    public GetValueAsFloat_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsFloat_args(GetValueAsFloat_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueAsFloat_args deepCopy() {
      return new GetValueAsFloat_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueAsFloat_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsFloat_args)
        return this.equals((GetValueAsFloat_args)that);
      return false;
    }

    public boolean equals(GetValueAsFloat_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsFloat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsFloat_args typedOther = (GetValueAsFloat_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsFloat_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsFloat_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueAsFloat_argsStandardScheme getScheme() {
        return new GetValueAsFloat_argsStandardScheme();
      }
    }

    private static class GetValueAsFloat_argsStandardScheme extends StandardScheme<GetValueAsFloat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsFloat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsFloat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsFloat_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueAsFloat_argsTupleScheme getScheme() {
        return new GetValueAsFloat_argsTupleScheme();
      }
    }

    private static class GetValueAsFloat_argsTupleScheme extends TupleScheme<GetValueAsFloat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsFloat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsFloat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsFloat_result implements org.apache.thrift.TBase<GetValueAsFloat_result, GetValueAsFloat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsFloat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsFloat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsFloat_resultTupleSchemeFactory());
    }

    public Bool_Float success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Float.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsFloat_result.class, metaDataMap);
    }

    public GetValueAsFloat_result() {
    }

    public GetValueAsFloat_result(
      Bool_Float success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsFloat_result(GetValueAsFloat_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Float(other.success);
      }
    }

    public GetValueAsFloat_result deepCopy() {
      return new GetValueAsFloat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Float getSuccess() {
      return this.success;
    }

    public GetValueAsFloat_result setSuccess(Bool_Float success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Float)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsFloat_result)
        return this.equals((GetValueAsFloat_result)that);
      return false;
    }

    public boolean equals(GetValueAsFloat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsFloat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsFloat_result typedOther = (GetValueAsFloat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsFloat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsFloat_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueAsFloat_resultStandardScheme getScheme() {
        return new GetValueAsFloat_resultStandardScheme();
      }
    }

    private static class GetValueAsFloat_resultStandardScheme extends StandardScheme<GetValueAsFloat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsFloat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Float();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsFloat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsFloat_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueAsFloat_resultTupleScheme getScheme() {
        return new GetValueAsFloat_resultTupleScheme();
      }
    }

    private static class GetValueAsFloat_resultTupleScheme extends TupleScheme<GetValueAsFloat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsFloat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsFloat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Float();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsInt_args implements org.apache.thrift.TBase<GetValueAsInt_args, GetValueAsInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsInt_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsInt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsInt_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsInt_args.class, metaDataMap);
    }

    public GetValueAsInt_args() {
    }

    public GetValueAsInt_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsInt_args(GetValueAsInt_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueAsInt_args deepCopy() {
      return new GetValueAsInt_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueAsInt_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsInt_args)
        return this.equals((GetValueAsInt_args)that);
      return false;
    }

    public boolean equals(GetValueAsInt_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsInt_args typedOther = (GetValueAsInt_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsInt_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsInt_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueAsInt_argsStandardScheme getScheme() {
        return new GetValueAsInt_argsStandardScheme();
      }
    }

    private static class GetValueAsInt_argsStandardScheme extends StandardScheme<GetValueAsInt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsInt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsInt_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueAsInt_argsTupleScheme getScheme() {
        return new GetValueAsInt_argsTupleScheme();
      }
    }

    private static class GetValueAsInt_argsTupleScheme extends TupleScheme<GetValueAsInt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsInt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsInt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsInt_result implements org.apache.thrift.TBase<GetValueAsInt_result, GetValueAsInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsInt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsInt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsInt_resultTupleSchemeFactory());
    }

    public Bool_Int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Int.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsInt_result.class, metaDataMap);
    }

    public GetValueAsInt_result() {
    }

    public GetValueAsInt_result(
      Bool_Int success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsInt_result(GetValueAsInt_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Int(other.success);
      }
    }

    public GetValueAsInt_result deepCopy() {
      return new GetValueAsInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Int getSuccess() {
      return this.success;
    }

    public GetValueAsInt_result setSuccess(Bool_Int success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Int)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsInt_result)
        return this.equals((GetValueAsInt_result)that);
      return false;
    }

    public boolean equals(GetValueAsInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsInt_result typedOther = (GetValueAsInt_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsInt_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueAsInt_resultStandardScheme getScheme() {
        return new GetValueAsInt_resultStandardScheme();
      }
    }

    private static class GetValueAsInt_resultStandardScheme extends StandardScheme<GetValueAsInt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Int();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsInt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsInt_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueAsInt_resultTupleScheme getScheme() {
        return new GetValueAsInt_resultTupleScheme();
      }
    }

    private static class GetValueAsInt_resultTupleScheme extends TupleScheme<GetValueAsInt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsInt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsInt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Int();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsShort_args implements org.apache.thrift.TBase<GetValueAsShort_args, GetValueAsShort_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsShort_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsShort_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsShort_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsShort_args.class, metaDataMap);
    }

    public GetValueAsShort_args() {
    }

    public GetValueAsShort_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsShort_args(GetValueAsShort_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueAsShort_args deepCopy() {
      return new GetValueAsShort_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueAsShort_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsShort_args)
        return this.equals((GetValueAsShort_args)that);
      return false;
    }

    public boolean equals(GetValueAsShort_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsShort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsShort_args typedOther = (GetValueAsShort_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsShort_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsShort_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueAsShort_argsStandardScheme getScheme() {
        return new GetValueAsShort_argsStandardScheme();
      }
    }

    private static class GetValueAsShort_argsStandardScheme extends StandardScheme<GetValueAsShort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsShort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsShort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsShort_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueAsShort_argsTupleScheme getScheme() {
        return new GetValueAsShort_argsTupleScheme();
      }
    }

    private static class GetValueAsShort_argsTupleScheme extends TupleScheme<GetValueAsShort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsShort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsShort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsShort_result implements org.apache.thrift.TBase<GetValueAsShort_result, GetValueAsShort_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsShort_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsShort_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsShort_resultTupleSchemeFactory());
    }

    public Bool_Int16 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Int16.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsShort_result.class, metaDataMap);
    }

    public GetValueAsShort_result() {
    }

    public GetValueAsShort_result(
      Bool_Int16 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsShort_result(GetValueAsShort_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Int16(other.success);
      }
    }

    public GetValueAsShort_result deepCopy() {
      return new GetValueAsShort_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Int16 getSuccess() {
      return this.success;
    }

    public GetValueAsShort_result setSuccess(Bool_Int16 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Int16)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsShort_result)
        return this.equals((GetValueAsShort_result)that);
      return false;
    }

    public boolean equals(GetValueAsShort_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsShort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsShort_result typedOther = (GetValueAsShort_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsShort_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsShort_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueAsShort_resultStandardScheme getScheme() {
        return new GetValueAsShort_resultStandardScheme();
      }
    }

    private static class GetValueAsShort_resultStandardScheme extends StandardScheme<GetValueAsShort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsShort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Int16();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsShort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsShort_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueAsShort_resultTupleScheme getScheme() {
        return new GetValueAsShort_resultTupleScheme();
      }
    }

    private static class GetValueAsShort_resultTupleScheme extends TupleScheme<GetValueAsShort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsShort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsShort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Int16();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsString_args implements org.apache.thrift.TBase<GetValueAsString_args, GetValueAsString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsString_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsString_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsString_args.class, metaDataMap);
    }

    public GetValueAsString_args() {
    }

    public GetValueAsString_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsString_args(GetValueAsString_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueAsString_args deepCopy() {
      return new GetValueAsString_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueAsString_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsString_args)
        return this.equals((GetValueAsString_args)that);
      return false;
    }

    public boolean equals(GetValueAsString_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsString_args typedOther = (GetValueAsString_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsString_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsString_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueAsString_argsStandardScheme getScheme() {
        return new GetValueAsString_argsStandardScheme();
      }
    }

    private static class GetValueAsString_argsStandardScheme extends StandardScheme<GetValueAsString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsString_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueAsString_argsTupleScheme getScheme() {
        return new GetValueAsString_argsTupleScheme();
      }
    }

    private static class GetValueAsString_argsTupleScheme extends TupleScheme<GetValueAsString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueAsString_result implements org.apache.thrift.TBase<GetValueAsString_result, GetValueAsString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueAsString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueAsString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueAsString_resultTupleSchemeFactory());
    }

    public Bool_String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_String.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueAsString_result.class, metaDataMap);
    }

    public GetValueAsString_result() {
    }

    public GetValueAsString_result(
      Bool_String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueAsString_result(GetValueAsString_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_String(other.success);
      }
    }

    public GetValueAsString_result deepCopy() {
      return new GetValueAsString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_String getSuccess() {
      return this.success;
    }

    public GetValueAsString_result setSuccess(Bool_String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueAsString_result)
        return this.equals((GetValueAsString_result)that);
      return false;
    }

    public boolean equals(GetValueAsString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueAsString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueAsString_result typedOther = (GetValueAsString_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueAsString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueAsString_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueAsString_resultStandardScheme getScheme() {
        return new GetValueAsString_resultStandardScheme();
      }
    }

    private static class GetValueAsString_resultStandardScheme extends StandardScheme<GetValueAsString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueAsString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_String();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueAsString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueAsString_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueAsString_resultTupleScheme getScheme() {
        return new GetValueAsString_resultTupleScheme();
      }
    }

    private static class GetValueAsString_resultTupleScheme extends TupleScheme<GetValueAsString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueAsString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueAsString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_String();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueListSelection_String_args implements org.apache.thrift.TBase<GetValueListSelection_String_args, GetValueListSelection_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueListSelection_String_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueListSelection_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueListSelection_String_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueListSelection_String_args.class, metaDataMap);
    }

    public GetValueListSelection_String_args() {
    }

    public GetValueListSelection_String_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueListSelection_String_args(GetValueListSelection_String_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueListSelection_String_args deepCopy() {
      return new GetValueListSelection_String_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueListSelection_String_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueListSelection_String_args)
        return this.equals((GetValueListSelection_String_args)that);
      return false;
    }

    public boolean equals(GetValueListSelection_String_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueListSelection_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueListSelection_String_args typedOther = (GetValueListSelection_String_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueListSelection_String_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueListSelection_String_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueListSelection_String_argsStandardScheme getScheme() {
        return new GetValueListSelection_String_argsStandardScheme();
      }
    }

    private static class GetValueListSelection_String_argsStandardScheme extends StandardScheme<GetValueListSelection_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueListSelection_String_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueListSelection_String_argsTupleScheme getScheme() {
        return new GetValueListSelection_String_argsTupleScheme();
      }
    }

    private static class GetValueListSelection_String_argsTupleScheme extends TupleScheme<GetValueListSelection_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueListSelection_String_result implements org.apache.thrift.TBase<GetValueListSelection_String_result, GetValueListSelection_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueListSelection_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueListSelection_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueListSelection_String_resultTupleSchemeFactory());
    }

    public Bool_String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_String.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueListSelection_String_result.class, metaDataMap);
    }

    public GetValueListSelection_String_result() {
    }

    public GetValueListSelection_String_result(
      Bool_String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueListSelection_String_result(GetValueListSelection_String_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_String(other.success);
      }
    }

    public GetValueListSelection_String_result deepCopy() {
      return new GetValueListSelection_String_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_String getSuccess() {
      return this.success;
    }

    public GetValueListSelection_String_result setSuccess(Bool_String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueListSelection_String_result)
        return this.equals((GetValueListSelection_String_result)that);
      return false;
    }

    public boolean equals(GetValueListSelection_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueListSelection_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueListSelection_String_result typedOther = (GetValueListSelection_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueListSelection_String_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueListSelection_String_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueListSelection_String_resultStandardScheme getScheme() {
        return new GetValueListSelection_String_resultStandardScheme();
      }
    }

    private static class GetValueListSelection_String_resultStandardScheme extends StandardScheme<GetValueListSelection_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_String();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueListSelection_String_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueListSelection_String_resultTupleScheme getScheme() {
        return new GetValueListSelection_String_resultTupleScheme();
      }
    }

    private static class GetValueListSelection_String_resultTupleScheme extends TupleScheme<GetValueListSelection_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_String();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueListSelection_Int32_args implements org.apache.thrift.TBase<GetValueListSelection_Int32_args, GetValueListSelection_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueListSelection_Int32_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueListSelection_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueListSelection_Int32_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueListSelection_Int32_args.class, metaDataMap);
    }

    public GetValueListSelection_Int32_args() {
    }

    public GetValueListSelection_Int32_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueListSelection_Int32_args(GetValueListSelection_Int32_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueListSelection_Int32_args deepCopy() {
      return new GetValueListSelection_Int32_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueListSelection_Int32_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueListSelection_Int32_args)
        return this.equals((GetValueListSelection_Int32_args)that);
      return false;
    }

    public boolean equals(GetValueListSelection_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueListSelection_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueListSelection_Int32_args typedOther = (GetValueListSelection_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueListSelection_Int32_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueListSelection_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueListSelection_Int32_argsStandardScheme getScheme() {
        return new GetValueListSelection_Int32_argsStandardScheme();
      }
    }

    private static class GetValueListSelection_Int32_argsStandardScheme extends StandardScheme<GetValueListSelection_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueListSelection_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueListSelection_Int32_argsTupleScheme getScheme() {
        return new GetValueListSelection_Int32_argsTupleScheme();
      }
    }

    private static class GetValueListSelection_Int32_argsTupleScheme extends TupleScheme<GetValueListSelection_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueListSelection_Int32_result implements org.apache.thrift.TBase<GetValueListSelection_Int32_result, GetValueListSelection_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueListSelection_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueListSelection_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueListSelection_Int32_resultTupleSchemeFactory());
    }

    public Bool_Int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Int.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueListSelection_Int32_result.class, metaDataMap);
    }

    public GetValueListSelection_Int32_result() {
    }

    public GetValueListSelection_Int32_result(
      Bool_Int success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueListSelection_Int32_result(GetValueListSelection_Int32_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Int(other.success);
      }
    }

    public GetValueListSelection_Int32_result deepCopy() {
      return new GetValueListSelection_Int32_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Int getSuccess() {
      return this.success;
    }

    public GetValueListSelection_Int32_result setSuccess(Bool_Int success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Int)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueListSelection_Int32_result)
        return this.equals((GetValueListSelection_Int32_result)that);
      return false;
    }

    public boolean equals(GetValueListSelection_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueListSelection_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueListSelection_Int32_result typedOther = (GetValueListSelection_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueListSelection_Int32_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueListSelection_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueListSelection_Int32_resultStandardScheme getScheme() {
        return new GetValueListSelection_Int32_resultStandardScheme();
      }
    }

    private static class GetValueListSelection_Int32_resultStandardScheme extends StandardScheme<GetValueListSelection_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Int();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueListSelection_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueListSelection_Int32_resultTupleScheme getScheme() {
        return new GetValueListSelection_Int32_resultTupleScheme();
      }
    }

    private static class GetValueListSelection_Int32_resultTupleScheme extends TupleScheme<GetValueListSelection_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Int();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueListItems_args implements org.apache.thrift.TBase<GetValueListItems_args, GetValueListItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueListItems_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueListItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueListItems_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueListItems_args.class, metaDataMap);
    }

    public GetValueListItems_args() {
    }

    public GetValueListItems_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueListItems_args(GetValueListItems_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueListItems_args deepCopy() {
      return new GetValueListItems_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueListItems_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueListItems_args)
        return this.equals((GetValueListItems_args)that);
      return false;
    }

    public boolean equals(GetValueListItems_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueListItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueListItems_args typedOther = (GetValueListItems_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueListItems_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueListItems_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueListItems_argsStandardScheme getScheme() {
        return new GetValueListItems_argsStandardScheme();
      }
    }

    private static class GetValueListItems_argsStandardScheme extends StandardScheme<GetValueListItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueListItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueListItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueListItems_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueListItems_argsTupleScheme getScheme() {
        return new GetValueListItems_argsTupleScheme();
      }
    }

    private static class GetValueListItems_argsTupleScheme extends TupleScheme<GetValueListItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueListItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueListItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueListItems_result implements org.apache.thrift.TBase<GetValueListItems_result, GetValueListItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueListItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueListItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueListItems_resultTupleSchemeFactory());
    }

    public Bool_ListString success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_ListString.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueListItems_result.class, metaDataMap);
    }

    public GetValueListItems_result() {
    }

    public GetValueListItems_result(
      Bool_ListString success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueListItems_result(GetValueListItems_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_ListString(other.success);
      }
    }

    public GetValueListItems_result deepCopy() {
      return new GetValueListItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_ListString getSuccess() {
      return this.success;
    }

    public GetValueListItems_result setSuccess(Bool_ListString success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_ListString)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueListItems_result)
        return this.equals((GetValueListItems_result)that);
      return false;
    }

    public boolean equals(GetValueListItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueListItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueListItems_result typedOther = (GetValueListItems_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueListItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueListItems_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueListItems_resultStandardScheme getScheme() {
        return new GetValueListItems_resultStandardScheme();
      }
    }

    private static class GetValueListItems_resultStandardScheme extends StandardScheme<GetValueListItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueListItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_ListString();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueListItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueListItems_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueListItems_resultTupleScheme getScheme() {
        return new GetValueListItems_resultTupleScheme();
      }
    }

    private static class GetValueListItems_resultTupleScheme extends TupleScheme<GetValueListItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueListItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueListItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_ListString();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetValueFloatPrecision_args implements org.apache.thrift.TBase<GetValueFloatPrecision_args, GetValueFloatPrecision_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueFloatPrecision_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueFloatPrecision_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueFloatPrecision_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueFloatPrecision_args.class, metaDataMap);
    }

    public GetValueFloatPrecision_args() {
    }

    public GetValueFloatPrecision_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueFloatPrecision_args(GetValueFloatPrecision_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetValueFloatPrecision_args deepCopy() {
      return new GetValueFloatPrecision_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetValueFloatPrecision_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueFloatPrecision_args)
        return this.equals((GetValueFloatPrecision_args)that);
      return false;
    }

    public boolean equals(GetValueFloatPrecision_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueFloatPrecision_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueFloatPrecision_args typedOther = (GetValueFloatPrecision_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueFloatPrecision_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueFloatPrecision_argsStandardSchemeFactory implements SchemeFactory {
      public GetValueFloatPrecision_argsStandardScheme getScheme() {
        return new GetValueFloatPrecision_argsStandardScheme();
      }
    }

    private static class GetValueFloatPrecision_argsStandardScheme extends StandardScheme<GetValueFloatPrecision_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueFloatPrecision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueFloatPrecision_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueFloatPrecision_argsTupleSchemeFactory implements SchemeFactory {
      public GetValueFloatPrecision_argsTupleScheme getScheme() {
        return new GetValueFloatPrecision_argsTupleScheme();
      }
    }

    private static class GetValueFloatPrecision_argsTupleScheme extends TupleScheme<GetValueFloatPrecision_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueFloatPrecision_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueFloatPrecision_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetValueFloatPrecision_result implements org.apache.thrift.TBase<GetValueFloatPrecision_result, GetValueFloatPrecision_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetValueFloatPrecision_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetValueFloatPrecision_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetValueFloatPrecision_resultTupleSchemeFactory());
    }

    public Bool_UInt8 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_UInt8.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetValueFloatPrecision_result.class, metaDataMap);
    }

    public GetValueFloatPrecision_result() {
    }

    public GetValueFloatPrecision_result(
      Bool_UInt8 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetValueFloatPrecision_result(GetValueFloatPrecision_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_UInt8(other.success);
      }
    }

    public GetValueFloatPrecision_result deepCopy() {
      return new GetValueFloatPrecision_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_UInt8 getSuccess() {
      return this.success;
    }

    public GetValueFloatPrecision_result setSuccess(Bool_UInt8 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_UInt8)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetValueFloatPrecision_result)
        return this.equals((GetValueFloatPrecision_result)that);
      return false;
    }

    public boolean equals(GetValueFloatPrecision_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetValueFloatPrecision_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetValueFloatPrecision_result typedOther = (GetValueFloatPrecision_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetValueFloatPrecision_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetValueFloatPrecision_resultStandardSchemeFactory implements SchemeFactory {
      public GetValueFloatPrecision_resultStandardScheme getScheme() {
        return new GetValueFloatPrecision_resultStandardScheme();
      }
    }

    private static class GetValueFloatPrecision_resultStandardScheme extends StandardScheme<GetValueFloatPrecision_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetValueFloatPrecision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_UInt8();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetValueFloatPrecision_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetValueFloatPrecision_resultTupleSchemeFactory implements SchemeFactory {
      public GetValueFloatPrecision_resultTupleScheme getScheme() {
        return new GetValueFloatPrecision_resultTupleScheme();
      }
    }

    private static class GetValueFloatPrecision_resultTupleScheme extends TupleScheme<GetValueFloatPrecision_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetValueFloatPrecision_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetValueFloatPrecision_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_UInt8();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Bool_args implements org.apache.thrift.TBase<SetValue_Bool_args, SetValue_Bool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Bool_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Bool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Bool_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public boolean _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___VALUE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Bool_args.class, metaDataMap);
    }

    public SetValue_Bool_args() {
    }

    public SetValue_Bool_args(
      RemoteValueID _id,
      boolean _value)
    {
      this();
      this._id = _id;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Bool_args(SetValue_Bool_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._value = other._value;
    }

    public SetValue_Bool_args deepCopy() {
      return new SetValue_Bool_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_valueIsSet(false);
      this._value = false;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValue_Bool_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public boolean is_value() {
      return this._value;
    }

    public SetValue_Bool_args set_value(boolean _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return Boolean.valueOf(is_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Bool_args)
        return this.equals((SetValue_Bool_args)that);
      return false;
    }

    public boolean equals(SetValue_Bool_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Bool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Bool_args typedOther = (SetValue_Bool_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Bool_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Bool_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_Bool_argsStandardScheme getScheme() {
        return new SetValue_Bool_argsStandardScheme();
      }
    }

    private static class SetValue_Bool_argsStandardScheme extends StandardScheme<SetValue_Bool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Bool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._value = iprot.readBool();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Bool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeBool(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Bool_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_Bool_argsTupleScheme getScheme() {
        return new SetValue_Bool_argsTupleScheme();
      }
    }

    private static class SetValue_Bool_argsTupleScheme extends TupleScheme<SetValue_Bool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Bool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeBool(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Bool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readBool();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Bool_result implements org.apache.thrift.TBase<SetValue_Bool_result, SetValue_Bool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Bool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Bool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Bool_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Bool_result.class, metaDataMap);
    }

    public SetValue_Bool_result() {
    }

    public SetValue_Bool_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Bool_result(SetValue_Bool_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValue_Bool_result deepCopy() {
      return new SetValue_Bool_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValue_Bool_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Bool_result)
        return this.equals((SetValue_Bool_result)that);
      return false;
    }

    public boolean equals(SetValue_Bool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Bool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Bool_result typedOther = (SetValue_Bool_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Bool_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Bool_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_Bool_resultStandardScheme getScheme() {
        return new SetValue_Bool_resultStandardScheme();
      }
    }

    private static class SetValue_Bool_resultStandardScheme extends StandardScheme<SetValue_Bool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Bool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Bool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Bool_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_Bool_resultTupleScheme getScheme() {
        return new SetValue_Bool_resultTupleScheme();
      }
    }

    private static class SetValue_Bool_resultTupleScheme extends TupleScheme<SetValue_Bool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Bool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Bool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_UInt8_args implements org.apache.thrift.TBase<SetValue_UInt8_args, SetValue_UInt8_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_UInt8_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_UInt8_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_UInt8_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public byte _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___VALUE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_UInt8_args.class, metaDataMap);
    }

    public SetValue_UInt8_args() {
    }

    public SetValue_UInt8_args(
      RemoteValueID _id,
      byte _value)
    {
      this();
      this._id = _id;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_UInt8_args(SetValue_UInt8_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._value = other._value;
    }

    public SetValue_UInt8_args deepCopy() {
      return new SetValue_UInt8_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValue_UInt8_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public byte get_value() {
      return this._value;
    }

    public SetValue_UInt8_args set_value(byte _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return Byte.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_UInt8_args)
        return this.equals((SetValue_UInt8_args)that);
      return false;
    }

    public boolean equals(SetValue_UInt8_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_UInt8_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_UInt8_args typedOther = (SetValue_UInt8_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_UInt8_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_UInt8_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_UInt8_argsStandardScheme getScheme() {
        return new SetValue_UInt8_argsStandardScheme();
      }
    }

    private static class SetValue_UInt8_argsStandardScheme extends StandardScheme<SetValue_UInt8_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_UInt8_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._value = iprot.readByte();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_UInt8_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeByte(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_UInt8_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_UInt8_argsTupleScheme getScheme() {
        return new SetValue_UInt8_argsTupleScheme();
      }
    }

    private static class SetValue_UInt8_argsTupleScheme extends TupleScheme<SetValue_UInt8_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_UInt8_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeByte(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_UInt8_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readByte();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_UInt8_result implements org.apache.thrift.TBase<SetValue_UInt8_result, SetValue_UInt8_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_UInt8_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_UInt8_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_UInt8_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_UInt8_result.class, metaDataMap);
    }

    public SetValue_UInt8_result() {
    }

    public SetValue_UInt8_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_UInt8_result(SetValue_UInt8_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValue_UInt8_result deepCopy() {
      return new SetValue_UInt8_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValue_UInt8_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_UInt8_result)
        return this.equals((SetValue_UInt8_result)that);
      return false;
    }

    public boolean equals(SetValue_UInt8_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_UInt8_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_UInt8_result typedOther = (SetValue_UInt8_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_UInt8_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_UInt8_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_UInt8_resultStandardScheme getScheme() {
        return new SetValue_UInt8_resultStandardScheme();
      }
    }

    private static class SetValue_UInt8_resultStandardScheme extends StandardScheme<SetValue_UInt8_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_UInt8_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_UInt8_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_UInt8_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_UInt8_resultTupleScheme getScheme() {
        return new SetValue_UInt8_resultTupleScheme();
      }
    }

    private static class SetValue_UInt8_resultTupleScheme extends TupleScheme<SetValue_UInt8_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_UInt8_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_UInt8_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Float_args implements org.apache.thrift.TBase<SetValue_Float_args, SetValue_Float_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Float_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Float_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Float_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public double _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___VALUE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Float_args.class, metaDataMap);
    }

    public SetValue_Float_args() {
    }

    public SetValue_Float_args(
      RemoteValueID _id,
      double _value)
    {
      this();
      this._id = _id;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Float_args(SetValue_Float_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._value = other._value;
    }

    public SetValue_Float_args deepCopy() {
      return new SetValue_Float_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_valueIsSet(false);
      this._value = 0.0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValue_Float_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public double get_value() {
      return this._value;
    }

    public SetValue_Float_args set_value(double _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return Double.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Float_args)
        return this.equals((SetValue_Float_args)that);
      return false;
    }

    public boolean equals(SetValue_Float_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Float_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Float_args typedOther = (SetValue_Float_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Float_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Float_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_Float_argsStandardScheme getScheme() {
        return new SetValue_Float_argsStandardScheme();
      }
    }

    private static class SetValue_Float_argsStandardScheme extends StandardScheme<SetValue_Float_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Float_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct._value = iprot.readDouble();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Float_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeDouble(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Float_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_Float_argsTupleScheme getScheme() {
        return new SetValue_Float_argsTupleScheme();
      }
    }

    private static class SetValue_Float_argsTupleScheme extends TupleScheme<SetValue_Float_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Float_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeDouble(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Float_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readDouble();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Float_result implements org.apache.thrift.TBase<SetValue_Float_result, SetValue_Float_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Float_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Float_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Float_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Float_result.class, metaDataMap);
    }

    public SetValue_Float_result() {
    }

    public SetValue_Float_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Float_result(SetValue_Float_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValue_Float_result deepCopy() {
      return new SetValue_Float_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValue_Float_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Float_result)
        return this.equals((SetValue_Float_result)that);
      return false;
    }

    public boolean equals(SetValue_Float_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Float_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Float_result typedOther = (SetValue_Float_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Float_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Float_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_Float_resultStandardScheme getScheme() {
        return new SetValue_Float_resultStandardScheme();
      }
    }

    private static class SetValue_Float_resultStandardScheme extends StandardScheme<SetValue_Float_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Float_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Float_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Float_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_Float_resultTupleScheme getScheme() {
        return new SetValue_Float_resultTupleScheme();
      }
    }

    private static class SetValue_Float_resultTupleScheme extends TupleScheme<SetValue_Float_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Float_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Float_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Int32_args implements org.apache.thrift.TBase<SetValue_Int32_args, SetValue_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Int32_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Int32_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public int _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___VALUE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Int32_args.class, metaDataMap);
    }

    public SetValue_Int32_args() {
    }

    public SetValue_Int32_args(
      RemoteValueID _id,
      int _value)
    {
      this();
      this._id = _id;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Int32_args(SetValue_Int32_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._value = other._value;
    }

    public SetValue_Int32_args deepCopy() {
      return new SetValue_Int32_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValue_Int32_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public int get_value() {
      return this._value;
    }

    public SetValue_Int32_args set_value(int _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return Integer.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Int32_args)
        return this.equals((SetValue_Int32_args)that);
      return false;
    }

    public boolean equals(SetValue_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Int32_args typedOther = (SetValue_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Int32_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_Int32_argsStandardScheme getScheme() {
        return new SetValue_Int32_argsStandardScheme();
      }
    }

    private static class SetValue_Int32_argsStandardScheme extends StandardScheme<SetValue_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._value = iprot.readI32();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI32(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_Int32_argsTupleScheme getScheme() {
        return new SetValue_Int32_argsTupleScheme();
      }
    }

    private static class SetValue_Int32_argsTupleScheme extends TupleScheme<SetValue_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI32(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readI32();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Int32_result implements org.apache.thrift.TBase<SetValue_Int32_result, SetValue_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Int32_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Int32_result.class, metaDataMap);
    }

    public SetValue_Int32_result() {
    }

    public SetValue_Int32_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Int32_result(SetValue_Int32_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValue_Int32_result deepCopy() {
      return new SetValue_Int32_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValue_Int32_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Int32_result)
        return this.equals((SetValue_Int32_result)that);
      return false;
    }

    public boolean equals(SetValue_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Int32_result typedOther = (SetValue_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Int32_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_Int32_resultStandardScheme getScheme() {
        return new SetValue_Int32_resultStandardScheme();
      }
    }

    private static class SetValue_Int32_resultStandardScheme extends StandardScheme<SetValue_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_Int32_resultTupleScheme getScheme() {
        return new SetValue_Int32_resultTupleScheme();
      }
    }

    private static class SetValue_Int32_resultTupleScheme extends TupleScheme<SetValue_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Int16_args implements org.apache.thrift.TBase<SetValue_Int16_args, SetValue_Int16_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Int16_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Int16_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Int16_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public short _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___VALUE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Int16_args.class, metaDataMap);
    }

    public SetValue_Int16_args() {
    }

    public SetValue_Int16_args(
      RemoteValueID _id,
      short _value)
    {
      this();
      this._id = _id;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Int16_args(SetValue_Int16_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._value = other._value;
    }

    public SetValue_Int16_args deepCopy() {
      return new SetValue_Int16_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValue_Int16_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public short get_value() {
      return this._value;
    }

    public SetValue_Int16_args set_value(short _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return Short.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Int16_args)
        return this.equals((SetValue_Int16_args)that);
      return false;
    }

    public boolean equals(SetValue_Int16_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Int16_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Int16_args typedOther = (SetValue_Int16_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Int16_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Int16_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_Int16_argsStandardScheme getScheme() {
        return new SetValue_Int16_argsStandardScheme();
      }
    }

    private static class SetValue_Int16_argsStandardScheme extends StandardScheme<SetValue_Int16_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Int16_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct._value = iprot.readI16();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Int16_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI16(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Int16_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_Int16_argsTupleScheme getScheme() {
        return new SetValue_Int16_argsTupleScheme();
      }
    }

    private static class SetValue_Int16_argsTupleScheme extends TupleScheme<SetValue_Int16_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Int16_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI16(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Int16_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readI16();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_Int16_result implements org.apache.thrift.TBase<SetValue_Int16_result, SetValue_Int16_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_Int16_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_Int16_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_Int16_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_Int16_result.class, metaDataMap);
    }

    public SetValue_Int16_result() {
    }

    public SetValue_Int16_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_Int16_result(SetValue_Int16_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValue_Int16_result deepCopy() {
      return new SetValue_Int16_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValue_Int16_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_Int16_result)
        return this.equals((SetValue_Int16_result)that);
      return false;
    }

    public boolean equals(SetValue_Int16_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_Int16_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_Int16_result typedOther = (SetValue_Int16_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_Int16_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_Int16_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_Int16_resultStandardScheme getScheme() {
        return new SetValue_Int16_resultStandardScheme();
      }
    }

    private static class SetValue_Int16_resultStandardScheme extends StandardScheme<SetValue_Int16_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_Int16_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_Int16_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_Int16_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_Int16_resultTupleScheme getScheme() {
        return new SetValue_Int16_resultTupleScheme();
      }
    }

    private static class SetValue_Int16_resultTupleScheme extends TupleScheme<SetValue_Int16_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_Int16_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_Int16_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValue_String_args implements org.apache.thrift.TBase<SetValue_String_args, SetValue_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_String_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_String_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_String_args.class, metaDataMap);
    }

    public SetValue_String_args() {
    }

    public SetValue_String_args(
      RemoteValueID _id,
      String _value)
    {
      this();
      this._id = _id;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_String_args(SetValue_String_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetValue_String_args deepCopy() {
      return new SetValue_String_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      this._value = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValue_String_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public SetValue_String_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_String_args)
        return this.equals((SetValue_String_args)that);
      return false;
    }

    public boolean equals(SetValue_String_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_String_args typedOther = (SetValue_String_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_String_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_String_argsStandardSchemeFactory implements SchemeFactory {
      public SetValue_String_argsStandardScheme getScheme() {
        return new SetValue_String_argsStandardScheme();
      }
    }

    private static class SetValue_String_argsStandardScheme extends StandardScheme<SetValue_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_String_argsTupleSchemeFactory implements SchemeFactory {
      public SetValue_String_argsTupleScheme getScheme() {
        return new SetValue_String_argsTupleScheme();
      }
    }

    private static class SetValue_String_argsTupleScheme extends TupleScheme<SetValue_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetValue_String_result implements org.apache.thrift.TBase<SetValue_String_result, SetValue_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValue_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValue_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValue_String_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValue_String_result.class, metaDataMap);
    }

    public SetValue_String_result() {
    }

    public SetValue_String_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValue_String_result(SetValue_String_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValue_String_result deepCopy() {
      return new SetValue_String_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValue_String_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValue_String_result)
        return this.equals((SetValue_String_result)that);
      return false;
    }

    public boolean equals(SetValue_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValue_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValue_String_result typedOther = (SetValue_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValue_String_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValue_String_resultStandardSchemeFactory implements SchemeFactory {
      public SetValue_String_resultStandardScheme getScheme() {
        return new SetValue_String_resultStandardScheme();
      }
    }

    private static class SetValue_String_resultStandardScheme extends StandardScheme<SetValue_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValue_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValue_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValue_String_resultTupleSchemeFactory implements SchemeFactory {
      public SetValue_String_resultTupleScheme getScheme() {
        return new SetValue_String_resultTupleScheme();
      }
    }

    private static class SetValue_String_resultTupleScheme extends TupleScheme<SetValue_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValue_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValue_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetValueListSelection_args implements org.apache.thrift.TBase<SetValueListSelection_args, SetValueListSelection_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueListSelection_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _SELECTED_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("_selectedItem", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueListSelection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueListSelection_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public String _selectedItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _SELECTED_ITEM((short)2, "_selectedItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _SELECTED_ITEM
            return _SELECTED_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._SELECTED_ITEM, new org.apache.thrift.meta_data.FieldMetaData("_selectedItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueListSelection_args.class, metaDataMap);
    }

    public SetValueListSelection_args() {
    }

    public SetValueListSelection_args(
      RemoteValueID _id,
      String _selectedItem)
    {
      this();
      this._id = _id;
      this._selectedItem = _selectedItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueListSelection_args(SetValueListSelection_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      if (other.isSet_selectedItem()) {
        this._selectedItem = other._selectedItem;
      }
    }

    public SetValueListSelection_args deepCopy() {
      return new SetValueListSelection_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      this._selectedItem = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetValueListSelection_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public String get_selectedItem() {
      return this._selectedItem;
    }

    public SetValueListSelection_args set_selectedItem(String _selectedItem) {
      this._selectedItem = _selectedItem;
      return this;
    }

    public void unset_selectedItem() {
      this._selectedItem = null;
    }

    /** Returns true if field _selectedItem is set (has been assigned a value) and false otherwise */
    public boolean isSet_selectedItem() {
      return this._selectedItem != null;
    }

    public void set_selectedItemIsSet(boolean value) {
      if (!value) {
        this._selectedItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _SELECTED_ITEM:
        if (value == null) {
          unset_selectedItem();
        } else {
          set_selectedItem((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _SELECTED_ITEM:
        return get_selectedItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _SELECTED_ITEM:
        return isSet_selectedItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueListSelection_args)
        return this.equals((SetValueListSelection_args)that);
      return false;
    }

    public boolean equals(SetValueListSelection_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__selectedItem = true && this.isSet_selectedItem();
      boolean that_present__selectedItem = true && that.isSet_selectedItem();
      if (this_present__selectedItem || that_present__selectedItem) {
        if (!(this_present__selectedItem && that_present__selectedItem))
          return false;
        if (!this._selectedItem.equals(that._selectedItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueListSelection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueListSelection_args typedOther = (SetValueListSelection_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_selectedItem()).compareTo(typedOther.isSet_selectedItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_selectedItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._selectedItem, typedOther._selectedItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueListSelection_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_selectedItem:");
      if (this._selectedItem == null) {
        sb.append("null");
      } else {
        sb.append(this._selectedItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueListSelection_argsStandardSchemeFactory implements SchemeFactory {
      public SetValueListSelection_argsStandardScheme getScheme() {
        return new SetValueListSelection_argsStandardScheme();
      }
    }

    private static class SetValueListSelection_argsStandardScheme extends StandardScheme<SetValueListSelection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueListSelection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _SELECTED_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._selectedItem = iprot.readString();
                struct.set_selectedItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueListSelection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._selectedItem != null) {
          oprot.writeFieldBegin(_SELECTED_ITEM_FIELD_DESC);
          oprot.writeString(struct._selectedItem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueListSelection_argsTupleSchemeFactory implements SchemeFactory {
      public SetValueListSelection_argsTupleScheme getScheme() {
        return new SetValueListSelection_argsTupleScheme();
      }
    }

    private static class SetValueListSelection_argsTupleScheme extends TupleScheme<SetValueListSelection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueListSelection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_selectedItem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_selectedItem()) {
          oprot.writeString(struct._selectedItem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueListSelection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._selectedItem = iprot.readString();
          struct.set_selectedItemIsSet(true);
        }
      }
    }

  }

  public static class SetValueListSelection_result implements org.apache.thrift.TBase<SetValueListSelection_result, SetValueListSelection_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetValueListSelection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetValueListSelection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetValueListSelection_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetValueListSelection_result.class, metaDataMap);
    }

    public SetValueListSelection_result() {
    }

    public SetValueListSelection_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetValueListSelection_result(SetValueListSelection_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetValueListSelection_result deepCopy() {
      return new SetValueListSelection_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetValueListSelection_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetValueListSelection_result)
        return this.equals((SetValueListSelection_result)that);
      return false;
    }

    public boolean equals(SetValueListSelection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetValueListSelection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetValueListSelection_result typedOther = (SetValueListSelection_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetValueListSelection_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetValueListSelection_resultStandardSchemeFactory implements SchemeFactory {
      public SetValueListSelection_resultStandardScheme getScheme() {
        return new SetValueListSelection_resultStandardScheme();
      }
    }

    private static class SetValueListSelection_resultStandardScheme extends StandardScheme<SetValueListSelection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetValueListSelection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetValueListSelection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetValueListSelection_resultTupleSchemeFactory implements SchemeFactory {
      public SetValueListSelection_resultTupleScheme getScheme() {
        return new SetValueListSelection_resultTupleScheme();
      }
    }

    private static class SetValueListSelection_resultTupleScheme extends TupleScheme<SetValueListSelection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetValueListSelection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetValueListSelection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RefreshValue_args implements org.apache.thrift.TBase<RefreshValue_args, RefreshValue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefreshValue_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RefreshValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RefreshValue_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefreshValue_args.class, metaDataMap);
    }

    public RefreshValue_args() {
    }

    public RefreshValue_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RefreshValue_args(RefreshValue_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public RefreshValue_args deepCopy() {
      return new RefreshValue_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public RefreshValue_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RefreshValue_args)
        return this.equals((RefreshValue_args)that);
      return false;
    }

    public boolean equals(RefreshValue_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RefreshValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RefreshValue_args typedOther = (RefreshValue_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RefreshValue_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RefreshValue_argsStandardSchemeFactory implements SchemeFactory {
      public RefreshValue_argsStandardScheme getScheme() {
        return new RefreshValue_argsStandardScheme();
      }
    }

    private static class RefreshValue_argsStandardScheme extends StandardScheme<RefreshValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RefreshValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RefreshValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RefreshValue_argsTupleSchemeFactory implements SchemeFactory {
      public RefreshValue_argsTupleScheme getScheme() {
        return new RefreshValue_argsTupleScheme();
      }
    }

    private static class RefreshValue_argsTupleScheme extends TupleScheme<RefreshValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RefreshValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RefreshValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class RefreshValue_result implements org.apache.thrift.TBase<RefreshValue_result, RefreshValue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefreshValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RefreshValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RefreshValue_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefreshValue_result.class, metaDataMap);
    }

    public RefreshValue_result() {
    }

    public RefreshValue_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RefreshValue_result(RefreshValue_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RefreshValue_result deepCopy() {
      return new RefreshValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RefreshValue_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RefreshValue_result)
        return this.equals((RefreshValue_result)that);
      return false;
    }

    public boolean equals(RefreshValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RefreshValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RefreshValue_result typedOther = (RefreshValue_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RefreshValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RefreshValue_resultStandardSchemeFactory implements SchemeFactory {
      public RefreshValue_resultStandardScheme getScheme() {
        return new RefreshValue_resultStandardScheme();
      }
    }

    private static class RefreshValue_resultStandardScheme extends StandardScheme<RefreshValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RefreshValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RefreshValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RefreshValue_resultTupleSchemeFactory implements SchemeFactory {
      public RefreshValue_resultTupleScheme getScheme() {
        return new RefreshValue_resultTupleScheme();
      }
    }

    private static class RefreshValue_resultTupleScheme extends TupleScheme<RefreshValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RefreshValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RefreshValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetChangeVerified_args implements org.apache.thrift.TBase<SetChangeVerified_args, SetChangeVerified_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetChangeVerified_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _VERIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("_verify", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetChangeVerified_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetChangeVerified_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public boolean _verify; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _VERIFY((short)2, "_verify");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _VERIFY
            return _VERIFY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___VERIFY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VERIFY, new org.apache.thrift.meta_data.FieldMetaData("_verify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetChangeVerified_args.class, metaDataMap);
    }

    public SetChangeVerified_args() {
    }

    public SetChangeVerified_args(
      RemoteValueID _id,
      boolean _verify)
    {
      this();
      this._id = _id;
      this._verify = _verify;
      set_verifyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetChangeVerified_args(SetChangeVerified_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._verify = other._verify;
    }

    public SetChangeVerified_args deepCopy() {
      return new SetChangeVerified_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_verifyIsSet(false);
      this._verify = false;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetChangeVerified_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public boolean is_verify() {
      return this._verify;
    }

    public SetChangeVerified_args set_verify(boolean _verify) {
      this._verify = _verify;
      set_verifyIsSet(true);
      return this;
    }

    public void unset_verify() {
      __isset_bit_vector.clear(___VERIFY_ISSET_ID);
    }

    /** Returns true if field _verify is set (has been assigned a value) and false otherwise */
    public boolean isSet_verify() {
      return __isset_bit_vector.get(___VERIFY_ISSET_ID);
    }

    public void set_verifyIsSet(boolean value) {
      __isset_bit_vector.set(___VERIFY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _VERIFY:
        if (value == null) {
          unset_verify();
        } else {
          set_verify((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _VERIFY:
        return Boolean.valueOf(is_verify());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _VERIFY:
        return isSet_verify();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetChangeVerified_args)
        return this.equals((SetChangeVerified_args)that);
      return false;
    }

    public boolean equals(SetChangeVerified_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__verify = true;
      boolean that_present__verify = true;
      if (this_present__verify || that_present__verify) {
        if (!(this_present__verify && that_present__verify))
          return false;
        if (this._verify != that._verify)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetChangeVerified_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetChangeVerified_args typedOther = (SetChangeVerified_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_verify()).compareTo(typedOther.isSet_verify());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_verify()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._verify, typedOther._verify);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetChangeVerified_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_verify:");
      sb.append(this._verify);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetChangeVerified_argsStandardSchemeFactory implements SchemeFactory {
      public SetChangeVerified_argsStandardScheme getScheme() {
        return new SetChangeVerified_argsStandardScheme();
      }
    }

    private static class SetChangeVerified_argsStandardScheme extends StandardScheme<SetChangeVerified_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetChangeVerified_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VERIFY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._verify = iprot.readBool();
                struct.set_verifyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetChangeVerified_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VERIFY_FIELD_DESC);
        oprot.writeBool(struct._verify);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetChangeVerified_argsTupleSchemeFactory implements SchemeFactory {
      public SetChangeVerified_argsTupleScheme getScheme() {
        return new SetChangeVerified_argsTupleScheme();
      }
    }

    private static class SetChangeVerified_argsTupleScheme extends TupleScheme<SetChangeVerified_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetChangeVerified_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_verify()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_verify()) {
          oprot.writeBool(struct._verify);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetChangeVerified_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._verify = iprot.readBool();
          struct.set_verifyIsSet(true);
        }
      }
    }

  }

  public static class SetChangeVerified_result implements org.apache.thrift.TBase<SetChangeVerified_result, SetChangeVerified_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetChangeVerified_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetChangeVerified_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetChangeVerified_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetChangeVerified_result.class, metaDataMap);
    }

    public SetChangeVerified_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetChangeVerified_result(SetChangeVerified_result other) {
    }

    public SetChangeVerified_result deepCopy() {
      return new SetChangeVerified_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetChangeVerified_result)
        return this.equals((SetChangeVerified_result)that);
      return false;
    }

    public boolean equals(SetChangeVerified_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetChangeVerified_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetChangeVerified_result typedOther = (SetChangeVerified_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetChangeVerified_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetChangeVerified_resultStandardSchemeFactory implements SchemeFactory {
      public SetChangeVerified_resultStandardScheme getScheme() {
        return new SetChangeVerified_resultStandardScheme();
      }
    }

    private static class SetChangeVerified_resultStandardScheme extends StandardScheme<SetChangeVerified_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetChangeVerified_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetChangeVerified_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetChangeVerified_resultTupleSchemeFactory implements SchemeFactory {
      public SetChangeVerified_resultTupleScheme getScheme() {
        return new SetChangeVerified_resultTupleScheme();
      }
    }

    private static class SetChangeVerified_resultTupleScheme extends TupleScheme<SetChangeVerified_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetChangeVerified_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetChangeVerified_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class PressButton_args implements org.apache.thrift.TBase<PressButton_args, PressButton_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PressButton_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PressButton_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PressButton_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PressButton_args.class, metaDataMap);
    }

    public PressButton_args() {
    }

    public PressButton_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PressButton_args(PressButton_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public PressButton_args deepCopy() {
      return new PressButton_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public PressButton_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PressButton_args)
        return this.equals((PressButton_args)that);
      return false;
    }

    public boolean equals(PressButton_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(PressButton_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      PressButton_args typedOther = (PressButton_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PressButton_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PressButton_argsStandardSchemeFactory implements SchemeFactory {
      public PressButton_argsStandardScheme getScheme() {
        return new PressButton_argsStandardScheme();
      }
    }

    private static class PressButton_argsStandardScheme extends StandardScheme<PressButton_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PressButton_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PressButton_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PressButton_argsTupleSchemeFactory implements SchemeFactory {
      public PressButton_argsTupleScheme getScheme() {
        return new PressButton_argsTupleScheme();
      }
    }

    private static class PressButton_argsTupleScheme extends TupleScheme<PressButton_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PressButton_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PressButton_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class PressButton_result implements org.apache.thrift.TBase<PressButton_result, PressButton_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PressButton_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PressButton_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PressButton_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PressButton_result.class, metaDataMap);
    }

    public PressButton_result() {
    }

    public PressButton_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PressButton_result(PressButton_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public PressButton_result deepCopy() {
      return new PressButton_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public PressButton_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PressButton_result)
        return this.equals((PressButton_result)that);
      return false;
    }

    public boolean equals(PressButton_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(PressButton_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      PressButton_result typedOther = (PressButton_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PressButton_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PressButton_resultStandardSchemeFactory implements SchemeFactory {
      public PressButton_resultStandardScheme getScheme() {
        return new PressButton_resultStandardScheme();
      }
    }

    private static class PressButton_resultStandardScheme extends StandardScheme<PressButton_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PressButton_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PressButton_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PressButton_resultTupleSchemeFactory implements SchemeFactory {
      public PressButton_resultTupleScheme getScheme() {
        return new PressButton_resultTupleScheme();
      }
    }

    private static class PressButton_resultTupleScheme extends TupleScheme<PressButton_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PressButton_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PressButton_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReleaseButton_args implements org.apache.thrift.TBase<ReleaseButton_args, ReleaseButton_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReleaseButton_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReleaseButton_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReleaseButton_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReleaseButton_args.class, metaDataMap);
    }

    public ReleaseButton_args() {
    }

    public ReleaseButton_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReleaseButton_args(ReleaseButton_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public ReleaseButton_args deepCopy() {
      return new ReleaseButton_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public ReleaseButton_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReleaseButton_args)
        return this.equals((ReleaseButton_args)that);
      return false;
    }

    public boolean equals(ReleaseButton_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReleaseButton_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReleaseButton_args typedOther = (ReleaseButton_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReleaseButton_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReleaseButton_argsStandardSchemeFactory implements SchemeFactory {
      public ReleaseButton_argsStandardScheme getScheme() {
        return new ReleaseButton_argsStandardScheme();
      }
    }

    private static class ReleaseButton_argsStandardScheme extends StandardScheme<ReleaseButton_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReleaseButton_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReleaseButton_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReleaseButton_argsTupleSchemeFactory implements SchemeFactory {
      public ReleaseButton_argsTupleScheme getScheme() {
        return new ReleaseButton_argsTupleScheme();
      }
    }

    private static class ReleaseButton_argsTupleScheme extends TupleScheme<ReleaseButton_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReleaseButton_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReleaseButton_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class ReleaseButton_result implements org.apache.thrift.TBase<ReleaseButton_result, ReleaseButton_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReleaseButton_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReleaseButton_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReleaseButton_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReleaseButton_result.class, metaDataMap);
    }

    public ReleaseButton_result() {
    }

    public ReleaseButton_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReleaseButton_result(ReleaseButton_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public ReleaseButton_result deepCopy() {
      return new ReleaseButton_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ReleaseButton_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReleaseButton_result)
        return this.equals((ReleaseButton_result)that);
      return false;
    }

    public boolean equals(ReleaseButton_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReleaseButton_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReleaseButton_result typedOther = (ReleaseButton_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReleaseButton_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReleaseButton_resultStandardSchemeFactory implements SchemeFactory {
      public ReleaseButton_resultStandardScheme getScheme() {
        return new ReleaseButton_resultStandardScheme();
      }
    }

    private static class ReleaseButton_resultStandardScheme extends StandardScheme<ReleaseButton_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReleaseButton_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReleaseButton_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReleaseButton_resultTupleSchemeFactory implements SchemeFactory {
      public ReleaseButton_resultTupleScheme getScheme() {
        return new ReleaseButton_resultTupleScheme();
      }
    }

    private static class ReleaseButton_resultTupleScheme extends TupleScheme<ReleaseButton_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReleaseButton_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReleaseButton_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNumSwitchPoints_args implements org.apache.thrift.TBase<GetNumSwitchPoints_args, GetNumSwitchPoints_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNumSwitchPoints_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNumSwitchPoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNumSwitchPoints_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNumSwitchPoints_args.class, metaDataMap);
    }

    public GetNumSwitchPoints_args() {
    }

    public GetNumSwitchPoints_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNumSwitchPoints_args(GetNumSwitchPoints_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public GetNumSwitchPoints_args deepCopy() {
      return new GetNumSwitchPoints_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetNumSwitchPoints_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNumSwitchPoints_args)
        return this.equals((GetNumSwitchPoints_args)that);
      return false;
    }

    public boolean equals(GetNumSwitchPoints_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNumSwitchPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNumSwitchPoints_args typedOther = (GetNumSwitchPoints_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNumSwitchPoints_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNumSwitchPoints_argsStandardSchemeFactory implements SchemeFactory {
      public GetNumSwitchPoints_argsStandardScheme getScheme() {
        return new GetNumSwitchPoints_argsStandardScheme();
      }
    }

    private static class GetNumSwitchPoints_argsStandardScheme extends StandardScheme<GetNumSwitchPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNumSwitchPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNumSwitchPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNumSwitchPoints_argsTupleSchemeFactory implements SchemeFactory {
      public GetNumSwitchPoints_argsTupleScheme getScheme() {
        return new GetNumSwitchPoints_argsTupleScheme();
      }
    }

    private static class GetNumSwitchPoints_argsTupleScheme extends TupleScheme<GetNumSwitchPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNumSwitchPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNumSwitchPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class GetNumSwitchPoints_result implements org.apache.thrift.TBase<GetNumSwitchPoints_result, GetNumSwitchPoints_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNumSwitchPoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNumSwitchPoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNumSwitchPoints_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNumSwitchPoints_result.class, metaDataMap);
    }

    public GetNumSwitchPoints_result() {
    }

    public GetNumSwitchPoints_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNumSwitchPoints_result(GetNumSwitchPoints_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNumSwitchPoints_result deepCopy() {
      return new GetNumSwitchPoints_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNumSwitchPoints_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNumSwitchPoints_result)
        return this.equals((GetNumSwitchPoints_result)that);
      return false;
    }

    public boolean equals(GetNumSwitchPoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNumSwitchPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNumSwitchPoints_result typedOther = (GetNumSwitchPoints_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNumSwitchPoints_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNumSwitchPoints_resultStandardSchemeFactory implements SchemeFactory {
      public GetNumSwitchPoints_resultStandardScheme getScheme() {
        return new GetNumSwitchPoints_resultStandardScheme();
      }
    }

    private static class GetNumSwitchPoints_resultStandardScheme extends StandardScheme<GetNumSwitchPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNumSwitchPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNumSwitchPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNumSwitchPoints_resultTupleSchemeFactory implements SchemeFactory {
      public GetNumSwitchPoints_resultTupleScheme getScheme() {
        return new GetNumSwitchPoints_resultTupleScheme();
      }
    }

    private static class GetNumSwitchPoints_resultTupleScheme extends TupleScheme<GetNumSwitchPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNumSwitchPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNumSwitchPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSwitchPoint_args implements org.apache.thrift.TBase<SetSwitchPoint_args, SetSwitchPoint_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSwitchPoint_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("_hours", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _MINUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("_minutes", org.apache.thrift.protocol.TType.BYTE, (short)3);
    private static final org.apache.thrift.protocol.TField _SETBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("_setback", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSwitchPoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSwitchPoint_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public byte _hours; // required
    public byte _minutes; // required
    public byte _setback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _HOURS((short)2, "_hours"),
      _MINUTES((short)3, "_minutes"),
      _SETBACK((short)4, "_setback");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _HOURS
            return _HOURS;
          case 3: // _MINUTES
            return _MINUTES;
          case 4: // _SETBACK
            return _SETBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOURS_ISSET_ID = 0;
    private static final int ___MINUTES_ISSET_ID = 1;
    private static final int ___SETBACK_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._HOURS, new org.apache.thrift.meta_data.FieldMetaData("_hours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._MINUTES, new org.apache.thrift.meta_data.FieldMetaData("_minutes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._SETBACK, new org.apache.thrift.meta_data.FieldMetaData("_setback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSwitchPoint_args.class, metaDataMap);
    }

    public SetSwitchPoint_args() {
    }

    public SetSwitchPoint_args(
      RemoteValueID _id,
      byte _hours,
      byte _minutes,
      byte _setback)
    {
      this();
      this._id = _id;
      this._hours = _hours;
      set_hoursIsSet(true);
      this._minutes = _minutes;
      set_minutesIsSet(true);
      this._setback = _setback;
      set_setbackIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSwitchPoint_args(SetSwitchPoint_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._hours = other._hours;
      this._minutes = other._minutes;
      this._setback = other._setback;
    }

    public SetSwitchPoint_args deepCopy() {
      return new SetSwitchPoint_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_hoursIsSet(false);
      this._hours = 0;
      set_minutesIsSet(false);
      this._minutes = 0;
      set_setbackIsSet(false);
      this._setback = 0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public SetSwitchPoint_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public byte get_hours() {
      return this._hours;
    }

    public SetSwitchPoint_args set_hours(byte _hours) {
      this._hours = _hours;
      set_hoursIsSet(true);
      return this;
    }

    public void unset_hours() {
      __isset_bit_vector.clear(___HOURS_ISSET_ID);
    }

    /** Returns true if field _hours is set (has been assigned a value) and false otherwise */
    public boolean isSet_hours() {
      return __isset_bit_vector.get(___HOURS_ISSET_ID);
    }

    public void set_hoursIsSet(boolean value) {
      __isset_bit_vector.set(___HOURS_ISSET_ID, value);
    }

    public byte get_minutes() {
      return this._minutes;
    }

    public SetSwitchPoint_args set_minutes(byte _minutes) {
      this._minutes = _minutes;
      set_minutesIsSet(true);
      return this;
    }

    public void unset_minutes() {
      __isset_bit_vector.clear(___MINUTES_ISSET_ID);
    }

    /** Returns true if field _minutes is set (has been assigned a value) and false otherwise */
    public boolean isSet_minutes() {
      return __isset_bit_vector.get(___MINUTES_ISSET_ID);
    }

    public void set_minutesIsSet(boolean value) {
      __isset_bit_vector.set(___MINUTES_ISSET_ID, value);
    }

    public byte get_setback() {
      return this._setback;
    }

    public SetSwitchPoint_args set_setback(byte _setback) {
      this._setback = _setback;
      set_setbackIsSet(true);
      return this;
    }

    public void unset_setback() {
      __isset_bit_vector.clear(___SETBACK_ISSET_ID);
    }

    /** Returns true if field _setback is set (has been assigned a value) and false otherwise */
    public boolean isSet_setback() {
      return __isset_bit_vector.get(___SETBACK_ISSET_ID);
    }

    public void set_setbackIsSet(boolean value) {
      __isset_bit_vector.set(___SETBACK_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _HOURS:
        if (value == null) {
          unset_hours();
        } else {
          set_hours((Byte)value);
        }
        break;

      case _MINUTES:
        if (value == null) {
          unset_minutes();
        } else {
          set_minutes((Byte)value);
        }
        break;

      case _SETBACK:
        if (value == null) {
          unset_setback();
        } else {
          set_setback((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _HOURS:
        return Byte.valueOf(get_hours());

      case _MINUTES:
        return Byte.valueOf(get_minutes());

      case _SETBACK:
        return Byte.valueOf(get_setback());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _HOURS:
        return isSet_hours();
      case _MINUTES:
        return isSet_minutes();
      case _SETBACK:
        return isSet_setback();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSwitchPoint_args)
        return this.equals((SetSwitchPoint_args)that);
      return false;
    }

    public boolean equals(SetSwitchPoint_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__hours = true;
      boolean that_present__hours = true;
      if (this_present__hours || that_present__hours) {
        if (!(this_present__hours && that_present__hours))
          return false;
        if (this._hours != that._hours)
          return false;
      }

      boolean this_present__minutes = true;
      boolean that_present__minutes = true;
      if (this_present__minutes || that_present__minutes) {
        if (!(this_present__minutes && that_present__minutes))
          return false;
        if (this._minutes != that._minutes)
          return false;
      }

      boolean this_present__setback = true;
      boolean that_present__setback = true;
      if (this_present__setback || that_present__setback) {
        if (!(this_present__setback && that_present__setback))
          return false;
        if (this._setback != that._setback)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSwitchPoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSwitchPoint_args typedOther = (SetSwitchPoint_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_hours()).compareTo(typedOther.isSet_hours());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_hours()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._hours, typedOther._hours);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_minutes()).compareTo(typedOther.isSet_minutes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_minutes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._minutes, typedOther._minutes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_setback()).compareTo(typedOther.isSet_setback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_setback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._setback, typedOther._setback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSwitchPoint_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_hours:");
      sb.append(this._hours);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_minutes:");
      sb.append(this._minutes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_setback:");
      sb.append(this._setback);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSwitchPoint_argsStandardSchemeFactory implements SchemeFactory {
      public SetSwitchPoint_argsStandardScheme getScheme() {
        return new SetSwitchPoint_argsStandardScheme();
      }
    }

    private static class SetSwitchPoint_argsStandardScheme extends StandardScheme<SetSwitchPoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSwitchPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _HOURS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._hours = iprot.readByte();
                struct.set_hoursIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _MINUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._minutes = iprot.readByte();
                struct.set_minutesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // _SETBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._setback = iprot.readByte();
                struct.set_setbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSwitchPoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_HOURS_FIELD_DESC);
        oprot.writeByte(struct._hours);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_MINUTES_FIELD_DESC);
        oprot.writeByte(struct._minutes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_SETBACK_FIELD_DESC);
        oprot.writeByte(struct._setback);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSwitchPoint_argsTupleSchemeFactory implements SchemeFactory {
      public SetSwitchPoint_argsTupleScheme getScheme() {
        return new SetSwitchPoint_argsTupleScheme();
      }
    }

    private static class SetSwitchPoint_argsTupleScheme extends TupleScheme<SetSwitchPoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSwitchPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_hours()) {
          optionals.set(1);
        }
        if (struct.isSet_minutes()) {
          optionals.set(2);
        }
        if (struct.isSet_setback()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_hours()) {
          oprot.writeByte(struct._hours);
        }
        if (struct.isSet_minutes()) {
          oprot.writeByte(struct._minutes);
        }
        if (struct.isSet_setback()) {
          oprot.writeByte(struct._setback);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSwitchPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._hours = iprot.readByte();
          struct.set_hoursIsSet(true);
        }
        if (incoming.get(2)) {
          struct._minutes = iprot.readByte();
          struct.set_minutesIsSet(true);
        }
        if (incoming.get(3)) {
          struct._setback = iprot.readByte();
          struct.set_setbackIsSet(true);
        }
      }
    }

  }

  public static class SetSwitchPoint_result implements org.apache.thrift.TBase<SetSwitchPoint_result, SetSwitchPoint_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSwitchPoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSwitchPoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSwitchPoint_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSwitchPoint_result.class, metaDataMap);
    }

    public SetSwitchPoint_result() {
    }

    public SetSwitchPoint_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSwitchPoint_result(SetSwitchPoint_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSwitchPoint_result deepCopy() {
      return new SetSwitchPoint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSwitchPoint_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSwitchPoint_result)
        return this.equals((SetSwitchPoint_result)that);
      return false;
    }

    public boolean equals(SetSwitchPoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSwitchPoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSwitchPoint_result typedOther = (SetSwitchPoint_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSwitchPoint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSwitchPoint_resultStandardSchemeFactory implements SchemeFactory {
      public SetSwitchPoint_resultStandardScheme getScheme() {
        return new SetSwitchPoint_resultStandardScheme();
      }
    }

    private static class SetSwitchPoint_resultStandardScheme extends StandardScheme<SetSwitchPoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSwitchPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSwitchPoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSwitchPoint_resultTupleSchemeFactory implements SchemeFactory {
      public SetSwitchPoint_resultTupleScheme getScheme() {
        return new SetSwitchPoint_resultTupleScheme();
      }
    }

    private static class SetSwitchPoint_resultTupleScheme extends TupleScheme<SetSwitchPoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSwitchPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSwitchPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveSwitchPoint_args implements org.apache.thrift.TBase<RemoveSwitchPoint_args, RemoveSwitchPoint_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveSwitchPoint_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("_hours", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _MINUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("_minutes", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveSwitchPoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveSwitchPoint_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public byte _hours; // required
    public byte _minutes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _HOURS((short)2, "_hours"),
      _MINUTES((short)3, "_minutes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _HOURS
            return _HOURS;
          case 3: // _MINUTES
            return _MINUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOURS_ISSET_ID = 0;
    private static final int ___MINUTES_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._HOURS, new org.apache.thrift.meta_data.FieldMetaData("_hours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._MINUTES, new org.apache.thrift.meta_data.FieldMetaData("_minutes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveSwitchPoint_args.class, metaDataMap);
    }

    public RemoveSwitchPoint_args() {
    }

    public RemoveSwitchPoint_args(
      RemoteValueID _id,
      byte _hours,
      byte _minutes)
    {
      this();
      this._id = _id;
      this._hours = _hours;
      set_hoursIsSet(true);
      this._minutes = _minutes;
      set_minutesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveSwitchPoint_args(RemoveSwitchPoint_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._hours = other._hours;
      this._minutes = other._minutes;
    }

    public RemoveSwitchPoint_args deepCopy() {
      return new RemoveSwitchPoint_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_hoursIsSet(false);
      this._hours = 0;
      set_minutesIsSet(false);
      this._minutes = 0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public RemoveSwitchPoint_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public byte get_hours() {
      return this._hours;
    }

    public RemoveSwitchPoint_args set_hours(byte _hours) {
      this._hours = _hours;
      set_hoursIsSet(true);
      return this;
    }

    public void unset_hours() {
      __isset_bit_vector.clear(___HOURS_ISSET_ID);
    }

    /** Returns true if field _hours is set (has been assigned a value) and false otherwise */
    public boolean isSet_hours() {
      return __isset_bit_vector.get(___HOURS_ISSET_ID);
    }

    public void set_hoursIsSet(boolean value) {
      __isset_bit_vector.set(___HOURS_ISSET_ID, value);
    }

    public byte get_minutes() {
      return this._minutes;
    }

    public RemoveSwitchPoint_args set_minutes(byte _minutes) {
      this._minutes = _minutes;
      set_minutesIsSet(true);
      return this;
    }

    public void unset_minutes() {
      __isset_bit_vector.clear(___MINUTES_ISSET_ID);
    }

    /** Returns true if field _minutes is set (has been assigned a value) and false otherwise */
    public boolean isSet_minutes() {
      return __isset_bit_vector.get(___MINUTES_ISSET_ID);
    }

    public void set_minutesIsSet(boolean value) {
      __isset_bit_vector.set(___MINUTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _HOURS:
        if (value == null) {
          unset_hours();
        } else {
          set_hours((Byte)value);
        }
        break;

      case _MINUTES:
        if (value == null) {
          unset_minutes();
        } else {
          set_minutes((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _HOURS:
        return Byte.valueOf(get_hours());

      case _MINUTES:
        return Byte.valueOf(get_minutes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _HOURS:
        return isSet_hours();
      case _MINUTES:
        return isSet_minutes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveSwitchPoint_args)
        return this.equals((RemoveSwitchPoint_args)that);
      return false;
    }

    public boolean equals(RemoveSwitchPoint_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__hours = true;
      boolean that_present__hours = true;
      if (this_present__hours || that_present__hours) {
        if (!(this_present__hours && that_present__hours))
          return false;
        if (this._hours != that._hours)
          return false;
      }

      boolean this_present__minutes = true;
      boolean that_present__minutes = true;
      if (this_present__minutes || that_present__minutes) {
        if (!(this_present__minutes && that_present__minutes))
          return false;
        if (this._minutes != that._minutes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveSwitchPoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveSwitchPoint_args typedOther = (RemoveSwitchPoint_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_hours()).compareTo(typedOther.isSet_hours());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_hours()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._hours, typedOther._hours);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_minutes()).compareTo(typedOther.isSet_minutes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_minutes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._minutes, typedOther._minutes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveSwitchPoint_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_hours:");
      sb.append(this._hours);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_minutes:");
      sb.append(this._minutes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveSwitchPoint_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveSwitchPoint_argsStandardScheme getScheme() {
        return new RemoveSwitchPoint_argsStandardScheme();
      }
    }

    private static class RemoveSwitchPoint_argsStandardScheme extends StandardScheme<RemoveSwitchPoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveSwitchPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _HOURS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._hours = iprot.readByte();
                struct.set_hoursIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _MINUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._minutes = iprot.readByte();
                struct.set_minutesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveSwitchPoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_HOURS_FIELD_DESC);
        oprot.writeByte(struct._hours);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_MINUTES_FIELD_DESC);
        oprot.writeByte(struct._minutes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveSwitchPoint_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveSwitchPoint_argsTupleScheme getScheme() {
        return new RemoveSwitchPoint_argsTupleScheme();
      }
    }

    private static class RemoveSwitchPoint_argsTupleScheme extends TupleScheme<RemoveSwitchPoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveSwitchPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_hours()) {
          optionals.set(1);
        }
        if (struct.isSet_minutes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_hours()) {
          oprot.writeByte(struct._hours);
        }
        if (struct.isSet_minutes()) {
          oprot.writeByte(struct._minutes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveSwitchPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._hours = iprot.readByte();
          struct.set_hoursIsSet(true);
        }
        if (incoming.get(2)) {
          struct._minutes = iprot.readByte();
          struct.set_minutesIsSet(true);
        }
      }
    }

  }

  public static class RemoveSwitchPoint_result implements org.apache.thrift.TBase<RemoveSwitchPoint_result, RemoveSwitchPoint_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveSwitchPoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveSwitchPoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveSwitchPoint_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveSwitchPoint_result.class, metaDataMap);
    }

    public RemoveSwitchPoint_result() {
    }

    public RemoveSwitchPoint_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveSwitchPoint_result(RemoveSwitchPoint_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveSwitchPoint_result deepCopy() {
      return new RemoveSwitchPoint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveSwitchPoint_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveSwitchPoint_result)
        return this.equals((RemoveSwitchPoint_result)that);
      return false;
    }

    public boolean equals(RemoveSwitchPoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveSwitchPoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveSwitchPoint_result typedOther = (RemoveSwitchPoint_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveSwitchPoint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveSwitchPoint_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveSwitchPoint_resultStandardScheme getScheme() {
        return new RemoveSwitchPoint_resultStandardScheme();
      }
    }

    private static class RemoveSwitchPoint_resultStandardScheme extends StandardScheme<RemoveSwitchPoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveSwitchPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveSwitchPoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveSwitchPoint_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveSwitchPoint_resultTupleScheme getScheme() {
        return new RemoveSwitchPoint_resultTupleScheme();
      }
    }

    private static class RemoveSwitchPoint_resultTupleScheme extends TupleScheme<RemoveSwitchPoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveSwitchPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveSwitchPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ClearSwitchPoints_args implements org.apache.thrift.TBase<ClearSwitchPoints_args, ClearSwitchPoints_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearSwitchPoints_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ClearSwitchPoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ClearSwitchPoints_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearSwitchPoints_args.class, metaDataMap);
    }

    public ClearSwitchPoints_args() {
    }

    public ClearSwitchPoints_args(
      RemoteValueID _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ClearSwitchPoints_args(ClearSwitchPoints_args other) {
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
    }

    public ClearSwitchPoints_args deepCopy() {
      return new ClearSwitchPoints_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public ClearSwitchPoints_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ClearSwitchPoints_args)
        return this.equals((ClearSwitchPoints_args)that);
      return false;
    }

    public boolean equals(ClearSwitchPoints_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ClearSwitchPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ClearSwitchPoints_args typedOther = (ClearSwitchPoints_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ClearSwitchPoints_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ClearSwitchPoints_argsStandardSchemeFactory implements SchemeFactory {
      public ClearSwitchPoints_argsStandardScheme getScheme() {
        return new ClearSwitchPoints_argsStandardScheme();
      }
    }

    private static class ClearSwitchPoints_argsStandardScheme extends StandardScheme<ClearSwitchPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ClearSwitchPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ClearSwitchPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ClearSwitchPoints_argsTupleSchemeFactory implements SchemeFactory {
      public ClearSwitchPoints_argsTupleScheme getScheme() {
        return new ClearSwitchPoints_argsTupleScheme();
      }
    }

    private static class ClearSwitchPoints_argsTupleScheme extends TupleScheme<ClearSwitchPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ClearSwitchPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ClearSwitchPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class ClearSwitchPoints_result implements org.apache.thrift.TBase<ClearSwitchPoints_result, ClearSwitchPoints_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearSwitchPoints_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ClearSwitchPoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ClearSwitchPoints_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearSwitchPoints_result.class, metaDataMap);
    }

    public ClearSwitchPoints_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ClearSwitchPoints_result(ClearSwitchPoints_result other) {
    }

    public ClearSwitchPoints_result deepCopy() {
      return new ClearSwitchPoints_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ClearSwitchPoints_result)
        return this.equals((ClearSwitchPoints_result)that);
      return false;
    }

    public boolean equals(ClearSwitchPoints_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ClearSwitchPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ClearSwitchPoints_result typedOther = (ClearSwitchPoints_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ClearSwitchPoints_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ClearSwitchPoints_resultStandardSchemeFactory implements SchemeFactory {
      public ClearSwitchPoints_resultStandardScheme getScheme() {
        return new ClearSwitchPoints_resultStandardScheme();
      }
    }

    private static class ClearSwitchPoints_resultStandardScheme extends StandardScheme<ClearSwitchPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ClearSwitchPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ClearSwitchPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ClearSwitchPoints_resultTupleSchemeFactory implements SchemeFactory {
      public ClearSwitchPoints_resultTupleScheme getScheme() {
        return new ClearSwitchPoints_resultTupleScheme();
      }
    }

    private static class ClearSwitchPoints_resultTupleScheme extends TupleScheme<ClearSwitchPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ClearSwitchPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ClearSwitchPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetSwitchPoint_args implements org.apache.thrift.TBase<GetSwitchPoint_args, GetSwitchPoint_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwitchPoint_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField _IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("_idx", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSwitchPoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSwitchPoint_argsTupleSchemeFactory());
    }

    public RemoteValueID _id; // required
    public byte _idx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id"),
      _IDX((short)2, "_idx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          case 2: // _IDX
            return _IDX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___IDX_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._IDX, new org.apache.thrift.meta_data.FieldMetaData("_idx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwitchPoint_args.class, metaDataMap);
    }

    public GetSwitchPoint_args() {
    }

    public GetSwitchPoint_args(
      RemoteValueID _id,
      byte _idx)
    {
      this();
      this._id = _id;
      this._idx = _idx;
      set_idxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSwitchPoint_args(GetSwitchPoint_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSet_id()) {
        this._id = new RemoteValueID(other._id);
      }
      this._idx = other._idx;
    }

    public GetSwitchPoint_args deepCopy() {
      return new GetSwitchPoint_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
      set_idxIsSet(false);
      this._idx = 0;
    }

    public RemoteValueID get_id() {
      return this._id;
    }

    public GetSwitchPoint_args set_id(RemoteValueID _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public byte get_idx() {
      return this._idx;
    }

    public GetSwitchPoint_args set_idx(byte _idx) {
      this._idx = _idx;
      set_idxIsSet(true);
      return this;
    }

    public void unset_idx() {
      __isset_bit_vector.clear(___IDX_ISSET_ID);
    }

    /** Returns true if field _idx is set (has been assigned a value) and false otherwise */
    public boolean isSet_idx() {
      return __isset_bit_vector.get(___IDX_ISSET_ID);
    }

    public void set_idxIsSet(boolean value) {
      __isset_bit_vector.set(___IDX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((RemoteValueID)value);
        }
        break;

      case _IDX:
        if (value == null) {
          unset_idx();
        } else {
          set_idx((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      case _IDX:
        return Byte.valueOf(get_idx());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      case _IDX:
        return isSet_idx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSwitchPoint_args)
        return this.equals((GetSwitchPoint_args)that);
      return false;
    }

    public boolean equals(GetSwitchPoint_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      boolean this_present__idx = true;
      boolean that_present__idx = true;
      if (this_present__idx || that_present__idx) {
        if (!(this_present__idx && that_present__idx))
          return false;
        if (this._idx != that._idx)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetSwitchPoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetSwitchPoint_args typedOther = (GetSwitchPoint_args)other;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(typedOther.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, typedOther._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_idx()).compareTo(typedOther.isSet_idx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_idx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._idx, typedOther._idx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSwitchPoint_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_idx:");
      sb.append(this._idx);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSwitchPoint_argsStandardSchemeFactory implements SchemeFactory {
      public GetSwitchPoint_argsStandardScheme getScheme() {
        return new GetSwitchPoint_argsStandardScheme();
      }
    }

    private static class GetSwitchPoint_argsStandardScheme extends StandardScheme<GetSwitchPoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwitchPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._id = new RemoteValueID();
                struct._id.read(iprot);
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._idx = iprot.readByte();
                struct.set_idxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwitchPoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          struct._id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_IDX_FIELD_DESC);
        oprot.writeByte(struct._idx);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSwitchPoint_argsTupleSchemeFactory implements SchemeFactory {
      public GetSwitchPoint_argsTupleScheme getScheme() {
        return new GetSwitchPoint_argsTupleScheme();
      }
    }

    private static class GetSwitchPoint_argsTupleScheme extends TupleScheme<GetSwitchPoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSwitchPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        if (struct.isSet_idx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_id()) {
          struct._id.write(oprot);
        }
        if (struct.isSet_idx()) {
          oprot.writeByte(struct._idx);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSwitchPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._id = new RemoteValueID();
          struct._id.read(iprot);
          struct.set_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct._idx = iprot.readByte();
          struct.set_idxIsSet(true);
        }
      }
    }

  }

  public static class GetSwitchPoint_result implements org.apache.thrift.TBase<GetSwitchPoint_result, GetSwitchPoint_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwitchPoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSwitchPoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSwitchPoint_resultTupleSchemeFactory());
    }

    public GetSwitchPointReturnStruct success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetSwitchPointReturnStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwitchPoint_result.class, metaDataMap);
    }

    public GetSwitchPoint_result() {
    }

    public GetSwitchPoint_result(
      GetSwitchPointReturnStruct success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSwitchPoint_result(GetSwitchPoint_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetSwitchPointReturnStruct(other.success);
      }
    }

    public GetSwitchPoint_result deepCopy() {
      return new GetSwitchPoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetSwitchPointReturnStruct getSuccess() {
      return this.success;
    }

    public GetSwitchPoint_result setSuccess(GetSwitchPointReturnStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetSwitchPointReturnStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSwitchPoint_result)
        return this.equals((GetSwitchPoint_result)that);
      return false;
    }

    public boolean equals(GetSwitchPoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetSwitchPoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetSwitchPoint_result typedOther = (GetSwitchPoint_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSwitchPoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSwitchPoint_resultStandardSchemeFactory implements SchemeFactory {
      public GetSwitchPoint_resultStandardScheme getScheme() {
        return new GetSwitchPoint_resultStandardScheme();
      }
    }

    private static class GetSwitchPoint_resultStandardScheme extends StandardScheme<GetSwitchPoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwitchPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetSwitchPointReturnStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwitchPoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSwitchPoint_resultTupleSchemeFactory implements SchemeFactory {
      public GetSwitchPoint_resultTupleScheme getScheme() {
        return new GetSwitchPoint_resultTupleScheme();
      }
    }

    private static class GetSwitchPoint_resultTupleScheme extends TupleScheme<GetSwitchPoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSwitchPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSwitchPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetSwitchPointReturnStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SwitchAllOn_args implements org.apache.thrift.TBase<SwitchAllOn_args, SwitchAllOn_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SwitchAllOn_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SwitchAllOn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SwitchAllOn_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SwitchAllOn_args.class, metaDataMap);
    }

    public SwitchAllOn_args() {
    }

    public SwitchAllOn_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SwitchAllOn_args(SwitchAllOn_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public SwitchAllOn_args deepCopy() {
      return new SwitchAllOn_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SwitchAllOn_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SwitchAllOn_args)
        return this.equals((SwitchAllOn_args)that);
      return false;
    }

    public boolean equals(SwitchAllOn_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SwitchAllOn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SwitchAllOn_args typedOther = (SwitchAllOn_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SwitchAllOn_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SwitchAllOn_argsStandardSchemeFactory implements SchemeFactory {
      public SwitchAllOn_argsStandardScheme getScheme() {
        return new SwitchAllOn_argsStandardScheme();
      }
    }

    private static class SwitchAllOn_argsStandardScheme extends StandardScheme<SwitchAllOn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SwitchAllOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SwitchAllOn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SwitchAllOn_argsTupleSchemeFactory implements SchemeFactory {
      public SwitchAllOn_argsTupleScheme getScheme() {
        return new SwitchAllOn_argsTupleScheme();
      }
    }

    private static class SwitchAllOn_argsTupleScheme extends TupleScheme<SwitchAllOn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SwitchAllOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SwitchAllOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class SwitchAllOn_result implements org.apache.thrift.TBase<SwitchAllOn_result, SwitchAllOn_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SwitchAllOn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SwitchAllOn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SwitchAllOn_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SwitchAllOn_result.class, metaDataMap);
    }

    public SwitchAllOn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SwitchAllOn_result(SwitchAllOn_result other) {
    }

    public SwitchAllOn_result deepCopy() {
      return new SwitchAllOn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SwitchAllOn_result)
        return this.equals((SwitchAllOn_result)that);
      return false;
    }

    public boolean equals(SwitchAllOn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SwitchAllOn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SwitchAllOn_result typedOther = (SwitchAllOn_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SwitchAllOn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SwitchAllOn_resultStandardSchemeFactory implements SchemeFactory {
      public SwitchAllOn_resultStandardScheme getScheme() {
        return new SwitchAllOn_resultStandardScheme();
      }
    }

    private static class SwitchAllOn_resultStandardScheme extends StandardScheme<SwitchAllOn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SwitchAllOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SwitchAllOn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SwitchAllOn_resultTupleSchemeFactory implements SchemeFactory {
      public SwitchAllOn_resultTupleScheme getScheme() {
        return new SwitchAllOn_resultTupleScheme();
      }
    }

    private static class SwitchAllOn_resultTupleScheme extends TupleScheme<SwitchAllOn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SwitchAllOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SwitchAllOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SwitchAllOff_args implements org.apache.thrift.TBase<SwitchAllOff_args, SwitchAllOff_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SwitchAllOff_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SwitchAllOff_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SwitchAllOff_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SwitchAllOff_args.class, metaDataMap);
    }

    public SwitchAllOff_args() {
    }

    public SwitchAllOff_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SwitchAllOff_args(SwitchAllOff_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public SwitchAllOff_args deepCopy() {
      return new SwitchAllOff_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SwitchAllOff_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SwitchAllOff_args)
        return this.equals((SwitchAllOff_args)that);
      return false;
    }

    public boolean equals(SwitchAllOff_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SwitchAllOff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SwitchAllOff_args typedOther = (SwitchAllOff_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SwitchAllOff_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SwitchAllOff_argsStandardSchemeFactory implements SchemeFactory {
      public SwitchAllOff_argsStandardScheme getScheme() {
        return new SwitchAllOff_argsStandardScheme();
      }
    }

    private static class SwitchAllOff_argsStandardScheme extends StandardScheme<SwitchAllOff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SwitchAllOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SwitchAllOff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SwitchAllOff_argsTupleSchemeFactory implements SchemeFactory {
      public SwitchAllOff_argsTupleScheme getScheme() {
        return new SwitchAllOff_argsTupleScheme();
      }
    }

    private static class SwitchAllOff_argsTupleScheme extends TupleScheme<SwitchAllOff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SwitchAllOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SwitchAllOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class SwitchAllOff_result implements org.apache.thrift.TBase<SwitchAllOff_result, SwitchAllOff_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SwitchAllOff_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SwitchAllOff_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SwitchAllOff_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SwitchAllOff_result.class, metaDataMap);
    }

    public SwitchAllOff_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SwitchAllOff_result(SwitchAllOff_result other) {
    }

    public SwitchAllOff_result deepCopy() {
      return new SwitchAllOff_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SwitchAllOff_result)
        return this.equals((SwitchAllOff_result)that);
      return false;
    }

    public boolean equals(SwitchAllOff_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SwitchAllOff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SwitchAllOff_result typedOther = (SwitchAllOff_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SwitchAllOff_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SwitchAllOff_resultStandardSchemeFactory implements SchemeFactory {
      public SwitchAllOff_resultStandardScheme getScheme() {
        return new SwitchAllOff_resultStandardScheme();
      }
    }

    private static class SwitchAllOff_resultStandardScheme extends StandardScheme<SwitchAllOff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SwitchAllOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SwitchAllOff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SwitchAllOff_resultTupleSchemeFactory implements SchemeFactory {
      public SwitchAllOff_resultTupleScheme getScheme() {
        return new SwitchAllOff_resultTupleScheme();
      }
    }

    private static class SwitchAllOff_resultTupleScheme extends TupleScheme<SwitchAllOff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SwitchAllOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SwitchAllOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SetConfigParam_args implements org.apache.thrift.TBase<SetConfigParam_args, SetConfigParam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetConfigParam_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("_param", org.apache.thrift.protocol.TType.BYTE, (short)3);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField _SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("_size", org.apache.thrift.protocol.TType.BYTE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetConfigParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetConfigParam_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _param; // required
    public int _value; // required
    public byte _size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _PARAM((short)3, "_param"),
      _VALUE((short)4, "_value"),
      _SIZE((short)5, "_size");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _PARAM
            return _PARAM;
          case 4: // _VALUE
            return _VALUE;
          case 5: // _SIZE
            return _SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___PARAM_ISSET_ID = 2;
    private static final int ___VALUE_ISSET_ID = 3;
    private static final int ___SIZE_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._PARAM, new org.apache.thrift.meta_data.FieldMetaData("_param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._SIZE, new org.apache.thrift.meta_data.FieldMetaData("_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetConfigParam_args.class, metaDataMap);
    }

    public SetConfigParam_args() {
      this._size = (byte)2;

    }

    public SetConfigParam_args(
      int _homeId,
      byte _nodeId,
      byte _param,
      int _value,
      byte _size)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._param = _param;
      set_paramIsSet(true);
      this._value = _value;
      set_valueIsSet(true);
      this._size = _size;
      set_sizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetConfigParam_args(SetConfigParam_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._param = other._param;
      this._value = other._value;
      this._size = other._size;
    }

    public SetConfigParam_args deepCopy() {
      return new SetConfigParam_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_paramIsSet(false);
      this._param = 0;
      set_valueIsSet(false);
      this._value = 0;
      this._size = (byte)2;

    }

    public int get_homeId() {
      return this._homeId;
    }

    public SetConfigParam_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public SetConfigParam_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_param() {
      return this._param;
    }

    public SetConfigParam_args set_param(byte _param) {
      this._param = _param;
      set_paramIsSet(true);
      return this;
    }

    public void unset_param() {
      __isset_bit_vector.clear(___PARAM_ISSET_ID);
    }

    /** Returns true if field _param is set (has been assigned a value) and false otherwise */
    public boolean isSet_param() {
      return __isset_bit_vector.get(___PARAM_ISSET_ID);
    }

    public void set_paramIsSet(boolean value) {
      __isset_bit_vector.set(___PARAM_ISSET_ID, value);
    }

    public int get_value() {
      return this._value;
    }

    public SetConfigParam_args set_value(int _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public byte get_size() {
      return this._size;
    }

    public SetConfigParam_args set_size(byte _size) {
      this._size = _size;
      set_sizeIsSet(true);
      return this;
    }

    public void unset_size() {
      __isset_bit_vector.clear(___SIZE_ISSET_ID);
    }

    /** Returns true if field _size is set (has been assigned a value) and false otherwise */
    public boolean isSet_size() {
      return __isset_bit_vector.get(___SIZE_ISSET_ID);
    }

    public void set_sizeIsSet(boolean value) {
      __isset_bit_vector.set(___SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _PARAM:
        if (value == null) {
          unset_param();
        } else {
          set_param((Byte)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Integer)value);
        }
        break;

      case _SIZE:
        if (value == null) {
          unset_size();
        } else {
          set_size((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _PARAM:
        return Byte.valueOf(get_param());

      case _VALUE:
        return Integer.valueOf(get_value());

      case _SIZE:
        return Byte.valueOf(get_size());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _PARAM:
        return isSet_param();
      case _VALUE:
        return isSet_value();
      case _SIZE:
        return isSet_size();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetConfigParam_args)
        return this.equals((SetConfigParam_args)that);
      return false;
    }

    public boolean equals(SetConfigParam_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__param = true;
      boolean that_present__param = true;
      if (this_present__param || that_present__param) {
        if (!(this_present__param && that_present__param))
          return false;
        if (this._param != that._param)
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      boolean this_present__size = true;
      boolean that_present__size = true;
      if (this_present__size || that_present__size) {
        if (!(this_present__size && that_present__size))
          return false;
        if (this._size != that._size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetConfigParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetConfigParam_args typedOther = (SetConfigParam_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_param()).compareTo(typedOther.isSet_param());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_param()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._param, typedOther._param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_size()).compareTo(typedOther.isSet_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._size, typedOther._size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetConfigParam_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_param:");
      sb.append(this._param);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_size:");
      sb.append(this._size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetConfigParam_argsStandardSchemeFactory implements SchemeFactory {
      public SetConfigParam_argsStandardScheme getScheme() {
        return new SetConfigParam_argsStandardScheme();
      }
    }

    private static class SetConfigParam_argsStandardScheme extends StandardScheme<SetConfigParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetConfigParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._param = iprot.readByte();
                struct.set_paramIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._value = iprot.readI32();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // _SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._size = iprot.readByte();
                struct.set_sizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetConfigParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_PARAM_FIELD_DESC);
        oprot.writeByte(struct._param);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI32(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_SIZE_FIELD_DESC);
        oprot.writeByte(struct._size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetConfigParam_argsTupleSchemeFactory implements SchemeFactory {
      public SetConfigParam_argsTupleScheme getScheme() {
        return new SetConfigParam_argsTupleScheme();
      }
    }

    private static class SetConfigParam_argsTupleScheme extends TupleScheme<SetConfigParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetConfigParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_param()) {
          optionals.set(2);
        }
        if (struct.isSet_value()) {
          optionals.set(3);
        }
        if (struct.isSet_size()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_param()) {
          oprot.writeByte(struct._param);
        }
        if (struct.isSet_value()) {
          oprot.writeI32(struct._value);
        }
        if (struct.isSet_size()) {
          oprot.writeByte(struct._size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetConfigParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._param = iprot.readByte();
          struct.set_paramIsSet(true);
        }
        if (incoming.get(3)) {
          struct._value = iprot.readI32();
          struct.set_valueIsSet(true);
        }
        if (incoming.get(4)) {
          struct._size = iprot.readByte();
          struct.set_sizeIsSet(true);
        }
      }
    }

  }

  public static class SetConfigParam_result implements org.apache.thrift.TBase<SetConfigParam_result, SetConfigParam_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetConfigParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetConfigParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetConfigParam_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetConfigParam_result.class, metaDataMap);
    }

    public SetConfigParam_result() {
    }

    public SetConfigParam_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetConfigParam_result(SetConfigParam_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetConfigParam_result deepCopy() {
      return new SetConfigParam_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetConfigParam_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetConfigParam_result)
        return this.equals((SetConfigParam_result)that);
      return false;
    }

    public boolean equals(SetConfigParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetConfigParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetConfigParam_result typedOther = (SetConfigParam_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetConfigParam_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetConfigParam_resultStandardSchemeFactory implements SchemeFactory {
      public SetConfigParam_resultStandardScheme getScheme() {
        return new SetConfigParam_resultStandardScheme();
      }
    }

    private static class SetConfigParam_resultStandardScheme extends StandardScheme<SetConfigParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetConfigParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetConfigParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetConfigParam_resultTupleSchemeFactory implements SchemeFactory {
      public SetConfigParam_resultTupleScheme getScheme() {
        return new SetConfigParam_resultTupleScheme();
      }
    }

    private static class SetConfigParam_resultTupleScheme extends TupleScheme<SetConfigParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetConfigParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetConfigParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RequestConfigParam_args implements org.apache.thrift.TBase<RequestConfigParam_args, RequestConfigParam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestConfigParam_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("_param", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestConfigParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestConfigParam_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _PARAM((short)3, "_param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _PARAM
            return _PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___PARAM_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._PARAM, new org.apache.thrift.meta_data.FieldMetaData("_param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestConfigParam_args.class, metaDataMap);
    }

    public RequestConfigParam_args() {
    }

    public RequestConfigParam_args(
      int _homeId,
      byte _nodeId,
      byte _param)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._param = _param;
      set_paramIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestConfigParam_args(RequestConfigParam_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._param = other._param;
    }

    public RequestConfigParam_args deepCopy() {
      return new RequestConfigParam_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_paramIsSet(false);
      this._param = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public RequestConfigParam_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public RequestConfigParam_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_param() {
      return this._param;
    }

    public RequestConfigParam_args set_param(byte _param) {
      this._param = _param;
      set_paramIsSet(true);
      return this;
    }

    public void unset_param() {
      __isset_bit_vector.clear(___PARAM_ISSET_ID);
    }

    /** Returns true if field _param is set (has been assigned a value) and false otherwise */
    public boolean isSet_param() {
      return __isset_bit_vector.get(___PARAM_ISSET_ID);
    }

    public void set_paramIsSet(boolean value) {
      __isset_bit_vector.set(___PARAM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _PARAM:
        if (value == null) {
          unset_param();
        } else {
          set_param((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _PARAM:
        return Byte.valueOf(get_param());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _PARAM:
        return isSet_param();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestConfigParam_args)
        return this.equals((RequestConfigParam_args)that);
      return false;
    }

    public boolean equals(RequestConfigParam_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__param = true;
      boolean that_present__param = true;
      if (this_present__param || that_present__param) {
        if (!(this_present__param && that_present__param))
          return false;
        if (this._param != that._param)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestConfigParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestConfigParam_args typedOther = (RequestConfigParam_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_param()).compareTo(typedOther.isSet_param());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_param()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._param, typedOther._param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestConfigParam_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_param:");
      sb.append(this._param);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestConfigParam_argsStandardSchemeFactory implements SchemeFactory {
      public RequestConfigParam_argsStandardScheme getScheme() {
        return new RequestConfigParam_argsStandardScheme();
      }
    }

    private static class RequestConfigParam_argsStandardScheme extends StandardScheme<RequestConfigParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestConfigParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._param = iprot.readByte();
                struct.set_paramIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestConfigParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_PARAM_FIELD_DESC);
        oprot.writeByte(struct._param);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestConfigParam_argsTupleSchemeFactory implements SchemeFactory {
      public RequestConfigParam_argsTupleScheme getScheme() {
        return new RequestConfigParam_argsTupleScheme();
      }
    }

    private static class RequestConfigParam_argsTupleScheme extends TupleScheme<RequestConfigParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestConfigParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_param()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_param()) {
          oprot.writeByte(struct._param);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestConfigParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._param = iprot.readByte();
          struct.set_paramIsSet(true);
        }
      }
    }

  }

  public static class RequestConfigParam_result implements org.apache.thrift.TBase<RequestConfigParam_result, RequestConfigParam_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestConfigParam_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestConfigParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestConfigParam_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestConfigParam_result.class, metaDataMap);
    }

    public RequestConfigParam_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestConfigParam_result(RequestConfigParam_result other) {
    }

    public RequestConfigParam_result deepCopy() {
      return new RequestConfigParam_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestConfigParam_result)
        return this.equals((RequestConfigParam_result)that);
      return false;
    }

    public boolean equals(RequestConfigParam_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestConfigParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestConfigParam_result typedOther = (RequestConfigParam_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestConfigParam_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestConfigParam_resultStandardSchemeFactory implements SchemeFactory {
      public RequestConfigParam_resultStandardScheme getScheme() {
        return new RequestConfigParam_resultStandardScheme();
      }
    }

    private static class RequestConfigParam_resultStandardScheme extends StandardScheme<RequestConfigParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestConfigParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestConfigParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestConfigParam_resultTupleSchemeFactory implements SchemeFactory {
      public RequestConfigParam_resultTupleScheme getScheme() {
        return new RequestConfigParam_resultTupleScheme();
      }
    }

    private static class RequestConfigParam_resultTupleScheme extends TupleScheme<RequestConfigParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestConfigParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestConfigParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class RequestAllConfigParams_args implements org.apache.thrift.TBase<RequestAllConfigParams_args, RequestAllConfigParams_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestAllConfigParams_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestAllConfigParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestAllConfigParams_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestAllConfigParams_args.class, metaDataMap);
    }

    public RequestAllConfigParams_args() {
    }

    public RequestAllConfigParams_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestAllConfigParams_args(RequestAllConfigParams_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public RequestAllConfigParams_args deepCopy() {
      return new RequestAllConfigParams_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public RequestAllConfigParams_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public RequestAllConfigParams_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestAllConfigParams_args)
        return this.equals((RequestAllConfigParams_args)that);
      return false;
    }

    public boolean equals(RequestAllConfigParams_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestAllConfigParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestAllConfigParams_args typedOther = (RequestAllConfigParams_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestAllConfigParams_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestAllConfigParams_argsStandardSchemeFactory implements SchemeFactory {
      public RequestAllConfigParams_argsStandardScheme getScheme() {
        return new RequestAllConfigParams_argsStandardScheme();
      }
    }

    private static class RequestAllConfigParams_argsStandardScheme extends StandardScheme<RequestAllConfigParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestAllConfigParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestAllConfigParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestAllConfigParams_argsTupleSchemeFactory implements SchemeFactory {
      public RequestAllConfigParams_argsTupleScheme getScheme() {
        return new RequestAllConfigParams_argsTupleScheme();
      }
    }

    private static class RequestAllConfigParams_argsTupleScheme extends TupleScheme<RequestAllConfigParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestAllConfigParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestAllConfigParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class RequestAllConfigParams_result implements org.apache.thrift.TBase<RequestAllConfigParams_result, RequestAllConfigParams_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestAllConfigParams_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestAllConfigParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestAllConfigParams_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestAllConfigParams_result.class, metaDataMap);
    }

    public RequestAllConfigParams_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestAllConfigParams_result(RequestAllConfigParams_result other) {
    }

    public RequestAllConfigParams_result deepCopy() {
      return new RequestAllConfigParams_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestAllConfigParams_result)
        return this.equals((RequestAllConfigParams_result)that);
      return false;
    }

    public boolean equals(RequestAllConfigParams_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RequestAllConfigParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RequestAllConfigParams_result typedOther = (RequestAllConfigParams_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestAllConfigParams_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestAllConfigParams_resultStandardSchemeFactory implements SchemeFactory {
      public RequestAllConfigParams_resultStandardScheme getScheme() {
        return new RequestAllConfigParams_resultStandardScheme();
      }
    }

    private static class RequestAllConfigParams_resultStandardScheme extends StandardScheme<RequestAllConfigParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestAllConfigParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestAllConfigParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestAllConfigParams_resultTupleSchemeFactory implements SchemeFactory {
      public RequestAllConfigParams_resultTupleScheme getScheme() {
        return new RequestAllConfigParams_resultTupleScheme();
      }
    }

    private static class RequestAllConfigParams_resultTupleScheme extends TupleScheme<RequestAllConfigParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestAllConfigParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestAllConfigParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetNumGroups_args implements org.apache.thrift.TBase<GetNumGroups_args, GetNumGroups_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNumGroups_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNumGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNumGroups_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNumGroups_args.class, metaDataMap);
    }

    public GetNumGroups_args() {
    }

    public GetNumGroups_args(
      int _homeId,
      byte _nodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNumGroups_args(GetNumGroups_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
    }

    public GetNumGroups_args deepCopy() {
      return new GetNumGroups_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetNumGroups_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetNumGroups_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNumGroups_args)
        return this.equals((GetNumGroups_args)that);
      return false;
    }

    public boolean equals(GetNumGroups_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNumGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNumGroups_args typedOther = (GetNumGroups_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNumGroups_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNumGroups_argsStandardSchemeFactory implements SchemeFactory {
      public GetNumGroups_argsStandardScheme getScheme() {
        return new GetNumGroups_argsStandardScheme();
      }
    }

    private static class GetNumGroups_argsStandardScheme extends StandardScheme<GetNumGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNumGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNumGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNumGroups_argsTupleSchemeFactory implements SchemeFactory {
      public GetNumGroups_argsTupleScheme getScheme() {
        return new GetNumGroups_argsTupleScheme();
      }
    }

    private static class GetNumGroups_argsTupleScheme extends TupleScheme<GetNumGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNumGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNumGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
      }
    }

  }

  public static class GetNumGroups_result implements org.apache.thrift.TBase<GetNumGroups_result, GetNumGroups_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNumGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNumGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNumGroups_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNumGroups_result.class, metaDataMap);
    }

    public GetNumGroups_result() {
    }

    public GetNumGroups_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNumGroups_result(GetNumGroups_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNumGroups_result deepCopy() {
      return new GetNumGroups_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNumGroups_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNumGroups_result)
        return this.equals((GetNumGroups_result)that);
      return false;
    }

    public boolean equals(GetNumGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNumGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNumGroups_result typedOther = (GetNumGroups_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNumGroups_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNumGroups_resultStandardSchemeFactory implements SchemeFactory {
      public GetNumGroups_resultStandardScheme getScheme() {
        return new GetNumGroups_resultStandardScheme();
      }
    }

    private static class GetNumGroups_resultStandardScheme extends StandardScheme<GetNumGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNumGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNumGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNumGroups_resultTupleSchemeFactory implements SchemeFactory {
      public GetNumGroups_resultTupleScheme getScheme() {
        return new GetNumGroups_resultTupleScheme();
      }
    }

    private static class GetNumGroups_resultTupleScheme extends TupleScheme<GetNumGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNumGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNumGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAssociations_args implements org.apache.thrift.TBase<GetAssociations_args, GetAssociations_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAssociations_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _GROUP_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupIdx", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAssociations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAssociations_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _groupIdx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _GROUP_IDX((short)3, "_groupIdx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _GROUP_IDX
            return _GROUP_IDX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___GROUPIDX_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._GROUP_IDX, new org.apache.thrift.meta_data.FieldMetaData("_groupIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAssociations_args.class, metaDataMap);
    }

    public GetAssociations_args() {
    }

    public GetAssociations_args(
      int _homeId,
      byte _nodeId,
      byte _groupIdx)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAssociations_args(GetAssociations_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._groupIdx = other._groupIdx;
    }

    public GetAssociations_args deepCopy() {
      return new GetAssociations_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_groupIdxIsSet(false);
      this._groupIdx = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetAssociations_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetAssociations_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_groupIdx() {
      return this._groupIdx;
    }

    public GetAssociations_args set_groupIdx(byte _groupIdx) {
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      return this;
    }

    public void unset_groupIdx() {
      __isset_bit_vector.clear(___GROUPIDX_ISSET_ID);
    }

    /** Returns true if field _groupIdx is set (has been assigned a value) and false otherwise */
    public boolean isSet_groupIdx() {
      return __isset_bit_vector.get(___GROUPIDX_ISSET_ID);
    }

    public void set_groupIdxIsSet(boolean value) {
      __isset_bit_vector.set(___GROUPIDX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _GROUP_IDX:
        if (value == null) {
          unset_groupIdx();
        } else {
          set_groupIdx((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _GROUP_IDX:
        return Byte.valueOf(get_groupIdx());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _GROUP_IDX:
        return isSet_groupIdx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAssociations_args)
        return this.equals((GetAssociations_args)that);
      return false;
    }

    public boolean equals(GetAssociations_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__groupIdx = true;
      boolean that_present__groupIdx = true;
      if (this_present__groupIdx || that_present__groupIdx) {
        if (!(this_present__groupIdx && that_present__groupIdx))
          return false;
        if (this._groupIdx != that._groupIdx)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAssociations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAssociations_args typedOther = (GetAssociations_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_groupIdx()).compareTo(typedOther.isSet_groupIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_groupIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupIdx, typedOther._groupIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAssociations_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_groupIdx:");
      sb.append(this._groupIdx);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAssociations_argsStandardSchemeFactory implements SchemeFactory {
      public GetAssociations_argsStandardScheme getScheme() {
        return new GetAssociations_argsStandardScheme();
      }
    }

    private static class GetAssociations_argsStandardScheme extends StandardScheme<GetAssociations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAssociations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _GROUP_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._groupIdx = iprot.readByte();
                struct.set_groupIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAssociations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_GROUP_IDX_FIELD_DESC);
        oprot.writeByte(struct._groupIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAssociations_argsTupleSchemeFactory implements SchemeFactory {
      public GetAssociations_argsTupleScheme getScheme() {
        return new GetAssociations_argsTupleScheme();
      }
    }

    private static class GetAssociations_argsTupleScheme extends TupleScheme<GetAssociations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAssociations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_groupIdx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_groupIdx()) {
          oprot.writeByte(struct._groupIdx);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAssociations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._groupIdx = iprot.readByte();
          struct.set_groupIdxIsSet(true);
        }
      }
    }

  }

  public static class GetAssociations_result implements org.apache.thrift.TBase<GetAssociations_result, GetAssociations_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAssociations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAssociations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAssociations_resultTupleSchemeFactory());
    }

    public GetAssociationsReturnStruct success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAssociationsReturnStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAssociations_result.class, metaDataMap);
    }

    public GetAssociations_result() {
    }

    public GetAssociations_result(
      GetAssociationsReturnStruct success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAssociations_result(GetAssociations_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetAssociationsReturnStruct(other.success);
      }
    }

    public GetAssociations_result deepCopy() {
      return new GetAssociations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetAssociationsReturnStruct getSuccess() {
      return this.success;
    }

    public GetAssociations_result setSuccess(GetAssociationsReturnStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetAssociationsReturnStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAssociations_result)
        return this.equals((GetAssociations_result)that);
      return false;
    }

    public boolean equals(GetAssociations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAssociations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAssociations_result typedOther = (GetAssociations_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAssociations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAssociations_resultStandardSchemeFactory implements SchemeFactory {
      public GetAssociations_resultStandardScheme getScheme() {
        return new GetAssociations_resultStandardScheme();
      }
    }

    private static class GetAssociations_resultStandardScheme extends StandardScheme<GetAssociations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAssociations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetAssociationsReturnStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAssociations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAssociations_resultTupleSchemeFactory implements SchemeFactory {
      public GetAssociations_resultTupleScheme getScheme() {
        return new GetAssociations_resultTupleScheme();
      }
    }

    private static class GetAssociations_resultTupleScheme extends TupleScheme<GetAssociations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAssociations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAssociations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetAssociationsReturnStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetMaxAssociations_args implements org.apache.thrift.TBase<GetMaxAssociations_args, GetMaxAssociations_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMaxAssociations_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _GROUP_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupIdx", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMaxAssociations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMaxAssociations_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _groupIdx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _GROUP_IDX((short)3, "_groupIdx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _GROUP_IDX
            return _GROUP_IDX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___GROUPIDX_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._GROUP_IDX, new org.apache.thrift.meta_data.FieldMetaData("_groupIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMaxAssociations_args.class, metaDataMap);
    }

    public GetMaxAssociations_args() {
    }

    public GetMaxAssociations_args(
      int _homeId,
      byte _nodeId,
      byte _groupIdx)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMaxAssociations_args(GetMaxAssociations_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._groupIdx = other._groupIdx;
    }

    public GetMaxAssociations_args deepCopy() {
      return new GetMaxAssociations_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_groupIdxIsSet(false);
      this._groupIdx = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetMaxAssociations_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetMaxAssociations_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_groupIdx() {
      return this._groupIdx;
    }

    public GetMaxAssociations_args set_groupIdx(byte _groupIdx) {
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      return this;
    }

    public void unset_groupIdx() {
      __isset_bit_vector.clear(___GROUPIDX_ISSET_ID);
    }

    /** Returns true if field _groupIdx is set (has been assigned a value) and false otherwise */
    public boolean isSet_groupIdx() {
      return __isset_bit_vector.get(___GROUPIDX_ISSET_ID);
    }

    public void set_groupIdxIsSet(boolean value) {
      __isset_bit_vector.set(___GROUPIDX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _GROUP_IDX:
        if (value == null) {
          unset_groupIdx();
        } else {
          set_groupIdx((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _GROUP_IDX:
        return Byte.valueOf(get_groupIdx());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _GROUP_IDX:
        return isSet_groupIdx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMaxAssociations_args)
        return this.equals((GetMaxAssociations_args)that);
      return false;
    }

    public boolean equals(GetMaxAssociations_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__groupIdx = true;
      boolean that_present__groupIdx = true;
      if (this_present__groupIdx || that_present__groupIdx) {
        if (!(this_present__groupIdx && that_present__groupIdx))
          return false;
        if (this._groupIdx != that._groupIdx)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMaxAssociations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMaxAssociations_args typedOther = (GetMaxAssociations_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_groupIdx()).compareTo(typedOther.isSet_groupIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_groupIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupIdx, typedOther._groupIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMaxAssociations_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_groupIdx:");
      sb.append(this._groupIdx);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMaxAssociations_argsStandardSchemeFactory implements SchemeFactory {
      public GetMaxAssociations_argsStandardScheme getScheme() {
        return new GetMaxAssociations_argsStandardScheme();
      }
    }

    private static class GetMaxAssociations_argsStandardScheme extends StandardScheme<GetMaxAssociations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMaxAssociations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _GROUP_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._groupIdx = iprot.readByte();
                struct.set_groupIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMaxAssociations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_GROUP_IDX_FIELD_DESC);
        oprot.writeByte(struct._groupIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMaxAssociations_argsTupleSchemeFactory implements SchemeFactory {
      public GetMaxAssociations_argsTupleScheme getScheme() {
        return new GetMaxAssociations_argsTupleScheme();
      }
    }

    private static class GetMaxAssociations_argsTupleScheme extends TupleScheme<GetMaxAssociations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMaxAssociations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_groupIdx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_groupIdx()) {
          oprot.writeByte(struct._groupIdx);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMaxAssociations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._groupIdx = iprot.readByte();
          struct.set_groupIdxIsSet(true);
        }
      }
    }

  }

  public static class GetMaxAssociations_result implements org.apache.thrift.TBase<GetMaxAssociations_result, GetMaxAssociations_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMaxAssociations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMaxAssociations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMaxAssociations_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMaxAssociations_result.class, metaDataMap);
    }

    public GetMaxAssociations_result() {
    }

    public GetMaxAssociations_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMaxAssociations_result(GetMaxAssociations_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetMaxAssociations_result deepCopy() {
      return new GetMaxAssociations_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetMaxAssociations_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMaxAssociations_result)
        return this.equals((GetMaxAssociations_result)that);
      return false;
    }

    public boolean equals(GetMaxAssociations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMaxAssociations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMaxAssociations_result typedOther = (GetMaxAssociations_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMaxAssociations_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMaxAssociations_resultStandardSchemeFactory implements SchemeFactory {
      public GetMaxAssociations_resultStandardScheme getScheme() {
        return new GetMaxAssociations_resultStandardScheme();
      }
    }

    private static class GetMaxAssociations_resultStandardScheme extends StandardScheme<GetMaxAssociations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMaxAssociations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMaxAssociations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMaxAssociations_resultTupleSchemeFactory implements SchemeFactory {
      public GetMaxAssociations_resultTupleScheme getScheme() {
        return new GetMaxAssociations_resultTupleScheme();
      }
    }

    private static class GetMaxAssociations_resultTupleScheme extends TupleScheme<GetMaxAssociations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMaxAssociations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMaxAssociations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetGroupLabel_args implements org.apache.thrift.TBase<GetGroupLabel_args, GetGroupLabel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetGroupLabel_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _GROUP_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupIdx", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetGroupLabel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetGroupLabel_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _groupIdx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _GROUP_IDX((short)3, "_groupIdx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _GROUP_IDX
            return _GROUP_IDX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___GROUPIDX_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._GROUP_IDX, new org.apache.thrift.meta_data.FieldMetaData("_groupIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetGroupLabel_args.class, metaDataMap);
    }

    public GetGroupLabel_args() {
    }

    public GetGroupLabel_args(
      int _homeId,
      byte _nodeId,
      byte _groupIdx)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetGroupLabel_args(GetGroupLabel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._groupIdx = other._groupIdx;
    }

    public GetGroupLabel_args deepCopy() {
      return new GetGroupLabel_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_groupIdxIsSet(false);
      this._groupIdx = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetGroupLabel_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public GetGroupLabel_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_groupIdx() {
      return this._groupIdx;
    }

    public GetGroupLabel_args set_groupIdx(byte _groupIdx) {
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      return this;
    }

    public void unset_groupIdx() {
      __isset_bit_vector.clear(___GROUPIDX_ISSET_ID);
    }

    /** Returns true if field _groupIdx is set (has been assigned a value) and false otherwise */
    public boolean isSet_groupIdx() {
      return __isset_bit_vector.get(___GROUPIDX_ISSET_ID);
    }

    public void set_groupIdxIsSet(boolean value) {
      __isset_bit_vector.set(___GROUPIDX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _GROUP_IDX:
        if (value == null) {
          unset_groupIdx();
        } else {
          set_groupIdx((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _GROUP_IDX:
        return Byte.valueOf(get_groupIdx());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _GROUP_IDX:
        return isSet_groupIdx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetGroupLabel_args)
        return this.equals((GetGroupLabel_args)that);
      return false;
    }

    public boolean equals(GetGroupLabel_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__groupIdx = true;
      boolean that_present__groupIdx = true;
      if (this_present__groupIdx || that_present__groupIdx) {
        if (!(this_present__groupIdx && that_present__groupIdx))
          return false;
        if (this._groupIdx != that._groupIdx)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetGroupLabel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetGroupLabel_args typedOther = (GetGroupLabel_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_groupIdx()).compareTo(typedOther.isSet_groupIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_groupIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupIdx, typedOther._groupIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetGroupLabel_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_groupIdx:");
      sb.append(this._groupIdx);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetGroupLabel_argsStandardSchemeFactory implements SchemeFactory {
      public GetGroupLabel_argsStandardScheme getScheme() {
        return new GetGroupLabel_argsStandardScheme();
      }
    }

    private static class GetGroupLabel_argsStandardScheme extends StandardScheme<GetGroupLabel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetGroupLabel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _GROUP_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._groupIdx = iprot.readByte();
                struct.set_groupIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetGroupLabel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_GROUP_IDX_FIELD_DESC);
        oprot.writeByte(struct._groupIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetGroupLabel_argsTupleSchemeFactory implements SchemeFactory {
      public GetGroupLabel_argsTupleScheme getScheme() {
        return new GetGroupLabel_argsTupleScheme();
      }
    }

    private static class GetGroupLabel_argsTupleScheme extends TupleScheme<GetGroupLabel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetGroupLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_groupIdx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_groupIdx()) {
          oprot.writeByte(struct._groupIdx);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetGroupLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._groupIdx = iprot.readByte();
          struct.set_groupIdxIsSet(true);
        }
      }
    }

  }

  public static class GetGroupLabel_result implements org.apache.thrift.TBase<GetGroupLabel_result, GetGroupLabel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetGroupLabel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetGroupLabel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetGroupLabel_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetGroupLabel_result.class, metaDataMap);
    }

    public GetGroupLabel_result() {
    }

    public GetGroupLabel_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetGroupLabel_result(GetGroupLabel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetGroupLabel_result deepCopy() {
      return new GetGroupLabel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetGroupLabel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetGroupLabel_result)
        return this.equals((GetGroupLabel_result)that);
      return false;
    }

    public boolean equals(GetGroupLabel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetGroupLabel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetGroupLabel_result typedOther = (GetGroupLabel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetGroupLabel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetGroupLabel_resultStandardSchemeFactory implements SchemeFactory {
      public GetGroupLabel_resultStandardScheme getScheme() {
        return new GetGroupLabel_resultStandardScheme();
      }
    }

    private static class GetGroupLabel_resultStandardScheme extends StandardScheme<GetGroupLabel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetGroupLabel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetGroupLabel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetGroupLabel_resultTupleSchemeFactory implements SchemeFactory {
      public GetGroupLabel_resultTupleScheme getScheme() {
        return new GetGroupLabel_resultTupleScheme();
      }
    }

    private static class GetGroupLabel_resultTupleScheme extends TupleScheme<GetGroupLabel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetGroupLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetGroupLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddAssociation_args implements org.apache.thrift.TBase<AddAssociation_args, AddAssociation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddAssociation_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _GROUP_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupIdx", org.apache.thrift.protocol.TType.BYTE, (short)3);
    private static final org.apache.thrift.protocol.TField _TARGET_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_targetNodeId", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddAssociation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddAssociation_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _groupIdx; // required
    public byte _targetNodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _GROUP_IDX((short)3, "_groupIdx"),
      _TARGET_NODE_ID((short)4, "_targetNodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _GROUP_IDX
            return _GROUP_IDX;
          case 4: // _TARGET_NODE_ID
            return _TARGET_NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___GROUPIDX_ISSET_ID = 2;
    private static final int ___TARGETNODEID_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._GROUP_IDX, new org.apache.thrift.meta_data.FieldMetaData("_groupIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._TARGET_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_targetNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddAssociation_args.class, metaDataMap);
    }

    public AddAssociation_args() {
    }

    public AddAssociation_args(
      int _homeId,
      byte _nodeId,
      byte _groupIdx,
      byte _targetNodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      this._targetNodeId = _targetNodeId;
      set_targetNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddAssociation_args(AddAssociation_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._groupIdx = other._groupIdx;
      this._targetNodeId = other._targetNodeId;
    }

    public AddAssociation_args deepCopy() {
      return new AddAssociation_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_groupIdxIsSet(false);
      this._groupIdx = 0;
      set_targetNodeIdIsSet(false);
      this._targetNodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public AddAssociation_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public AddAssociation_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_groupIdx() {
      return this._groupIdx;
    }

    public AddAssociation_args set_groupIdx(byte _groupIdx) {
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      return this;
    }

    public void unset_groupIdx() {
      __isset_bit_vector.clear(___GROUPIDX_ISSET_ID);
    }

    /** Returns true if field _groupIdx is set (has been assigned a value) and false otherwise */
    public boolean isSet_groupIdx() {
      return __isset_bit_vector.get(___GROUPIDX_ISSET_ID);
    }

    public void set_groupIdxIsSet(boolean value) {
      __isset_bit_vector.set(___GROUPIDX_ISSET_ID, value);
    }

    public byte get_targetNodeId() {
      return this._targetNodeId;
    }

    public AddAssociation_args set_targetNodeId(byte _targetNodeId) {
      this._targetNodeId = _targetNodeId;
      set_targetNodeIdIsSet(true);
      return this;
    }

    public void unset_targetNodeId() {
      __isset_bit_vector.clear(___TARGETNODEID_ISSET_ID);
    }

    /** Returns true if field _targetNodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_targetNodeId() {
      return __isset_bit_vector.get(___TARGETNODEID_ISSET_ID);
    }

    public void set_targetNodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___TARGETNODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _GROUP_IDX:
        if (value == null) {
          unset_groupIdx();
        } else {
          set_groupIdx((Byte)value);
        }
        break;

      case _TARGET_NODE_ID:
        if (value == null) {
          unset_targetNodeId();
        } else {
          set_targetNodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _GROUP_IDX:
        return Byte.valueOf(get_groupIdx());

      case _TARGET_NODE_ID:
        return Byte.valueOf(get_targetNodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _GROUP_IDX:
        return isSet_groupIdx();
      case _TARGET_NODE_ID:
        return isSet_targetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddAssociation_args)
        return this.equals((AddAssociation_args)that);
      return false;
    }

    public boolean equals(AddAssociation_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__groupIdx = true;
      boolean that_present__groupIdx = true;
      if (this_present__groupIdx || that_present__groupIdx) {
        if (!(this_present__groupIdx && that_present__groupIdx))
          return false;
        if (this._groupIdx != that._groupIdx)
          return false;
      }

      boolean this_present__targetNodeId = true;
      boolean that_present__targetNodeId = true;
      if (this_present__targetNodeId || that_present__targetNodeId) {
        if (!(this_present__targetNodeId && that_present__targetNodeId))
          return false;
        if (this._targetNodeId != that._targetNodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddAssociation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddAssociation_args typedOther = (AddAssociation_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_groupIdx()).compareTo(typedOther.isSet_groupIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_groupIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupIdx, typedOther._groupIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_targetNodeId()).compareTo(typedOther.isSet_targetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_targetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._targetNodeId, typedOther._targetNodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddAssociation_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_groupIdx:");
      sb.append(this._groupIdx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_targetNodeId:");
      sb.append(this._targetNodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddAssociation_argsStandardSchemeFactory implements SchemeFactory {
      public AddAssociation_argsStandardScheme getScheme() {
        return new AddAssociation_argsStandardScheme();
      }
    }

    private static class AddAssociation_argsStandardScheme extends StandardScheme<AddAssociation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddAssociation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _GROUP_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._groupIdx = iprot.readByte();
                struct.set_groupIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // _TARGET_NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._targetNodeId = iprot.readByte();
                struct.set_targetNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddAssociation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_GROUP_IDX_FIELD_DESC);
        oprot.writeByte(struct._groupIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_TARGET_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._targetNodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddAssociation_argsTupleSchemeFactory implements SchemeFactory {
      public AddAssociation_argsTupleScheme getScheme() {
        return new AddAssociation_argsTupleScheme();
      }
    }

    private static class AddAssociation_argsTupleScheme extends TupleScheme<AddAssociation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddAssociation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_groupIdx()) {
          optionals.set(2);
        }
        if (struct.isSet_targetNodeId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_groupIdx()) {
          oprot.writeByte(struct._groupIdx);
        }
        if (struct.isSet_targetNodeId()) {
          oprot.writeByte(struct._targetNodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddAssociation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._groupIdx = iprot.readByte();
          struct.set_groupIdxIsSet(true);
        }
        if (incoming.get(3)) {
          struct._targetNodeId = iprot.readByte();
          struct.set_targetNodeIdIsSet(true);
        }
      }
    }

  }

  public static class AddAssociation_result implements org.apache.thrift.TBase<AddAssociation_result, AddAssociation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddAssociation_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddAssociation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddAssociation_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddAssociation_result.class, metaDataMap);
    }

    public AddAssociation_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddAssociation_result(AddAssociation_result other) {
    }

    public AddAssociation_result deepCopy() {
      return new AddAssociation_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddAssociation_result)
        return this.equals((AddAssociation_result)that);
      return false;
    }

    public boolean equals(AddAssociation_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddAssociation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddAssociation_result typedOther = (AddAssociation_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddAssociation_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddAssociation_resultStandardSchemeFactory implements SchemeFactory {
      public AddAssociation_resultStandardScheme getScheme() {
        return new AddAssociation_resultStandardScheme();
      }
    }

    private static class AddAssociation_resultStandardScheme extends StandardScheme<AddAssociation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddAssociation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddAssociation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddAssociation_resultTupleSchemeFactory implements SchemeFactory {
      public AddAssociation_resultTupleScheme getScheme() {
        return new AddAssociation_resultTupleScheme();
      }
    }

    private static class AddAssociation_resultTupleScheme extends TupleScheme<AddAssociation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddAssociation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddAssociation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class RemoveAssociation_args implements org.apache.thrift.TBase<RemoveAssociation_args, RemoveAssociation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveAssociation_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField _GROUP_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("_groupIdx", org.apache.thrift.protocol.TType.BYTE, (short)3);
    private static final org.apache.thrift.protocol.TField _TARGET_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_targetNodeId", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveAssociation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveAssociation_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    public byte _nodeId; // required
    public byte _groupIdx; // required
    public byte _targetNodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      _NODE_ID((short)2, "_nodeId"),
      _GROUP_IDX((short)3, "_groupIdx"),
      _TARGET_NODE_ID((short)4, "_targetNodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _NODE_ID
            return _NODE_ID;
          case 3: // _GROUP_IDX
            return _GROUP_IDX;
          case 4: // _TARGET_NODE_ID
            return _TARGET_NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___NODEID_ISSET_ID = 1;
    private static final int ___GROUPIDX_ISSET_ID = 2;
    private static final int ___TARGETNODEID_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._GROUP_IDX, new org.apache.thrift.meta_data.FieldMetaData("_groupIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._TARGET_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_targetNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveAssociation_args.class, metaDataMap);
    }

    public RemoveAssociation_args() {
    }

    public RemoveAssociation_args(
      int _homeId,
      byte _nodeId,
      byte _groupIdx,
      byte _targetNodeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      this._targetNodeId = _targetNodeId;
      set_targetNodeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveAssociation_args(RemoveAssociation_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      this._nodeId = other._nodeId;
      this._groupIdx = other._groupIdx;
      this._targetNodeId = other._targetNodeId;
    }

    public RemoveAssociation_args deepCopy() {
      return new RemoveAssociation_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_groupIdxIsSet(false);
      this._groupIdx = 0;
      set_targetNodeIdIsSet(false);
      this._targetNodeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public RemoveAssociation_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public RemoveAssociation_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_groupIdx() {
      return this._groupIdx;
    }

    public RemoveAssociation_args set_groupIdx(byte _groupIdx) {
      this._groupIdx = _groupIdx;
      set_groupIdxIsSet(true);
      return this;
    }

    public void unset_groupIdx() {
      __isset_bit_vector.clear(___GROUPIDX_ISSET_ID);
    }

    /** Returns true if field _groupIdx is set (has been assigned a value) and false otherwise */
    public boolean isSet_groupIdx() {
      return __isset_bit_vector.get(___GROUPIDX_ISSET_ID);
    }

    public void set_groupIdxIsSet(boolean value) {
      __isset_bit_vector.set(___GROUPIDX_ISSET_ID, value);
    }

    public byte get_targetNodeId() {
      return this._targetNodeId;
    }

    public RemoveAssociation_args set_targetNodeId(byte _targetNodeId) {
      this._targetNodeId = _targetNodeId;
      set_targetNodeIdIsSet(true);
      return this;
    }

    public void unset_targetNodeId() {
      __isset_bit_vector.clear(___TARGETNODEID_ISSET_ID);
    }

    /** Returns true if field _targetNodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_targetNodeId() {
      return __isset_bit_vector.get(___TARGETNODEID_ISSET_ID);
    }

    public void set_targetNodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___TARGETNODEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _GROUP_IDX:
        if (value == null) {
          unset_groupIdx();
        } else {
          set_groupIdx((Byte)value);
        }
        break;

      case _TARGET_NODE_ID:
        if (value == null) {
          unset_targetNodeId();
        } else {
          set_targetNodeId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _GROUP_IDX:
        return Byte.valueOf(get_groupIdx());

      case _TARGET_NODE_ID:
        return Byte.valueOf(get_targetNodeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _NODE_ID:
        return isSet_nodeId();
      case _GROUP_IDX:
        return isSet_groupIdx();
      case _TARGET_NODE_ID:
        return isSet_targetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveAssociation_args)
        return this.equals((RemoveAssociation_args)that);
      return false;
    }

    public boolean equals(RemoveAssociation_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__groupIdx = true;
      boolean that_present__groupIdx = true;
      if (this_present__groupIdx || that_present__groupIdx) {
        if (!(this_present__groupIdx && that_present__groupIdx))
          return false;
        if (this._groupIdx != that._groupIdx)
          return false;
      }

      boolean this_present__targetNodeId = true;
      boolean that_present__targetNodeId = true;
      if (this_present__targetNodeId || that_present__targetNodeId) {
        if (!(this_present__targetNodeId && that_present__targetNodeId))
          return false;
        if (this._targetNodeId != that._targetNodeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveAssociation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveAssociation_args typedOther = (RemoveAssociation_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_groupIdx()).compareTo(typedOther.isSet_groupIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_groupIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._groupIdx, typedOther._groupIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_targetNodeId()).compareTo(typedOther.isSet_targetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_targetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._targetNodeId, typedOther._targetNodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveAssociation_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_groupIdx:");
      sb.append(this._groupIdx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_targetNodeId:");
      sb.append(this._targetNodeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveAssociation_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveAssociation_argsStandardScheme getScheme() {
        return new RemoveAssociation_argsStandardScheme();
      }
    }

    private static class RemoveAssociation_argsStandardScheme extends StandardScheme<RemoveAssociation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveAssociation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _GROUP_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._groupIdx = iprot.readByte();
                struct.set_groupIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // _TARGET_NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._targetNodeId = iprot.readByte();
                struct.set_targetNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveAssociation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_GROUP_IDX_FIELD_DESC);
        oprot.writeByte(struct._groupIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_TARGET_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._targetNodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveAssociation_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveAssociation_argsTupleScheme getScheme() {
        return new RemoveAssociation_argsTupleScheme();
      }
    }

    private static class RemoveAssociation_argsTupleScheme extends TupleScheme<RemoveAssociation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveAssociation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(1);
        }
        if (struct.isSet_groupIdx()) {
          optionals.set(2);
        }
        if (struct.isSet_targetNodeId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_groupIdx()) {
          oprot.writeByte(struct._groupIdx);
        }
        if (struct.isSet_targetNodeId()) {
          oprot.writeByte(struct._targetNodeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveAssociation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._groupIdx = iprot.readByte();
          struct.set_groupIdxIsSet(true);
        }
        if (incoming.get(3)) {
          struct._targetNodeId = iprot.readByte();
          struct.set_targetNodeIdIsSet(true);
        }
      }
    }

  }

  public static class RemoveAssociation_result implements org.apache.thrift.TBase<RemoveAssociation_result, RemoveAssociation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveAssociation_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveAssociation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveAssociation_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveAssociation_result.class, metaDataMap);
    }

    public RemoveAssociation_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveAssociation_result(RemoveAssociation_result other) {
    }

    public RemoveAssociation_result deepCopy() {
      return new RemoveAssociation_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveAssociation_result)
        return this.equals((RemoveAssociation_result)that);
      return false;
    }

    public boolean equals(RemoveAssociation_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveAssociation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveAssociation_result typedOther = (RemoveAssociation_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveAssociation_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveAssociation_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveAssociation_resultStandardScheme getScheme() {
        return new RemoveAssociation_resultStandardScheme();
      }
    }

    private static class RemoveAssociation_resultStandardScheme extends StandardScheme<RemoveAssociation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveAssociation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveAssociation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveAssociation_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveAssociation_resultTupleScheme getScheme() {
        return new RemoveAssociation_resultTupleScheme();
      }
    }

    private static class RemoveAssociation_resultTupleScheme extends TupleScheme<RemoveAssociation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveAssociation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveAssociation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ResetController_args implements org.apache.thrift.TBase<ResetController_args, ResetController_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResetController_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ResetController_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ResetController_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResetController_args.class, metaDataMap);
    }

    public ResetController_args() {
    }

    public ResetController_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResetController_args(ResetController_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public ResetController_args deepCopy() {
      return new ResetController_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public ResetController_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ResetController_args)
        return this.equals((ResetController_args)that);
      return false;
    }

    public boolean equals(ResetController_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ResetController_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ResetController_args typedOther = (ResetController_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ResetController_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResetController_argsStandardSchemeFactory implements SchemeFactory {
      public ResetController_argsStandardScheme getScheme() {
        return new ResetController_argsStandardScheme();
      }
    }

    private static class ResetController_argsStandardScheme extends StandardScheme<ResetController_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ResetController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ResetController_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResetController_argsTupleSchemeFactory implements SchemeFactory {
      public ResetController_argsTupleScheme getScheme() {
        return new ResetController_argsTupleScheme();
      }
    }

    private static class ResetController_argsTupleScheme extends TupleScheme<ResetController_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResetController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResetController_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class ResetController_result implements org.apache.thrift.TBase<ResetController_result, ResetController_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResetController_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ResetController_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ResetController_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResetController_result.class, metaDataMap);
    }

    public ResetController_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResetController_result(ResetController_result other) {
    }

    public ResetController_result deepCopy() {
      return new ResetController_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ResetController_result)
        return this.equals((ResetController_result)that);
      return false;
    }

    public boolean equals(ResetController_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ResetController_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ResetController_result typedOther = (ResetController_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ResetController_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResetController_resultStandardSchemeFactory implements SchemeFactory {
      public ResetController_resultStandardScheme getScheme() {
        return new ResetController_resultStandardScheme();
      }
    }

    private static class ResetController_resultStandardScheme extends StandardScheme<ResetController_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ResetController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ResetController_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResetController_resultTupleSchemeFactory implements SchemeFactory {
      public ResetController_resultTupleScheme getScheme() {
        return new ResetController_resultTupleScheme();
      }
    }

    private static class ResetController_resultTupleScheme extends TupleScheme<ResetController_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResetController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResetController_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SoftReset_args implements org.apache.thrift.TBase<SoftReset_args, SoftReset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SoftReset_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SoftReset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SoftReset_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SoftReset_args.class, metaDataMap);
    }

    public SoftReset_args() {
    }

    public SoftReset_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SoftReset_args(SoftReset_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public SoftReset_args deepCopy() {
      return new SoftReset_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public SoftReset_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SoftReset_args)
        return this.equals((SoftReset_args)that);
      return false;
    }

    public boolean equals(SoftReset_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SoftReset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SoftReset_args typedOther = (SoftReset_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SoftReset_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SoftReset_argsStandardSchemeFactory implements SchemeFactory {
      public SoftReset_argsStandardScheme getScheme() {
        return new SoftReset_argsStandardScheme();
      }
    }

    private static class SoftReset_argsStandardScheme extends StandardScheme<SoftReset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SoftReset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SoftReset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SoftReset_argsTupleSchemeFactory implements SchemeFactory {
      public SoftReset_argsTupleScheme getScheme() {
        return new SoftReset_argsTupleScheme();
      }
    }

    private static class SoftReset_argsTupleScheme extends TupleScheme<SoftReset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SoftReset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SoftReset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class SoftReset_result implements org.apache.thrift.TBase<SoftReset_result, SoftReset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SoftReset_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SoftReset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SoftReset_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SoftReset_result.class, metaDataMap);
    }

    public SoftReset_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SoftReset_result(SoftReset_result other) {
    }

    public SoftReset_result deepCopy() {
      return new SoftReset_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SoftReset_result)
        return this.equals((SoftReset_result)that);
      return false;
    }

    public boolean equals(SoftReset_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SoftReset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SoftReset_result typedOther = (SoftReset_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SoftReset_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SoftReset_resultStandardSchemeFactory implements SchemeFactory {
      public SoftReset_resultStandardScheme getScheme() {
        return new SoftReset_resultStandardScheme();
      }
    }

    private static class SoftReset_resultStandardScheme extends StandardScheme<SoftReset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SoftReset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SoftReset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SoftReset_resultTupleSchemeFactory implements SchemeFactory {
      public SoftReset_resultTupleScheme getScheme() {
        return new SoftReset_resultTupleScheme();
      }
    }

    private static class SoftReset_resultTupleScheme extends TupleScheme<SoftReset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SoftReset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SoftReset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class BeginControllerCommand_args implements org.apache.thrift.TBase<BeginControllerCommand_args, BeginControllerCommand_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BeginControllerCommand_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField _COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("_command", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField _HIGH_POWER_FIELD_DESC = new org.apache.thrift.protocol.TField("_highPower", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField _NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_nodeId", org.apache.thrift.protocol.TType.BYTE, (short)4);
    private static final org.apache.thrift.protocol.TField _ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("_arg", org.apache.thrift.protocol.TType.BYTE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BeginControllerCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BeginControllerCommand_argsTupleSchemeFactory());
    }

    public int _homeId; // required
    /**
     * 
     * @see DriverControllerCommand
     */
    public DriverControllerCommand _command; // required
    public boolean _highPower; // required
    public byte _nodeId; // required
    public byte _arg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId"),
      /**
       * 
       * @see DriverControllerCommand
       */
      _COMMAND((short)2, "_command"),
      _HIGH_POWER((short)3, "_highPower"),
      _NODE_ID((short)4, "_nodeId"),
      _ARG((short)5, "_arg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          case 2: // _COMMAND
            return _COMMAND;
          case 3: // _HIGH_POWER
            return _HIGH_POWER;
          case 4: // _NODE_ID
            return _NODE_ID;
          case 5: // _ARG
            return _ARG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private static final int ___HIGHPOWER_ISSET_ID = 1;
    private static final int ___NODEID_ISSET_ID = 2;
    private static final int ___ARG_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields._COMMAND, new org.apache.thrift.meta_data.FieldMetaData("_command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DriverControllerCommand.class)));
      tmpMap.put(_Fields._HIGH_POWER, new org.apache.thrift.meta_data.FieldMetaData("_highPower", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields._NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("_nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._ARG, new org.apache.thrift.meta_data.FieldMetaData("_arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BeginControllerCommand_args.class, metaDataMap);
    }

    public BeginControllerCommand_args() {
    }

    public BeginControllerCommand_args(
      int _homeId,
      DriverControllerCommand _command,
      boolean _highPower,
      byte _nodeId,
      byte _arg)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      this._command = _command;
      this._highPower = _highPower;
      set_highPowerIsSet(true);
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      this._arg = _arg;
      set_argIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BeginControllerCommand_args(BeginControllerCommand_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
      if (other.isSet_command()) {
        this._command = other._command;
      }
      this._highPower = other._highPower;
      this._nodeId = other._nodeId;
      this._arg = other._arg;
    }

    public BeginControllerCommand_args deepCopy() {
      return new BeginControllerCommand_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
      this._command = null;
      set_highPowerIsSet(false);
      this._highPower = false;
      set_nodeIdIsSet(false);
      this._nodeId = 0;
      set_argIsSet(false);
      this._arg = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public BeginControllerCommand_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    /**
     * 
     * @see DriverControllerCommand
     */
    public DriverControllerCommand get_command() {
      return this._command;
    }

    /**
     * 
     * @see DriverControllerCommand
     */
    public BeginControllerCommand_args set_command(DriverControllerCommand _command) {
      this._command = _command;
      return this;
    }

    public void unset_command() {
      this._command = null;
    }

    /** Returns true if field _command is set (has been assigned a value) and false otherwise */
    public boolean isSet_command() {
      return this._command != null;
    }

    public void set_commandIsSet(boolean value) {
      if (!value) {
        this._command = null;
      }
    }

    public boolean is_highPower() {
      return this._highPower;
    }

    public BeginControllerCommand_args set_highPower(boolean _highPower) {
      this._highPower = _highPower;
      set_highPowerIsSet(true);
      return this;
    }

    public void unset_highPower() {
      __isset_bit_vector.clear(___HIGHPOWER_ISSET_ID);
    }

    /** Returns true if field _highPower is set (has been assigned a value) and false otherwise */
    public boolean isSet_highPower() {
      return __isset_bit_vector.get(___HIGHPOWER_ISSET_ID);
    }

    public void set_highPowerIsSet(boolean value) {
      __isset_bit_vector.set(___HIGHPOWER_ISSET_ID, value);
    }

    public byte get_nodeId() {
      return this._nodeId;
    }

    public BeginControllerCommand_args set_nodeId(byte _nodeId) {
      this._nodeId = _nodeId;
      set_nodeIdIsSet(true);
      return this;
    }

    public void unset_nodeId() {
      __isset_bit_vector.clear(___NODEID_ISSET_ID);
    }

    /** Returns true if field _nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_nodeId() {
      return __isset_bit_vector.get(___NODEID_ISSET_ID);
    }

    public void set_nodeIdIsSet(boolean value) {
      __isset_bit_vector.set(___NODEID_ISSET_ID, value);
    }

    public byte get_arg() {
      return this._arg;
    }

    public BeginControllerCommand_args set_arg(byte _arg) {
      this._arg = _arg;
      set_argIsSet(true);
      return this;
    }

    public void unset_arg() {
      __isset_bit_vector.clear(___ARG_ISSET_ID);
    }

    /** Returns true if field _arg is set (has been assigned a value) and false otherwise */
    public boolean isSet_arg() {
      return __isset_bit_vector.get(___ARG_ISSET_ID);
    }

    public void set_argIsSet(boolean value) {
      __isset_bit_vector.set(___ARG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      case _COMMAND:
        if (value == null) {
          unset_command();
        } else {
          set_command((DriverControllerCommand)value);
        }
        break;

      case _HIGH_POWER:
        if (value == null) {
          unset_highPower();
        } else {
          set_highPower((Boolean)value);
        }
        break;

      case _NODE_ID:
        if (value == null) {
          unset_nodeId();
        } else {
          set_nodeId((Byte)value);
        }
        break;

      case _ARG:
        if (value == null) {
          unset_arg();
        } else {
          set_arg((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      case _COMMAND:
        return get_command();

      case _HIGH_POWER:
        return Boolean.valueOf(is_highPower());

      case _NODE_ID:
        return Byte.valueOf(get_nodeId());

      case _ARG:
        return Byte.valueOf(get_arg());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      case _COMMAND:
        return isSet_command();
      case _HIGH_POWER:
        return isSet_highPower();
      case _NODE_ID:
        return isSet_nodeId();
      case _ARG:
        return isSet_arg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BeginControllerCommand_args)
        return this.equals((BeginControllerCommand_args)that);
      return false;
    }

    public boolean equals(BeginControllerCommand_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      boolean this_present__command = true && this.isSet_command();
      boolean that_present__command = true && that.isSet_command();
      if (this_present__command || that_present__command) {
        if (!(this_present__command && that_present__command))
          return false;
        if (!this._command.equals(that._command))
          return false;
      }

      boolean this_present__highPower = true;
      boolean that_present__highPower = true;
      if (this_present__highPower || that_present__highPower) {
        if (!(this_present__highPower && that_present__highPower))
          return false;
        if (this._highPower != that._highPower)
          return false;
      }

      boolean this_present__nodeId = true;
      boolean that_present__nodeId = true;
      if (this_present__nodeId || that_present__nodeId) {
        if (!(this_present__nodeId && that_present__nodeId))
          return false;
        if (this._nodeId != that._nodeId)
          return false;
      }

      boolean this_present__arg = true;
      boolean that_present__arg = true;
      if (this_present__arg || that_present__arg) {
        if (!(this_present__arg && that_present__arg))
          return false;
        if (this._arg != that._arg)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(BeginControllerCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      BeginControllerCommand_args typedOther = (BeginControllerCommand_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_command()).compareTo(typedOther.isSet_command());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_command()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._command, typedOther._command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_highPower()).compareTo(typedOther.isSet_highPower());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_highPower()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._highPower, typedOther._highPower);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_nodeId()).compareTo(typedOther.isSet_nodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_nodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._nodeId, typedOther._nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_arg()).compareTo(typedOther.isSet_arg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_arg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._arg, typedOther._arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BeginControllerCommand_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_command:");
      if (this._command == null) {
        sb.append("null");
      } else {
        sb.append(this._command);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_highPower:");
      sb.append(this._highPower);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_nodeId:");
      sb.append(this._nodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_arg:");
      sb.append(this._arg);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BeginControllerCommand_argsStandardSchemeFactory implements SchemeFactory {
      public BeginControllerCommand_argsStandardScheme getScheme() {
        return new BeginControllerCommand_argsStandardScheme();
      }
    }

    private static class BeginControllerCommand_argsStandardScheme extends StandardScheme<BeginControllerCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BeginControllerCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._command = DriverControllerCommand.findByValue(iprot.readI32());
                struct.set_commandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _HIGH_POWER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._highPower = iprot.readBool();
                struct.set_highPowerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // _NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._nodeId = iprot.readByte();
                struct.set_nodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // _ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._arg = iprot.readByte();
                struct.set_argIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BeginControllerCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        if (struct._command != null) {
          oprot.writeFieldBegin(_COMMAND_FIELD_DESC);
          oprot.writeI32(struct._command.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_HIGH_POWER_FIELD_DESC);
        oprot.writeBool(struct._highPower);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
        oprot.writeByte(struct._nodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_ARG_FIELD_DESC);
        oprot.writeByte(struct._arg);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BeginControllerCommand_argsTupleSchemeFactory implements SchemeFactory {
      public BeginControllerCommand_argsTupleScheme getScheme() {
        return new BeginControllerCommand_argsTupleScheme();
      }
    }

    private static class BeginControllerCommand_argsTupleScheme extends TupleScheme<BeginControllerCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BeginControllerCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        if (struct.isSet_command()) {
          optionals.set(1);
        }
        if (struct.isSet_highPower()) {
          optionals.set(2);
        }
        if (struct.isSet_nodeId()) {
          optionals.set(3);
        }
        if (struct.isSet_arg()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
        if (struct.isSet_command()) {
          oprot.writeI32(struct._command.getValue());
        }
        if (struct.isSet_highPower()) {
          oprot.writeBool(struct._highPower);
        }
        if (struct.isSet_nodeId()) {
          oprot.writeByte(struct._nodeId);
        }
        if (struct.isSet_arg()) {
          oprot.writeByte(struct._arg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BeginControllerCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._command = DriverControllerCommand.findByValue(iprot.readI32());
          struct.set_commandIsSet(true);
        }
        if (incoming.get(2)) {
          struct._highPower = iprot.readBool();
          struct.set_highPowerIsSet(true);
        }
        if (incoming.get(3)) {
          struct._nodeId = iprot.readByte();
          struct.set_nodeIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct._arg = iprot.readByte();
          struct.set_argIsSet(true);
        }
      }
    }

  }

  public static class BeginControllerCommand_result implements org.apache.thrift.TBase<BeginControllerCommand_result, BeginControllerCommand_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BeginControllerCommand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BeginControllerCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BeginControllerCommand_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BeginControllerCommand_result.class, metaDataMap);
    }

    public BeginControllerCommand_result() {
    }

    public BeginControllerCommand_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BeginControllerCommand_result(BeginControllerCommand_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public BeginControllerCommand_result deepCopy() {
      return new BeginControllerCommand_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public BeginControllerCommand_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BeginControllerCommand_result)
        return this.equals((BeginControllerCommand_result)that);
      return false;
    }

    public boolean equals(BeginControllerCommand_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(BeginControllerCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      BeginControllerCommand_result typedOther = (BeginControllerCommand_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BeginControllerCommand_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BeginControllerCommand_resultStandardSchemeFactory implements SchemeFactory {
      public BeginControllerCommand_resultStandardScheme getScheme() {
        return new BeginControllerCommand_resultStandardScheme();
      }
    }

    private static class BeginControllerCommand_resultStandardScheme extends StandardScheme<BeginControllerCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BeginControllerCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BeginControllerCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BeginControllerCommand_resultTupleSchemeFactory implements SchemeFactory {
      public BeginControllerCommand_resultTupleScheme getScheme() {
        return new BeginControllerCommand_resultTupleScheme();
      }
    }

    private static class BeginControllerCommand_resultTupleScheme extends TupleScheme<BeginControllerCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BeginControllerCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BeginControllerCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CancelControllerCommand_args implements org.apache.thrift.TBase<CancelControllerCommand_args, CancelControllerCommand_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancelControllerCommand_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CancelControllerCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CancelControllerCommand_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelControllerCommand_args.class, metaDataMap);
    }

    public CancelControllerCommand_args() {
    }

    public CancelControllerCommand_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CancelControllerCommand_args(CancelControllerCommand_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public CancelControllerCommand_args deepCopy() {
      return new CancelControllerCommand_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public CancelControllerCommand_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CancelControllerCommand_args)
        return this.equals((CancelControllerCommand_args)that);
      return false;
    }

    public boolean equals(CancelControllerCommand_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CancelControllerCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CancelControllerCommand_args typedOther = (CancelControllerCommand_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CancelControllerCommand_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CancelControllerCommand_argsStandardSchemeFactory implements SchemeFactory {
      public CancelControllerCommand_argsStandardScheme getScheme() {
        return new CancelControllerCommand_argsStandardScheme();
      }
    }

    private static class CancelControllerCommand_argsStandardScheme extends StandardScheme<CancelControllerCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CancelControllerCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CancelControllerCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CancelControllerCommand_argsTupleSchemeFactory implements SchemeFactory {
      public CancelControllerCommand_argsTupleScheme getScheme() {
        return new CancelControllerCommand_argsTupleScheme();
      }
    }

    private static class CancelControllerCommand_argsTupleScheme extends TupleScheme<CancelControllerCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CancelControllerCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CancelControllerCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class CancelControllerCommand_result implements org.apache.thrift.TBase<CancelControllerCommand_result, CancelControllerCommand_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancelControllerCommand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CancelControllerCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CancelControllerCommand_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelControllerCommand_result.class, metaDataMap);
    }

    public CancelControllerCommand_result() {
    }

    public CancelControllerCommand_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CancelControllerCommand_result(CancelControllerCommand_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public CancelControllerCommand_result deepCopy() {
      return new CancelControllerCommand_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CancelControllerCommand_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CancelControllerCommand_result)
        return this.equals((CancelControllerCommand_result)that);
      return false;
    }

    public boolean equals(CancelControllerCommand_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CancelControllerCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CancelControllerCommand_result typedOther = (CancelControllerCommand_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CancelControllerCommand_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CancelControllerCommand_resultStandardSchemeFactory implements SchemeFactory {
      public CancelControllerCommand_resultStandardScheme getScheme() {
        return new CancelControllerCommand_resultStandardScheme();
      }
    }

    private static class CancelControllerCommand_resultStandardScheme extends StandardScheme<CancelControllerCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CancelControllerCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CancelControllerCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CancelControllerCommand_resultTupleSchemeFactory implements SchemeFactory {
      public CancelControllerCommand_resultTupleScheme getScheme() {
        return new CancelControllerCommand_resultTupleScheme();
      }
    }

    private static class CancelControllerCommand_resultTupleScheme extends TupleScheme<CancelControllerCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CancelControllerCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CancelControllerCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetNumScenes_args implements org.apache.thrift.TBase<GetNumScenes_args, GetNumScenes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNumScenes_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNumScenes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNumScenes_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNumScenes_args.class, metaDataMap);
    }

    public GetNumScenes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNumScenes_args(GetNumScenes_args other) {
    }

    public GetNumScenes_args deepCopy() {
      return new GetNumScenes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNumScenes_args)
        return this.equals((GetNumScenes_args)that);
      return false;
    }

    public boolean equals(GetNumScenes_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNumScenes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNumScenes_args typedOther = (GetNumScenes_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNumScenes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNumScenes_argsStandardSchemeFactory implements SchemeFactory {
      public GetNumScenes_argsStandardScheme getScheme() {
        return new GetNumScenes_argsStandardScheme();
      }
    }

    private static class GetNumScenes_argsStandardScheme extends StandardScheme<GetNumScenes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNumScenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNumScenes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNumScenes_argsTupleSchemeFactory implements SchemeFactory {
      public GetNumScenes_argsTupleScheme getScheme() {
        return new GetNumScenes_argsTupleScheme();
      }
    }

    private static class GetNumScenes_argsTupleScheme extends TupleScheme<GetNumScenes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNumScenes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNumScenes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetNumScenes_result implements org.apache.thrift.TBase<GetNumScenes_result, GetNumScenes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNumScenes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetNumScenes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetNumScenes_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNumScenes_result.class, metaDataMap);
    }

    public GetNumScenes_result() {
    }

    public GetNumScenes_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetNumScenes_result(GetNumScenes_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public GetNumScenes_result deepCopy() {
      return new GetNumScenes_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public GetNumScenes_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetNumScenes_result)
        return this.equals((GetNumScenes_result)that);
      return false;
    }

    public boolean equals(GetNumScenes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetNumScenes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetNumScenes_result typedOther = (GetNumScenes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetNumScenes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetNumScenes_resultStandardSchemeFactory implements SchemeFactory {
      public GetNumScenes_resultStandardScheme getScheme() {
        return new GetNumScenes_resultStandardScheme();
      }
    }

    private static class GetNumScenes_resultStandardScheme extends StandardScheme<GetNumScenes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetNumScenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetNumScenes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetNumScenes_resultTupleSchemeFactory implements SchemeFactory {
      public GetNumScenes_resultTupleScheme getScheme() {
        return new GetNumScenes_resultTupleScheme();
      }
    }

    private static class GetNumScenes_resultTupleScheme extends TupleScheme<GetNumScenes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetNumScenes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetNumScenes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAllScenes_args implements org.apache.thrift.TBase<GetAllScenes_args, GetAllScenes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllScenes_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllScenes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllScenes_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllScenes_args.class, metaDataMap);
    }

    public GetAllScenes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllScenes_args(GetAllScenes_args other) {
    }

    public GetAllScenes_args deepCopy() {
      return new GetAllScenes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllScenes_args)
        return this.equals((GetAllScenes_args)that);
      return false;
    }

    public boolean equals(GetAllScenes_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAllScenes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAllScenes_args typedOther = (GetAllScenes_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllScenes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllScenes_argsStandardSchemeFactory implements SchemeFactory {
      public GetAllScenes_argsStandardScheme getScheme() {
        return new GetAllScenes_argsStandardScheme();
      }
    }

    private static class GetAllScenes_argsStandardScheme extends StandardScheme<GetAllScenes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllScenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllScenes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllScenes_argsTupleSchemeFactory implements SchemeFactory {
      public GetAllScenes_argsTupleScheme getScheme() {
        return new GetAllScenes_argsTupleScheme();
      }
    }

    private static class GetAllScenes_argsTupleScheme extends TupleScheme<GetAllScenes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllScenes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllScenes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAllScenes_result implements org.apache.thrift.TBase<GetAllScenes_result, GetAllScenes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllScenes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllScenes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllScenes_resultTupleSchemeFactory());
    }

    public GetAllScenesReturnStruct success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAllScenesReturnStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllScenes_result.class, metaDataMap);
    }

    public GetAllScenes_result() {
    }

    public GetAllScenes_result(
      GetAllScenesReturnStruct success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllScenes_result(GetAllScenes_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetAllScenesReturnStruct(other.success);
      }
    }

    public GetAllScenes_result deepCopy() {
      return new GetAllScenes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetAllScenesReturnStruct getSuccess() {
      return this.success;
    }

    public GetAllScenes_result setSuccess(GetAllScenesReturnStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetAllScenesReturnStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllScenes_result)
        return this.equals((GetAllScenes_result)that);
      return false;
    }

    public boolean equals(GetAllScenes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetAllScenes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAllScenes_result typedOther = (GetAllScenes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllScenes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllScenes_resultStandardSchemeFactory implements SchemeFactory {
      public GetAllScenes_resultStandardScheme getScheme() {
        return new GetAllScenes_resultStandardScheme();
      }
    }

    private static class GetAllScenes_resultStandardScheme extends StandardScheme<GetAllScenes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllScenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetAllScenesReturnStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllScenes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllScenes_resultTupleSchemeFactory implements SchemeFactory {
      public GetAllScenes_resultTupleScheme getScheme() {
        return new GetAllScenes_resultTupleScheme();
      }
    }

    private static class GetAllScenes_resultTupleScheme extends TupleScheme<GetAllScenes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllScenes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllScenes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetAllScenesReturnStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CreateScene_args implements org.apache.thrift.TBase<CreateScene_args, CreateScene_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateScene_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateScene_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateScene_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateScene_args.class, metaDataMap);
    }

    public CreateScene_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateScene_args(CreateScene_args other) {
    }

    public CreateScene_args deepCopy() {
      return new CreateScene_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateScene_args)
        return this.equals((CreateScene_args)that);
      return false;
    }

    public boolean equals(CreateScene_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateScene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateScene_args typedOther = (CreateScene_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateScene_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateScene_argsStandardSchemeFactory implements SchemeFactory {
      public CreateScene_argsStandardScheme getScheme() {
        return new CreateScene_argsStandardScheme();
      }
    }

    private static class CreateScene_argsStandardScheme extends StandardScheme<CreateScene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateScene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateScene_argsTupleSchemeFactory implements SchemeFactory {
      public CreateScene_argsTupleScheme getScheme() {
        return new CreateScene_argsTupleScheme();
      }
    }

    private static class CreateScene_argsTupleScheme extends TupleScheme<CreateScene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateScene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateScene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class CreateScene_result implements org.apache.thrift.TBase<CreateScene_result, CreateScene_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateScene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateScene_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateScene_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateScene_result.class, metaDataMap);
    }

    public CreateScene_result() {
    }

    public CreateScene_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateScene_result(CreateScene_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public CreateScene_result deepCopy() {
      return new CreateScene_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public CreateScene_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateScene_result)
        return this.equals((CreateScene_result)that);
      return false;
    }

    public boolean equals(CreateScene_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateScene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateScene_result typedOther = (CreateScene_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateScene_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateScene_resultStandardSchemeFactory implements SchemeFactory {
      public CreateScene_resultStandardScheme getScheme() {
        return new CreateScene_resultStandardScheme();
      }
    }

    private static class CreateScene_resultStandardScheme extends StandardScheme<CreateScene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateScene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateScene_resultTupleSchemeFactory implements SchemeFactory {
      public CreateScene_resultTupleScheme getScheme() {
        return new CreateScene_resultTupleScheme();
      }
    }

    private static class CreateScene_resultTupleScheme extends TupleScheme<CreateScene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateScene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateScene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveScene_args implements org.apache.thrift.TBase<RemoveScene_args, RemoveScene_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveScene_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveScene_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveScene_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveScene_args.class, metaDataMap);
    }

    public RemoveScene_args() {
    }

    public RemoveScene_args(
      byte _sceneId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveScene_args(RemoveScene_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
    }

    public RemoveScene_args deepCopy() {
      return new RemoveScene_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public RemoveScene_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveScene_args)
        return this.equals((RemoveScene_args)that);
      return false;
    }

    public boolean equals(RemoveScene_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveScene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveScene_args typedOther = (RemoveScene_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveScene_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveScene_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveScene_argsStandardScheme getScheme() {
        return new RemoveScene_argsStandardScheme();
      }
    }

    private static class RemoveScene_argsStandardScheme extends StandardScheme<RemoveScene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveScene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveScene_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveScene_argsTupleScheme getScheme() {
        return new RemoveScene_argsTupleScheme();
      }
    }

    private static class RemoveScene_argsTupleScheme extends TupleScheme<RemoveScene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveScene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveScene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
      }
    }

  }

  public static class RemoveScene_result implements org.apache.thrift.TBase<RemoveScene_result, RemoveScene_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveScene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveScene_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveScene_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveScene_result.class, metaDataMap);
    }

    public RemoveScene_result() {
    }

    public RemoveScene_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveScene_result(RemoveScene_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveScene_result deepCopy() {
      return new RemoveScene_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveScene_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveScene_result)
        return this.equals((RemoveScene_result)that);
      return false;
    }

    public boolean equals(RemoveScene_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveScene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveScene_result typedOther = (RemoveScene_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveScene_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveScene_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveScene_resultStandardScheme getScheme() {
        return new RemoveScene_resultStandardScheme();
      }
    }

    private static class RemoveScene_resultStandardScheme extends StandardScheme<RemoveScene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveScene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveScene_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveScene_resultTupleScheme getScheme() {
        return new RemoveScene_resultTupleScheme();
      }
    }

    private static class RemoveScene_resultTupleScheme extends TupleScheme<RemoveScene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveScene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveScene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Bool_args implements org.apache.thrift.TBase<AddSceneValue_Bool_args, AddSceneValue_Bool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Bool_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Bool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Bool_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public boolean _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Bool_args.class, metaDataMap);
    }

    public AddSceneValue_Bool_args() {
    }

    public AddSceneValue_Bool_args(
      byte _sceneId,
      RemoteValueID _valueId,
      boolean _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Bool_args(AddSceneValue_Bool_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public AddSceneValue_Bool_args deepCopy() {
      return new AddSceneValue_Bool_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = false;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValue_Bool_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValue_Bool_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public boolean is_value() {
      return this._value;
    }

    public AddSceneValue_Bool_args set_value(boolean _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Boolean.valueOf(is_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Bool_args)
        return this.equals((AddSceneValue_Bool_args)that);
      return false;
    }

    public boolean equals(AddSceneValue_Bool_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Bool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Bool_args typedOther = (AddSceneValue_Bool_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Bool_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Bool_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Bool_argsStandardScheme getScheme() {
        return new AddSceneValue_Bool_argsStandardScheme();
      }
    }

    private static class AddSceneValue_Bool_argsStandardScheme extends StandardScheme<AddSceneValue_Bool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._value = iprot.readBool();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeBool(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Bool_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Bool_argsTupleScheme getScheme() {
        return new AddSceneValue_Bool_argsTupleScheme();
      }
    }

    private static class AddSceneValue_Bool_argsTupleScheme extends TupleScheme<AddSceneValue_Bool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeBool(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readBool();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Bool_result implements org.apache.thrift.TBase<AddSceneValue_Bool_result, AddSceneValue_Bool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Bool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Bool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Bool_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Bool_result.class, metaDataMap);
    }

    public AddSceneValue_Bool_result() {
    }

    public AddSceneValue_Bool_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Bool_result(AddSceneValue_Bool_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValue_Bool_result deepCopy() {
      return new AddSceneValue_Bool_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValue_Bool_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Bool_result)
        return this.equals((AddSceneValue_Bool_result)that);
      return false;
    }

    public boolean equals(AddSceneValue_Bool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Bool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Bool_result typedOther = (AddSceneValue_Bool_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Bool_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Bool_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Bool_resultStandardScheme getScheme() {
        return new AddSceneValue_Bool_resultStandardScheme();
      }
    }

    private static class AddSceneValue_Bool_resultStandardScheme extends StandardScheme<AddSceneValue_Bool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Bool_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Bool_resultTupleScheme getScheme() {
        return new AddSceneValue_Bool_resultTupleScheme();
      }
    }

    private static class AddSceneValue_Bool_resultTupleScheme extends TupleScheme<AddSceneValue_Bool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Uint8_args implements org.apache.thrift.TBase<AddSceneValue_Uint8_args, AddSceneValue_Uint8_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Uint8_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Uint8_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Uint8_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public byte _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Uint8_args.class, metaDataMap);
    }

    public AddSceneValue_Uint8_args() {
    }

    public AddSceneValue_Uint8_args(
      byte _sceneId,
      RemoteValueID _valueId,
      byte _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Uint8_args(AddSceneValue_Uint8_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public AddSceneValue_Uint8_args deepCopy() {
      return new AddSceneValue_Uint8_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValue_Uint8_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValue_Uint8_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public byte get_value() {
      return this._value;
    }

    public AddSceneValue_Uint8_args set_value(byte _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Byte.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Uint8_args)
        return this.equals((AddSceneValue_Uint8_args)that);
      return false;
    }

    public boolean equals(AddSceneValue_Uint8_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Uint8_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Uint8_args typedOther = (AddSceneValue_Uint8_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Uint8_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Uint8_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Uint8_argsStandardScheme getScheme() {
        return new AddSceneValue_Uint8_argsStandardScheme();
      }
    }

    private static class AddSceneValue_Uint8_argsStandardScheme extends StandardScheme<AddSceneValue_Uint8_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._value = iprot.readByte();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeByte(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Uint8_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Uint8_argsTupleScheme getScheme() {
        return new AddSceneValue_Uint8_argsTupleScheme();
      }
    }

    private static class AddSceneValue_Uint8_argsTupleScheme extends TupleScheme<AddSceneValue_Uint8_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeByte(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readByte();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Uint8_result implements org.apache.thrift.TBase<AddSceneValue_Uint8_result, AddSceneValue_Uint8_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Uint8_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Uint8_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Uint8_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Uint8_result.class, metaDataMap);
    }

    public AddSceneValue_Uint8_result() {
    }

    public AddSceneValue_Uint8_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Uint8_result(AddSceneValue_Uint8_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValue_Uint8_result deepCopy() {
      return new AddSceneValue_Uint8_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValue_Uint8_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Uint8_result)
        return this.equals((AddSceneValue_Uint8_result)that);
      return false;
    }

    public boolean equals(AddSceneValue_Uint8_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Uint8_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Uint8_result typedOther = (AddSceneValue_Uint8_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Uint8_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Uint8_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Uint8_resultStandardScheme getScheme() {
        return new AddSceneValue_Uint8_resultStandardScheme();
      }
    }

    private static class AddSceneValue_Uint8_resultStandardScheme extends StandardScheme<AddSceneValue_Uint8_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Uint8_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Uint8_resultTupleScheme getScheme() {
        return new AddSceneValue_Uint8_resultTupleScheme();
      }
    }

    private static class AddSceneValue_Uint8_resultTupleScheme extends TupleScheme<AddSceneValue_Uint8_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Float_args implements org.apache.thrift.TBase<AddSceneValue_Float_args, AddSceneValue_Float_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Float_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Float_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Float_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public double _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Float_args.class, metaDataMap);
    }

    public AddSceneValue_Float_args() {
    }

    public AddSceneValue_Float_args(
      byte _sceneId,
      RemoteValueID _valueId,
      double _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Float_args(AddSceneValue_Float_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public AddSceneValue_Float_args deepCopy() {
      return new AddSceneValue_Float_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0.0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValue_Float_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValue_Float_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public double get_value() {
      return this._value;
    }

    public AddSceneValue_Float_args set_value(double _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Double.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Float_args)
        return this.equals((AddSceneValue_Float_args)that);
      return false;
    }

    public boolean equals(AddSceneValue_Float_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Float_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Float_args typedOther = (AddSceneValue_Float_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Float_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Float_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Float_argsStandardScheme getScheme() {
        return new AddSceneValue_Float_argsStandardScheme();
      }
    }

    private static class AddSceneValue_Float_argsStandardScheme extends StandardScheme<AddSceneValue_Float_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Float_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct._value = iprot.readDouble();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Float_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeDouble(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Float_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Float_argsTupleScheme getScheme() {
        return new AddSceneValue_Float_argsTupleScheme();
      }
    }

    private static class AddSceneValue_Float_argsTupleScheme extends TupleScheme<AddSceneValue_Float_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Float_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeDouble(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Float_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readDouble();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Float_result implements org.apache.thrift.TBase<AddSceneValue_Float_result, AddSceneValue_Float_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Float_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Float_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Float_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Float_result.class, metaDataMap);
    }

    public AddSceneValue_Float_result() {
    }

    public AddSceneValue_Float_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Float_result(AddSceneValue_Float_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValue_Float_result deepCopy() {
      return new AddSceneValue_Float_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValue_Float_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Float_result)
        return this.equals((AddSceneValue_Float_result)that);
      return false;
    }

    public boolean equals(AddSceneValue_Float_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Float_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Float_result typedOther = (AddSceneValue_Float_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Float_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Float_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Float_resultStandardScheme getScheme() {
        return new AddSceneValue_Float_resultStandardScheme();
      }
    }

    private static class AddSceneValue_Float_resultStandardScheme extends StandardScheme<AddSceneValue_Float_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Float_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Float_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Float_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Float_resultTupleScheme getScheme() {
        return new AddSceneValue_Float_resultTupleScheme();
      }
    }

    private static class AddSceneValue_Float_resultTupleScheme extends TupleScheme<AddSceneValue_Float_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Float_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Float_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Int32_args implements org.apache.thrift.TBase<AddSceneValue_Int32_args, AddSceneValue_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Int32_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Int32_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public int _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Int32_args.class, metaDataMap);
    }

    public AddSceneValue_Int32_args() {
    }

    public AddSceneValue_Int32_args(
      byte _sceneId,
      RemoteValueID _valueId,
      int _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Int32_args(AddSceneValue_Int32_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public AddSceneValue_Int32_args deepCopy() {
      return new AddSceneValue_Int32_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValue_Int32_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValue_Int32_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public int get_value() {
      return this._value;
    }

    public AddSceneValue_Int32_args set_value(int _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Integer.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Int32_args)
        return this.equals((AddSceneValue_Int32_args)that);
      return false;
    }

    public boolean equals(AddSceneValue_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Int32_args typedOther = (AddSceneValue_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Int32_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int32_argsStandardScheme getScheme() {
        return new AddSceneValue_Int32_argsStandardScheme();
      }
    }

    private static class AddSceneValue_Int32_argsStandardScheme extends StandardScheme<AddSceneValue_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._value = iprot.readI32();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI32(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int32_argsTupleScheme getScheme() {
        return new AddSceneValue_Int32_argsTupleScheme();
      }
    }

    private static class AddSceneValue_Int32_argsTupleScheme extends TupleScheme<AddSceneValue_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI32(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readI32();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Int32_result implements org.apache.thrift.TBase<AddSceneValue_Int32_result, AddSceneValue_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Int32_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Int32_result.class, metaDataMap);
    }

    public AddSceneValue_Int32_result() {
    }

    public AddSceneValue_Int32_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Int32_result(AddSceneValue_Int32_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValue_Int32_result deepCopy() {
      return new AddSceneValue_Int32_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValue_Int32_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Int32_result)
        return this.equals((AddSceneValue_Int32_result)that);
      return false;
    }

    public boolean equals(AddSceneValue_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Int32_result typedOther = (AddSceneValue_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Int32_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int32_resultStandardScheme getScheme() {
        return new AddSceneValue_Int32_resultStandardScheme();
      }
    }

    private static class AddSceneValue_Int32_resultStandardScheme extends StandardScheme<AddSceneValue_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int32_resultTupleScheme getScheme() {
        return new AddSceneValue_Int32_resultTupleScheme();
      }
    }

    private static class AddSceneValue_Int32_resultTupleScheme extends TupleScheme<AddSceneValue_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Int16_args implements org.apache.thrift.TBase<AddSceneValue_Int16_args, AddSceneValue_Int16_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Int16_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I16, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Int16_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Int16_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public short _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Int16_args.class, metaDataMap);
    }

    public AddSceneValue_Int16_args() {
    }

    public AddSceneValue_Int16_args(
      byte _sceneId,
      RemoteValueID _valueId,
      short _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Int16_args(AddSceneValue_Int16_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public AddSceneValue_Int16_args deepCopy() {
      return new AddSceneValue_Int16_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValue_Int16_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValue_Int16_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public short get_value() {
      return this._value;
    }

    public AddSceneValue_Int16_args set_value(short _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Short.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Int16_args)
        return this.equals((AddSceneValue_Int16_args)that);
      return false;
    }

    public boolean equals(AddSceneValue_Int16_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Int16_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Int16_args typedOther = (AddSceneValue_Int16_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Int16_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Int16_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int16_argsStandardScheme getScheme() {
        return new AddSceneValue_Int16_argsStandardScheme();
      }
    }

    private static class AddSceneValue_Int16_argsStandardScheme extends StandardScheme<AddSceneValue_Int16_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct._value = iprot.readI16();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI16(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Int16_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int16_argsTupleScheme getScheme() {
        return new AddSceneValue_Int16_argsTupleScheme();
      }
    }

    private static class AddSceneValue_Int16_argsTupleScheme extends TupleScheme<AddSceneValue_Int16_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI16(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readI16();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_Int16_result implements org.apache.thrift.TBase<AddSceneValue_Int16_result, AddSceneValue_Int16_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_Int16_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_Int16_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_Int16_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_Int16_result.class, metaDataMap);
    }

    public AddSceneValue_Int16_result() {
    }

    public AddSceneValue_Int16_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_Int16_result(AddSceneValue_Int16_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValue_Int16_result deepCopy() {
      return new AddSceneValue_Int16_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValue_Int16_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_Int16_result)
        return this.equals((AddSceneValue_Int16_result)that);
      return false;
    }

    public boolean equals(AddSceneValue_Int16_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_Int16_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_Int16_result typedOther = (AddSceneValue_Int16_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_Int16_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_Int16_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int16_resultStandardScheme getScheme() {
        return new AddSceneValue_Int16_resultStandardScheme();
      }
    }

    private static class AddSceneValue_Int16_resultStandardScheme extends StandardScheme<AddSceneValue_Int16_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_Int16_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_Int16_resultTupleScheme getScheme() {
        return new AddSceneValue_Int16_resultTupleScheme();
      }
    }

    private static class AddSceneValue_Int16_resultTupleScheme extends TupleScheme<AddSceneValue_Int16_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_String_args implements org.apache.thrift.TBase<AddSceneValue_String_args, AddSceneValue_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_String_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_String_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_String_args.class, metaDataMap);
    }

    public AddSceneValue_String_args() {
    }

    public AddSceneValue_String_args(
      byte _sceneId,
      RemoteValueID _valueId,
      String _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_String_args(AddSceneValue_String_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public AddSceneValue_String_args deepCopy() {
      return new AddSceneValue_String_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      this._value = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValue_String_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValue_String_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public AddSceneValue_String_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_String_args)
        return this.equals((AddSceneValue_String_args)that);
      return false;
    }

    public boolean equals(AddSceneValue_String_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_String_args typedOther = (AddSceneValue_String_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_String_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_String_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_String_argsStandardScheme getScheme() {
        return new AddSceneValue_String_argsStandardScheme();
      }
    }

    private static class AddSceneValue_String_argsStandardScheme extends StandardScheme<AddSceneValue_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_String_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_String_argsTupleScheme getScheme() {
        return new AddSceneValue_String_argsTupleScheme();
      }
    }

    private static class AddSceneValue_String_argsTupleScheme extends TupleScheme<AddSceneValue_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValue_String_result implements org.apache.thrift.TBase<AddSceneValue_String_result, AddSceneValue_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValue_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValue_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValue_String_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValue_String_result.class, metaDataMap);
    }

    public AddSceneValue_String_result() {
    }

    public AddSceneValue_String_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValue_String_result(AddSceneValue_String_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValue_String_result deepCopy() {
      return new AddSceneValue_String_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValue_String_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValue_String_result)
        return this.equals((AddSceneValue_String_result)that);
      return false;
    }

    public boolean equals(AddSceneValue_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValue_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValue_String_result typedOther = (AddSceneValue_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValue_String_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValue_String_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValue_String_resultStandardScheme getScheme() {
        return new AddSceneValue_String_resultStandardScheme();
      }
    }

    private static class AddSceneValue_String_resultStandardScheme extends StandardScheme<AddSceneValue_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValue_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValue_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValue_String_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValue_String_resultTupleScheme getScheme() {
        return new AddSceneValue_String_resultTupleScheme();
      }
    }

    private static class AddSceneValue_String_resultTupleScheme extends TupleScheme<AddSceneValue_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValue_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValueListSelection_String_args implements org.apache.thrift.TBase<AddSceneValueListSelection_String_args, AddSceneValueListSelection_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValueListSelection_String_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValueListSelection_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValueListSelection_String_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValueListSelection_String_args.class, metaDataMap);
    }

    public AddSceneValueListSelection_String_args() {
    }

    public AddSceneValueListSelection_String_args(
      byte _sceneId,
      RemoteValueID _valueId,
      String _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValueListSelection_String_args(AddSceneValueListSelection_String_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public AddSceneValueListSelection_String_args deepCopy() {
      return new AddSceneValueListSelection_String_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      this._value = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValueListSelection_String_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValueListSelection_String_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public AddSceneValueListSelection_String_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValueListSelection_String_args)
        return this.equals((AddSceneValueListSelection_String_args)that);
      return false;
    }

    public boolean equals(AddSceneValueListSelection_String_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValueListSelection_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValueListSelection_String_args typedOther = (AddSceneValueListSelection_String_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValueListSelection_String_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValueListSelection_String_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_String_argsStandardScheme getScheme() {
        return new AddSceneValueListSelection_String_argsStandardScheme();
      }
    }

    private static class AddSceneValueListSelection_String_argsStandardScheme extends StandardScheme<AddSceneValueListSelection_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValueListSelection_String_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_String_argsTupleScheme getScheme() {
        return new AddSceneValueListSelection_String_argsTupleScheme();
      }
    }

    private static class AddSceneValueListSelection_String_argsTupleScheme extends TupleScheme<AddSceneValueListSelection_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValueListSelection_String_result implements org.apache.thrift.TBase<AddSceneValueListSelection_String_result, AddSceneValueListSelection_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValueListSelection_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValueListSelection_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValueListSelection_String_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValueListSelection_String_result.class, metaDataMap);
    }

    public AddSceneValueListSelection_String_result() {
    }

    public AddSceneValueListSelection_String_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValueListSelection_String_result(AddSceneValueListSelection_String_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValueListSelection_String_result deepCopy() {
      return new AddSceneValueListSelection_String_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValueListSelection_String_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValueListSelection_String_result)
        return this.equals((AddSceneValueListSelection_String_result)that);
      return false;
    }

    public boolean equals(AddSceneValueListSelection_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValueListSelection_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValueListSelection_String_result typedOther = (AddSceneValueListSelection_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValueListSelection_String_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValueListSelection_String_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_String_resultStandardScheme getScheme() {
        return new AddSceneValueListSelection_String_resultStandardScheme();
      }
    }

    private static class AddSceneValueListSelection_String_resultStandardScheme extends StandardScheme<AddSceneValueListSelection_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValueListSelection_String_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_String_resultTupleScheme getScheme() {
        return new AddSceneValueListSelection_String_resultTupleScheme();
      }
    }

    private static class AddSceneValueListSelection_String_resultTupleScheme extends TupleScheme<AddSceneValueListSelection_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValueListSelection_Int32_args implements org.apache.thrift.TBase<AddSceneValueListSelection_Int32_args, AddSceneValueListSelection_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValueListSelection_Int32_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValueListSelection_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValueListSelection_Int32_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public int _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValueListSelection_Int32_args.class, metaDataMap);
    }

    public AddSceneValueListSelection_Int32_args() {
    }

    public AddSceneValueListSelection_Int32_args(
      byte _sceneId,
      RemoteValueID _valueId,
      int _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValueListSelection_Int32_args(AddSceneValueListSelection_Int32_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public AddSceneValueListSelection_Int32_args deepCopy() {
      return new AddSceneValueListSelection_Int32_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public AddSceneValueListSelection_Int32_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public AddSceneValueListSelection_Int32_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public int get_value() {
      return this._value;
    }

    public AddSceneValueListSelection_Int32_args set_value(int _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Integer.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValueListSelection_Int32_args)
        return this.equals((AddSceneValueListSelection_Int32_args)that);
      return false;
    }

    public boolean equals(AddSceneValueListSelection_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValueListSelection_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValueListSelection_Int32_args typedOther = (AddSceneValueListSelection_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValueListSelection_Int32_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValueListSelection_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_Int32_argsStandardScheme getScheme() {
        return new AddSceneValueListSelection_Int32_argsStandardScheme();
      }
    }

    private static class AddSceneValueListSelection_Int32_argsStandardScheme extends StandardScheme<AddSceneValueListSelection_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._value = iprot.readI32();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI32(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValueListSelection_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_Int32_argsTupleScheme getScheme() {
        return new AddSceneValueListSelection_Int32_argsTupleScheme();
      }
    }

    private static class AddSceneValueListSelection_Int32_argsTupleScheme extends TupleScheme<AddSceneValueListSelection_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI32(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readI32();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class AddSceneValueListSelection_Int32_result implements org.apache.thrift.TBase<AddSceneValueListSelection_Int32_result, AddSceneValueListSelection_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddSceneValueListSelection_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddSceneValueListSelection_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddSceneValueListSelection_Int32_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddSceneValueListSelection_Int32_result.class, metaDataMap);
    }

    public AddSceneValueListSelection_Int32_result() {
    }

    public AddSceneValueListSelection_Int32_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddSceneValueListSelection_Int32_result(AddSceneValueListSelection_Int32_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public AddSceneValueListSelection_Int32_result deepCopy() {
      return new AddSceneValueListSelection_Int32_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AddSceneValueListSelection_Int32_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddSceneValueListSelection_Int32_result)
        return this.equals((AddSceneValueListSelection_Int32_result)that);
      return false;
    }

    public boolean equals(AddSceneValueListSelection_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddSceneValueListSelection_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddSceneValueListSelection_Int32_result typedOther = (AddSceneValueListSelection_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddSceneValueListSelection_Int32_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddSceneValueListSelection_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_Int32_resultStandardScheme getScheme() {
        return new AddSceneValueListSelection_Int32_resultStandardScheme();
      }
    }

    private static class AddSceneValueListSelection_Int32_resultStandardScheme extends StandardScheme<AddSceneValueListSelection_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddSceneValueListSelection_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public AddSceneValueListSelection_Int32_resultTupleScheme getScheme() {
        return new AddSceneValueListSelection_Int32_resultTupleScheme();
      }
    }

    private static class AddSceneValueListSelection_Int32_resultTupleScheme extends TupleScheme<AddSceneValueListSelection_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RemoveSceneValue_args implements org.apache.thrift.TBase<RemoveSceneValue_args, RemoveSceneValue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveSceneValue_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveSceneValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveSceneValue_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveSceneValue_args.class, metaDataMap);
    }

    public RemoveSceneValue_args() {
    }

    public RemoveSceneValue_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveSceneValue_args(RemoveSceneValue_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public RemoveSceneValue_args deepCopy() {
      return new RemoveSceneValue_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public RemoveSceneValue_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public RemoveSceneValue_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveSceneValue_args)
        return this.equals((RemoveSceneValue_args)that);
      return false;
    }

    public boolean equals(RemoveSceneValue_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveSceneValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveSceneValue_args typedOther = (RemoveSceneValue_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveSceneValue_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveSceneValue_argsStandardSchemeFactory implements SchemeFactory {
      public RemoveSceneValue_argsStandardScheme getScheme() {
        return new RemoveSceneValue_argsStandardScheme();
      }
    }

    private static class RemoveSceneValue_argsStandardScheme extends StandardScheme<RemoveSceneValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveSceneValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveSceneValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveSceneValue_argsTupleSchemeFactory implements SchemeFactory {
      public RemoveSceneValue_argsTupleScheme getScheme() {
        return new RemoveSceneValue_argsTupleScheme();
      }
    }

    private static class RemoveSceneValue_argsTupleScheme extends TupleScheme<RemoveSceneValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveSceneValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveSceneValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class RemoveSceneValue_result implements org.apache.thrift.TBase<RemoveSceneValue_result, RemoveSceneValue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoveSceneValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RemoveSceneValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RemoveSceneValue_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveSceneValue_result.class, metaDataMap);
    }

    public RemoveSceneValue_result() {
    }

    public RemoveSceneValue_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RemoveSceneValue_result(RemoveSceneValue_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public RemoveSceneValue_result deepCopy() {
      return new RemoveSceneValue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RemoveSceneValue_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RemoveSceneValue_result)
        return this.equals((RemoveSceneValue_result)that);
      return false;
    }

    public boolean equals(RemoveSceneValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RemoveSceneValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RemoveSceneValue_result typedOther = (RemoveSceneValue_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RemoveSceneValue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RemoveSceneValue_resultStandardSchemeFactory implements SchemeFactory {
      public RemoveSceneValue_resultStandardScheme getScheme() {
        return new RemoveSceneValue_resultStandardScheme();
      }
    }

    private static class RemoveSceneValue_resultStandardScheme extends StandardScheme<RemoveSceneValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveSceneValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveSceneValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RemoveSceneValue_resultTupleSchemeFactory implements SchemeFactory {
      public RemoveSceneValue_resultTupleScheme getScheme() {
        return new RemoveSceneValue_resultTupleScheme();
      }
    }

    private static class RemoveSceneValue_resultTupleScheme extends TupleScheme<RemoveSceneValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RemoveSceneValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RemoveSceneValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValues_args implements org.apache.thrift.TBase<SceneGetValues_args, SceneGetValues_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValues_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValues_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValues_args.class, metaDataMap);
    }

    public SceneGetValues_args() {
    }

    public SceneGetValues_args(
      byte _sceneId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValues_args(SceneGetValues_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
    }

    public SceneGetValues_args deepCopy() {
      return new SceneGetValues_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValues_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValues_args)
        return this.equals((SceneGetValues_args)that);
      return false;
    }

    public boolean equals(SceneGetValues_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValues_args typedOther = (SceneGetValues_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValues_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValues_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValues_argsStandardScheme getScheme() {
        return new SceneGetValues_argsStandardScheme();
      }
    }

    private static class SceneGetValues_argsStandardScheme extends StandardScheme<SceneGetValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValues_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValues_argsTupleScheme getScheme() {
        return new SceneGetValues_argsTupleScheme();
      }
    }

    private static class SceneGetValues_argsTupleScheme extends TupleScheme<SceneGetValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValues_result implements org.apache.thrift.TBase<SceneGetValues_result, SceneGetValues_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValues_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValues_resultTupleSchemeFactory());
    }

    public SceneGetValuesReturnStruct success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SceneGetValuesReturnStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValues_result.class, metaDataMap);
    }

    public SceneGetValues_result() {
    }

    public SceneGetValues_result(
      SceneGetValuesReturnStruct success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValues_result(SceneGetValues_result other) {
      if (other.isSetSuccess()) {
        this.success = new SceneGetValuesReturnStruct(other.success);
      }
    }

    public SceneGetValues_result deepCopy() {
      return new SceneGetValues_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SceneGetValuesReturnStruct getSuccess() {
      return this.success;
    }

    public SceneGetValues_result setSuccess(SceneGetValuesReturnStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SceneGetValuesReturnStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValues_result)
        return this.equals((SceneGetValues_result)that);
      return false;
    }

    public boolean equals(SceneGetValues_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValues_result typedOther = (SceneGetValues_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValues_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValues_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValues_resultStandardScheme getScheme() {
        return new SceneGetValues_resultStandardScheme();
      }
    }

    private static class SceneGetValues_resultStandardScheme extends StandardScheme<SceneGetValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SceneGetValuesReturnStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValues_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValues_resultTupleScheme getScheme() {
        return new SceneGetValues_resultTupleScheme();
      }
    }

    private static class SceneGetValues_resultTupleScheme extends TupleScheme<SceneGetValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SceneGetValuesReturnStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsBool_args implements org.apache.thrift.TBase<SceneGetValueAsBool_args, SceneGetValueAsBool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsBool_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsBool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsBool_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsBool_args.class, metaDataMap);
    }

    public SceneGetValueAsBool_args() {
    }

    public SceneGetValueAsBool_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsBool_args(SceneGetValueAsBool_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueAsBool_args deepCopy() {
      return new SceneGetValueAsBool_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueAsBool_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueAsBool_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsBool_args)
        return this.equals((SceneGetValueAsBool_args)that);
      return false;
    }

    public boolean equals(SceneGetValueAsBool_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsBool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsBool_args typedOther = (SceneGetValueAsBool_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsBool_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsBool_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsBool_argsStandardScheme getScheme() {
        return new SceneGetValueAsBool_argsStandardScheme();
      }
    }

    private static class SceneGetValueAsBool_argsStandardScheme extends StandardScheme<SceneGetValueAsBool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsBool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsBool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsBool_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsBool_argsTupleScheme getScheme() {
        return new SceneGetValueAsBool_argsTupleScheme();
      }
    }

    private static class SceneGetValueAsBool_argsTupleScheme extends TupleScheme<SceneGetValueAsBool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsBool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsBool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsBool_result implements org.apache.thrift.TBase<SceneGetValueAsBool_result, SceneGetValueAsBool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsBool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsBool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsBool_resultTupleSchemeFactory());
    }

    public Bool_Bool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Bool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsBool_result.class, metaDataMap);
    }

    public SceneGetValueAsBool_result() {
    }

    public SceneGetValueAsBool_result(
      Bool_Bool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsBool_result(SceneGetValueAsBool_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Bool(other.success);
      }
    }

    public SceneGetValueAsBool_result deepCopy() {
      return new SceneGetValueAsBool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Bool getSuccess() {
      return this.success;
    }

    public SceneGetValueAsBool_result setSuccess(Bool_Bool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Bool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsBool_result)
        return this.equals((SceneGetValueAsBool_result)that);
      return false;
    }

    public boolean equals(SceneGetValueAsBool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsBool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsBool_result typedOther = (SceneGetValueAsBool_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsBool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsBool_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsBool_resultStandardScheme getScheme() {
        return new SceneGetValueAsBool_resultStandardScheme();
      }
    }

    private static class SceneGetValueAsBool_resultStandardScheme extends StandardScheme<SceneGetValueAsBool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsBool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Bool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsBool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsBool_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsBool_resultTupleScheme getScheme() {
        return new SceneGetValueAsBool_resultTupleScheme();
      }
    }

    private static class SceneGetValueAsBool_resultTupleScheme extends TupleScheme<SceneGetValueAsBool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsBool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsBool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Bool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsByte_args implements org.apache.thrift.TBase<SceneGetValueAsByte_args, SceneGetValueAsByte_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsByte_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsByte_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsByte_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsByte_args.class, metaDataMap);
    }

    public SceneGetValueAsByte_args() {
    }

    public SceneGetValueAsByte_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsByte_args(SceneGetValueAsByte_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueAsByte_args deepCopy() {
      return new SceneGetValueAsByte_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueAsByte_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueAsByte_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsByte_args)
        return this.equals((SceneGetValueAsByte_args)that);
      return false;
    }

    public boolean equals(SceneGetValueAsByte_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsByte_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsByte_args typedOther = (SceneGetValueAsByte_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsByte_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsByte_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsByte_argsStandardScheme getScheme() {
        return new SceneGetValueAsByte_argsStandardScheme();
      }
    }

    private static class SceneGetValueAsByte_argsStandardScheme extends StandardScheme<SceneGetValueAsByte_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsByte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsByte_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsByte_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsByte_argsTupleScheme getScheme() {
        return new SceneGetValueAsByte_argsTupleScheme();
      }
    }

    private static class SceneGetValueAsByte_argsTupleScheme extends TupleScheme<SceneGetValueAsByte_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsByte_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsByte_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsByte_result implements org.apache.thrift.TBase<SceneGetValueAsByte_result, SceneGetValueAsByte_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsByte_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsByte_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsByte_resultTupleSchemeFactory());
    }

    public Bool_UInt8 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_UInt8.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsByte_result.class, metaDataMap);
    }

    public SceneGetValueAsByte_result() {
    }

    public SceneGetValueAsByte_result(
      Bool_UInt8 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsByte_result(SceneGetValueAsByte_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_UInt8(other.success);
      }
    }

    public SceneGetValueAsByte_result deepCopy() {
      return new SceneGetValueAsByte_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_UInt8 getSuccess() {
      return this.success;
    }

    public SceneGetValueAsByte_result setSuccess(Bool_UInt8 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_UInt8)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsByte_result)
        return this.equals((SceneGetValueAsByte_result)that);
      return false;
    }

    public boolean equals(SceneGetValueAsByte_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsByte_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsByte_result typedOther = (SceneGetValueAsByte_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsByte_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsByte_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsByte_resultStandardScheme getScheme() {
        return new SceneGetValueAsByte_resultStandardScheme();
      }
    }

    private static class SceneGetValueAsByte_resultStandardScheme extends StandardScheme<SceneGetValueAsByte_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsByte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_UInt8();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsByte_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsByte_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsByte_resultTupleScheme getScheme() {
        return new SceneGetValueAsByte_resultTupleScheme();
      }
    }

    private static class SceneGetValueAsByte_resultTupleScheme extends TupleScheme<SceneGetValueAsByte_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsByte_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsByte_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_UInt8();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsFloat_args implements org.apache.thrift.TBase<SceneGetValueAsFloat_args, SceneGetValueAsFloat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsFloat_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsFloat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsFloat_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsFloat_args.class, metaDataMap);
    }

    public SceneGetValueAsFloat_args() {
    }

    public SceneGetValueAsFloat_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsFloat_args(SceneGetValueAsFloat_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueAsFloat_args deepCopy() {
      return new SceneGetValueAsFloat_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueAsFloat_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueAsFloat_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsFloat_args)
        return this.equals((SceneGetValueAsFloat_args)that);
      return false;
    }

    public boolean equals(SceneGetValueAsFloat_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsFloat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsFloat_args typedOther = (SceneGetValueAsFloat_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsFloat_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsFloat_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsFloat_argsStandardScheme getScheme() {
        return new SceneGetValueAsFloat_argsStandardScheme();
      }
    }

    private static class SceneGetValueAsFloat_argsStandardScheme extends StandardScheme<SceneGetValueAsFloat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsFloat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsFloat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsFloat_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsFloat_argsTupleScheme getScheme() {
        return new SceneGetValueAsFloat_argsTupleScheme();
      }
    }

    private static class SceneGetValueAsFloat_argsTupleScheme extends TupleScheme<SceneGetValueAsFloat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsFloat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsFloat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsFloat_result implements org.apache.thrift.TBase<SceneGetValueAsFloat_result, SceneGetValueAsFloat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsFloat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsFloat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsFloat_resultTupleSchemeFactory());
    }

    public Bool_Float success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Float.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsFloat_result.class, metaDataMap);
    }

    public SceneGetValueAsFloat_result() {
    }

    public SceneGetValueAsFloat_result(
      Bool_Float success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsFloat_result(SceneGetValueAsFloat_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Float(other.success);
      }
    }

    public SceneGetValueAsFloat_result deepCopy() {
      return new SceneGetValueAsFloat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Float getSuccess() {
      return this.success;
    }

    public SceneGetValueAsFloat_result setSuccess(Bool_Float success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Float)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsFloat_result)
        return this.equals((SceneGetValueAsFloat_result)that);
      return false;
    }

    public boolean equals(SceneGetValueAsFloat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsFloat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsFloat_result typedOther = (SceneGetValueAsFloat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsFloat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsFloat_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsFloat_resultStandardScheme getScheme() {
        return new SceneGetValueAsFloat_resultStandardScheme();
      }
    }

    private static class SceneGetValueAsFloat_resultStandardScheme extends StandardScheme<SceneGetValueAsFloat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsFloat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Float();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsFloat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsFloat_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsFloat_resultTupleScheme getScheme() {
        return new SceneGetValueAsFloat_resultTupleScheme();
      }
    }

    private static class SceneGetValueAsFloat_resultTupleScheme extends TupleScheme<SceneGetValueAsFloat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsFloat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsFloat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Float();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsInt_args implements org.apache.thrift.TBase<SceneGetValueAsInt_args, SceneGetValueAsInt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsInt_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsInt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsInt_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsInt_args.class, metaDataMap);
    }

    public SceneGetValueAsInt_args() {
    }

    public SceneGetValueAsInt_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsInt_args(SceneGetValueAsInt_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueAsInt_args deepCopy() {
      return new SceneGetValueAsInt_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueAsInt_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueAsInt_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsInt_args)
        return this.equals((SceneGetValueAsInt_args)that);
      return false;
    }

    public boolean equals(SceneGetValueAsInt_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsInt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsInt_args typedOther = (SceneGetValueAsInt_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsInt_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsInt_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsInt_argsStandardScheme getScheme() {
        return new SceneGetValueAsInt_argsStandardScheme();
      }
    }

    private static class SceneGetValueAsInt_argsStandardScheme extends StandardScheme<SceneGetValueAsInt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsInt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsInt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsInt_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsInt_argsTupleScheme getScheme() {
        return new SceneGetValueAsInt_argsTupleScheme();
      }
    }

    private static class SceneGetValueAsInt_argsTupleScheme extends TupleScheme<SceneGetValueAsInt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsInt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsInt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsInt_result implements org.apache.thrift.TBase<SceneGetValueAsInt_result, SceneGetValueAsInt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsInt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsInt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsInt_resultTupleSchemeFactory());
    }

    public Bool_Int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Int.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsInt_result.class, metaDataMap);
    }

    public SceneGetValueAsInt_result() {
    }

    public SceneGetValueAsInt_result(
      Bool_Int success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsInt_result(SceneGetValueAsInt_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Int(other.success);
      }
    }

    public SceneGetValueAsInt_result deepCopy() {
      return new SceneGetValueAsInt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Int getSuccess() {
      return this.success;
    }

    public SceneGetValueAsInt_result setSuccess(Bool_Int success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Int)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsInt_result)
        return this.equals((SceneGetValueAsInt_result)that);
      return false;
    }

    public boolean equals(SceneGetValueAsInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsInt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsInt_result typedOther = (SceneGetValueAsInt_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsInt_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsInt_resultStandardScheme getScheme() {
        return new SceneGetValueAsInt_resultStandardScheme();
      }
    }

    private static class SceneGetValueAsInt_resultStandardScheme extends StandardScheme<SceneGetValueAsInt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsInt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Int();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsInt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsInt_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsInt_resultTupleScheme getScheme() {
        return new SceneGetValueAsInt_resultTupleScheme();
      }
    }

    private static class SceneGetValueAsInt_resultTupleScheme extends TupleScheme<SceneGetValueAsInt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsInt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsInt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Int();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsShort_args implements org.apache.thrift.TBase<SceneGetValueAsShort_args, SceneGetValueAsShort_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsShort_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsShort_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsShort_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsShort_args.class, metaDataMap);
    }

    public SceneGetValueAsShort_args() {
    }

    public SceneGetValueAsShort_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsShort_args(SceneGetValueAsShort_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueAsShort_args deepCopy() {
      return new SceneGetValueAsShort_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueAsShort_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueAsShort_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsShort_args)
        return this.equals((SceneGetValueAsShort_args)that);
      return false;
    }

    public boolean equals(SceneGetValueAsShort_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsShort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsShort_args typedOther = (SceneGetValueAsShort_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsShort_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsShort_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsShort_argsStandardScheme getScheme() {
        return new SceneGetValueAsShort_argsStandardScheme();
      }
    }

    private static class SceneGetValueAsShort_argsStandardScheme extends StandardScheme<SceneGetValueAsShort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsShort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsShort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsShort_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsShort_argsTupleScheme getScheme() {
        return new SceneGetValueAsShort_argsTupleScheme();
      }
    }

    private static class SceneGetValueAsShort_argsTupleScheme extends TupleScheme<SceneGetValueAsShort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsShort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsShort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsShort_result implements org.apache.thrift.TBase<SceneGetValueAsShort_result, SceneGetValueAsShort_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsShort_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsShort_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsShort_resultTupleSchemeFactory());
    }

    public Bool_Int16 success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Int16.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsShort_result.class, metaDataMap);
    }

    public SceneGetValueAsShort_result() {
    }

    public SceneGetValueAsShort_result(
      Bool_Int16 success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsShort_result(SceneGetValueAsShort_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Int16(other.success);
      }
    }

    public SceneGetValueAsShort_result deepCopy() {
      return new SceneGetValueAsShort_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Int16 getSuccess() {
      return this.success;
    }

    public SceneGetValueAsShort_result setSuccess(Bool_Int16 success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Int16)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsShort_result)
        return this.equals((SceneGetValueAsShort_result)that);
      return false;
    }

    public boolean equals(SceneGetValueAsShort_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsShort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsShort_result typedOther = (SceneGetValueAsShort_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsShort_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsShort_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsShort_resultStandardScheme getScheme() {
        return new SceneGetValueAsShort_resultStandardScheme();
      }
    }

    private static class SceneGetValueAsShort_resultStandardScheme extends StandardScheme<SceneGetValueAsShort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsShort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Int16();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsShort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsShort_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsShort_resultTupleScheme getScheme() {
        return new SceneGetValueAsShort_resultTupleScheme();
      }
    }

    private static class SceneGetValueAsShort_resultTupleScheme extends TupleScheme<SceneGetValueAsShort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsShort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsShort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Int16();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsString_args implements org.apache.thrift.TBase<SceneGetValueAsString_args, SceneGetValueAsString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsString_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsString_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsString_args.class, metaDataMap);
    }

    public SceneGetValueAsString_args() {
    }

    public SceneGetValueAsString_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsString_args(SceneGetValueAsString_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueAsString_args deepCopy() {
      return new SceneGetValueAsString_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueAsString_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueAsString_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsString_args)
        return this.equals((SceneGetValueAsString_args)that);
      return false;
    }

    public boolean equals(SceneGetValueAsString_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsString_args typedOther = (SceneGetValueAsString_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsString_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsString_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsString_argsStandardScheme getScheme() {
        return new SceneGetValueAsString_argsStandardScheme();
      }
    }

    private static class SceneGetValueAsString_argsStandardScheme extends StandardScheme<SceneGetValueAsString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsString_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsString_argsTupleScheme getScheme() {
        return new SceneGetValueAsString_argsTupleScheme();
      }
    }

    private static class SceneGetValueAsString_argsTupleScheme extends TupleScheme<SceneGetValueAsString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueAsString_result implements org.apache.thrift.TBase<SceneGetValueAsString_result, SceneGetValueAsString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueAsString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueAsString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueAsString_resultTupleSchemeFactory());
    }

    public Bool_String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_String.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueAsString_result.class, metaDataMap);
    }

    public SceneGetValueAsString_result() {
    }

    public SceneGetValueAsString_result(
      Bool_String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueAsString_result(SceneGetValueAsString_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_String(other.success);
      }
    }

    public SceneGetValueAsString_result deepCopy() {
      return new SceneGetValueAsString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_String getSuccess() {
      return this.success;
    }

    public SceneGetValueAsString_result setSuccess(Bool_String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueAsString_result)
        return this.equals((SceneGetValueAsString_result)that);
      return false;
    }

    public boolean equals(SceneGetValueAsString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueAsString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueAsString_result typedOther = (SceneGetValueAsString_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueAsString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueAsString_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueAsString_resultStandardScheme getScheme() {
        return new SceneGetValueAsString_resultStandardScheme();
      }
    }

    private static class SceneGetValueAsString_resultStandardScheme extends StandardScheme<SceneGetValueAsString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueAsString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_String();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueAsString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueAsString_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueAsString_resultTupleScheme getScheme() {
        return new SceneGetValueAsString_resultTupleScheme();
      }
    }

    private static class SceneGetValueAsString_resultTupleScheme extends TupleScheme<SceneGetValueAsString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueAsString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_String();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueListSelection_String_args implements org.apache.thrift.TBase<SceneGetValueListSelection_String_args, SceneGetValueListSelection_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueListSelection_String_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueListSelection_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueListSelection_String_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueListSelection_String_args.class, metaDataMap);
    }

    public SceneGetValueListSelection_String_args() {
    }

    public SceneGetValueListSelection_String_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueListSelection_String_args(SceneGetValueListSelection_String_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueListSelection_String_args deepCopy() {
      return new SceneGetValueListSelection_String_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueListSelection_String_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueListSelection_String_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueListSelection_String_args)
        return this.equals((SceneGetValueListSelection_String_args)that);
      return false;
    }

    public boolean equals(SceneGetValueListSelection_String_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueListSelection_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueListSelection_String_args typedOther = (SceneGetValueListSelection_String_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueListSelection_String_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueListSelection_String_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_String_argsStandardScheme getScheme() {
        return new SceneGetValueListSelection_String_argsStandardScheme();
      }
    }

    private static class SceneGetValueListSelection_String_argsStandardScheme extends StandardScheme<SceneGetValueListSelection_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueListSelection_String_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_String_argsTupleScheme getScheme() {
        return new SceneGetValueListSelection_String_argsTupleScheme();
      }
    }

    private static class SceneGetValueListSelection_String_argsTupleScheme extends TupleScheme<SceneGetValueListSelection_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueListSelection_String_result implements org.apache.thrift.TBase<SceneGetValueListSelection_String_result, SceneGetValueListSelection_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueListSelection_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueListSelection_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueListSelection_String_resultTupleSchemeFactory());
    }

    public Bool_String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_String.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueListSelection_String_result.class, metaDataMap);
    }

    public SceneGetValueListSelection_String_result() {
    }

    public SceneGetValueListSelection_String_result(
      Bool_String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueListSelection_String_result(SceneGetValueListSelection_String_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_String(other.success);
      }
    }

    public SceneGetValueListSelection_String_result deepCopy() {
      return new SceneGetValueListSelection_String_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_String getSuccess() {
      return this.success;
    }

    public SceneGetValueListSelection_String_result setSuccess(Bool_String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueListSelection_String_result)
        return this.equals((SceneGetValueListSelection_String_result)that);
      return false;
    }

    public boolean equals(SceneGetValueListSelection_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueListSelection_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueListSelection_String_result typedOther = (SceneGetValueListSelection_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueListSelection_String_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueListSelection_String_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_String_resultStandardScheme getScheme() {
        return new SceneGetValueListSelection_String_resultStandardScheme();
      }
    }

    private static class SceneGetValueListSelection_String_resultStandardScheme extends StandardScheme<SceneGetValueListSelection_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_String();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueListSelection_String_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_String_resultTupleScheme getScheme() {
        return new SceneGetValueListSelection_String_resultTupleScheme();
      }
    }

    private static class SceneGetValueListSelection_String_resultTupleScheme extends TupleScheme<SceneGetValueListSelection_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_String();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueListSelection_Int32_args implements org.apache.thrift.TBase<SceneGetValueListSelection_Int32_args, SceneGetValueListSelection_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueListSelection_Int32_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueListSelection_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueListSelection_Int32_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueListSelection_Int32_args.class, metaDataMap);
    }

    public SceneGetValueListSelection_Int32_args() {
    }

    public SceneGetValueListSelection_Int32_args(
      byte _sceneId,
      RemoteValueID _valueId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueListSelection_Int32_args(SceneGetValueListSelection_Int32_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
    }

    public SceneGetValueListSelection_Int32_args deepCopy() {
      return new SceneGetValueListSelection_Int32_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneGetValueListSelection_Int32_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SceneGetValueListSelection_Int32_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueListSelection_Int32_args)
        return this.equals((SceneGetValueListSelection_Int32_args)that);
      return false;
    }

    public boolean equals(SceneGetValueListSelection_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueListSelection_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueListSelection_Int32_args typedOther = (SceneGetValueListSelection_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueListSelection_Int32_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueListSelection_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_Int32_argsStandardScheme getScheme() {
        return new SceneGetValueListSelection_Int32_argsStandardScheme();
      }
    }

    private static class SceneGetValueListSelection_Int32_argsStandardScheme extends StandardScheme<SceneGetValueListSelection_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueListSelection_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_Int32_argsTupleScheme getScheme() {
        return new SceneGetValueListSelection_Int32_argsTupleScheme();
      }
    }

    private static class SceneGetValueListSelection_Int32_argsTupleScheme extends TupleScheme<SceneGetValueListSelection_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
      }
    }

  }

  public static class SceneGetValueListSelection_Int32_result implements org.apache.thrift.TBase<SceneGetValueListSelection_Int32_result, SceneGetValueListSelection_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneGetValueListSelection_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneGetValueListSelection_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneGetValueListSelection_Int32_resultTupleSchemeFactory());
    }

    public Bool_Int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bool_Int.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneGetValueListSelection_Int32_result.class, metaDataMap);
    }

    public SceneGetValueListSelection_Int32_result() {
    }

    public SceneGetValueListSelection_Int32_result(
      Bool_Int success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneGetValueListSelection_Int32_result(SceneGetValueListSelection_Int32_result other) {
      if (other.isSetSuccess()) {
        this.success = new Bool_Int(other.success);
      }
    }

    public SceneGetValueListSelection_Int32_result deepCopy() {
      return new SceneGetValueListSelection_Int32_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Bool_Int getSuccess() {
      return this.success;
    }

    public SceneGetValueListSelection_Int32_result setSuccess(Bool_Int success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Bool_Int)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneGetValueListSelection_Int32_result)
        return this.equals((SceneGetValueListSelection_Int32_result)that);
      return false;
    }

    public boolean equals(SceneGetValueListSelection_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneGetValueListSelection_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneGetValueListSelection_Int32_result typedOther = (SceneGetValueListSelection_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneGetValueListSelection_Int32_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneGetValueListSelection_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_Int32_resultStandardScheme getScheme() {
        return new SceneGetValueListSelection_Int32_resultStandardScheme();
      }
    }

    private static class SceneGetValueListSelection_Int32_resultStandardScheme extends StandardScheme<SceneGetValueListSelection_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneGetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Bool_Int();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneGetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneGetValueListSelection_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public SceneGetValueListSelection_Int32_resultTupleScheme getScheme() {
        return new SceneGetValueListSelection_Int32_resultTupleScheme();
      }
    }

    private static class SceneGetValueListSelection_Int32_resultTupleScheme extends TupleScheme<SceneGetValueListSelection_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneGetValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Bool_Int();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Bool_args implements org.apache.thrift.TBase<SetSceneValue_Bool_args, SetSceneValue_Bool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Bool_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Bool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Bool_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public boolean _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Bool_args.class, metaDataMap);
    }

    public SetSceneValue_Bool_args() {
    }

    public SetSceneValue_Bool_args(
      byte _sceneId,
      RemoteValueID _valueId,
      boolean _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Bool_args(SetSceneValue_Bool_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public SetSceneValue_Bool_args deepCopy() {
      return new SetSceneValue_Bool_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = false;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValue_Bool_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValue_Bool_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public boolean is_value() {
      return this._value;
    }

    public SetSceneValue_Bool_args set_value(boolean _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Boolean.valueOf(is_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Bool_args)
        return this.equals((SetSceneValue_Bool_args)that);
      return false;
    }

    public boolean equals(SetSceneValue_Bool_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Bool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Bool_args typedOther = (SetSceneValue_Bool_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Bool_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Bool_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Bool_argsStandardScheme getScheme() {
        return new SetSceneValue_Bool_argsStandardScheme();
      }
    }

    private static class SetSceneValue_Bool_argsStandardScheme extends StandardScheme<SetSceneValue_Bool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._value = iprot.readBool();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeBool(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Bool_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Bool_argsTupleScheme getScheme() {
        return new SetSceneValue_Bool_argsTupleScheme();
      }
    }

    private static class SetSceneValue_Bool_argsTupleScheme extends TupleScheme<SetSceneValue_Bool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeBool(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Bool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readBool();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Bool_result implements org.apache.thrift.TBase<SetSceneValue_Bool_result, SetSceneValue_Bool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Bool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Bool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Bool_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Bool_result.class, metaDataMap);
    }

    public SetSceneValue_Bool_result() {
    }

    public SetSceneValue_Bool_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Bool_result(SetSceneValue_Bool_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValue_Bool_result deepCopy() {
      return new SetSceneValue_Bool_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValue_Bool_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Bool_result)
        return this.equals((SetSceneValue_Bool_result)that);
      return false;
    }

    public boolean equals(SetSceneValue_Bool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Bool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Bool_result typedOther = (SetSceneValue_Bool_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Bool_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Bool_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Bool_resultStandardScheme getScheme() {
        return new SetSceneValue_Bool_resultStandardScheme();
      }
    }

    private static class SetSceneValue_Bool_resultStandardScheme extends StandardScheme<SetSceneValue_Bool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Bool_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Bool_resultTupleScheme getScheme() {
        return new SetSceneValue_Bool_resultTupleScheme();
      }
    }

    private static class SetSceneValue_Bool_resultTupleScheme extends TupleScheme<SetSceneValue_Bool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Bool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Uint8_args implements org.apache.thrift.TBase<SetSceneValue_Uint8_args, SetSceneValue_Uint8_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Uint8_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.BYTE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Uint8_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Uint8_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public byte _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Uint8_args.class, metaDataMap);
    }

    public SetSceneValue_Uint8_args() {
    }

    public SetSceneValue_Uint8_args(
      byte _sceneId,
      RemoteValueID _valueId,
      byte _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Uint8_args(SetSceneValue_Uint8_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public SetSceneValue_Uint8_args deepCopy() {
      return new SetSceneValue_Uint8_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValue_Uint8_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValue_Uint8_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public byte get_value() {
      return this._value;
    }

    public SetSceneValue_Uint8_args set_value(byte _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Byte.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Uint8_args)
        return this.equals((SetSceneValue_Uint8_args)that);
      return false;
    }

    public boolean equals(SetSceneValue_Uint8_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Uint8_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Uint8_args typedOther = (SetSceneValue_Uint8_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Uint8_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Uint8_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Uint8_argsStandardScheme getScheme() {
        return new SetSceneValue_Uint8_argsStandardScheme();
      }
    }

    private static class SetSceneValue_Uint8_argsStandardScheme extends StandardScheme<SetSceneValue_Uint8_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._value = iprot.readByte();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeByte(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Uint8_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Uint8_argsTupleScheme getScheme() {
        return new SetSceneValue_Uint8_argsTupleScheme();
      }
    }

    private static class SetSceneValue_Uint8_argsTupleScheme extends TupleScheme<SetSceneValue_Uint8_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeByte(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Uint8_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readByte();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Uint8_result implements org.apache.thrift.TBase<SetSceneValue_Uint8_result, SetSceneValue_Uint8_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Uint8_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Uint8_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Uint8_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Uint8_result.class, metaDataMap);
    }

    public SetSceneValue_Uint8_result() {
    }

    public SetSceneValue_Uint8_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Uint8_result(SetSceneValue_Uint8_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValue_Uint8_result deepCopy() {
      return new SetSceneValue_Uint8_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValue_Uint8_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Uint8_result)
        return this.equals((SetSceneValue_Uint8_result)that);
      return false;
    }

    public boolean equals(SetSceneValue_Uint8_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Uint8_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Uint8_result typedOther = (SetSceneValue_Uint8_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Uint8_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Uint8_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Uint8_resultStandardScheme getScheme() {
        return new SetSceneValue_Uint8_resultStandardScheme();
      }
    }

    private static class SetSceneValue_Uint8_resultStandardScheme extends StandardScheme<SetSceneValue_Uint8_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Uint8_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Uint8_resultTupleScheme getScheme() {
        return new SetSceneValue_Uint8_resultTupleScheme();
      }
    }

    private static class SetSceneValue_Uint8_resultTupleScheme extends TupleScheme<SetSceneValue_Uint8_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Uint8_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Float_args implements org.apache.thrift.TBase<SetSceneValue_Float_args, SetSceneValue_Float_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Float_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Float_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Float_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public double _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Float_args.class, metaDataMap);
    }

    public SetSceneValue_Float_args() {
    }

    public SetSceneValue_Float_args(
      byte _sceneId,
      RemoteValueID _valueId,
      double _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Float_args(SetSceneValue_Float_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public SetSceneValue_Float_args deepCopy() {
      return new SetSceneValue_Float_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0.0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValue_Float_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValue_Float_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public double get_value() {
      return this._value;
    }

    public SetSceneValue_Float_args set_value(double _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Double.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Float_args)
        return this.equals((SetSceneValue_Float_args)that);
      return false;
    }

    public boolean equals(SetSceneValue_Float_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Float_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Float_args typedOther = (SetSceneValue_Float_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Float_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Float_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Float_argsStandardScheme getScheme() {
        return new SetSceneValue_Float_argsStandardScheme();
      }
    }

    private static class SetSceneValue_Float_argsStandardScheme extends StandardScheme<SetSceneValue_Float_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Float_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct._value = iprot.readDouble();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Float_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeDouble(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Float_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Float_argsTupleScheme getScheme() {
        return new SetSceneValue_Float_argsTupleScheme();
      }
    }

    private static class SetSceneValue_Float_argsTupleScheme extends TupleScheme<SetSceneValue_Float_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Float_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeDouble(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Float_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readDouble();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Float_result implements org.apache.thrift.TBase<SetSceneValue_Float_result, SetSceneValue_Float_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Float_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Float_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Float_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Float_result.class, metaDataMap);
    }

    public SetSceneValue_Float_result() {
    }

    public SetSceneValue_Float_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Float_result(SetSceneValue_Float_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValue_Float_result deepCopy() {
      return new SetSceneValue_Float_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValue_Float_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Float_result)
        return this.equals((SetSceneValue_Float_result)that);
      return false;
    }

    public boolean equals(SetSceneValue_Float_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Float_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Float_result typedOther = (SetSceneValue_Float_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Float_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Float_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Float_resultStandardScheme getScheme() {
        return new SetSceneValue_Float_resultStandardScheme();
      }
    }

    private static class SetSceneValue_Float_resultStandardScheme extends StandardScheme<SetSceneValue_Float_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Float_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Float_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Float_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Float_resultTupleScheme getScheme() {
        return new SetSceneValue_Float_resultTupleScheme();
      }
    }

    private static class SetSceneValue_Float_resultTupleScheme extends TupleScheme<SetSceneValue_Float_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Float_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Float_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Int32_args implements org.apache.thrift.TBase<SetSceneValue_Int32_args, SetSceneValue_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Int32_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Int32_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public int _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Int32_args.class, metaDataMap);
    }

    public SetSceneValue_Int32_args() {
    }

    public SetSceneValue_Int32_args(
      byte _sceneId,
      RemoteValueID _valueId,
      int _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Int32_args(SetSceneValue_Int32_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public SetSceneValue_Int32_args deepCopy() {
      return new SetSceneValue_Int32_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValue_Int32_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValue_Int32_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public int get_value() {
      return this._value;
    }

    public SetSceneValue_Int32_args set_value(int _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Integer.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Int32_args)
        return this.equals((SetSceneValue_Int32_args)that);
      return false;
    }

    public boolean equals(SetSceneValue_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Int32_args typedOther = (SetSceneValue_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Int32_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int32_argsStandardScheme getScheme() {
        return new SetSceneValue_Int32_argsStandardScheme();
      }
    }

    private static class SetSceneValue_Int32_argsStandardScheme extends StandardScheme<SetSceneValue_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._value = iprot.readI32();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI32(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int32_argsTupleScheme getScheme() {
        return new SetSceneValue_Int32_argsTupleScheme();
      }
    }

    private static class SetSceneValue_Int32_argsTupleScheme extends TupleScheme<SetSceneValue_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI32(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readI32();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Int32_result implements org.apache.thrift.TBase<SetSceneValue_Int32_result, SetSceneValue_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Int32_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Int32_result.class, metaDataMap);
    }

    public SetSceneValue_Int32_result() {
    }

    public SetSceneValue_Int32_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Int32_result(SetSceneValue_Int32_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValue_Int32_result deepCopy() {
      return new SetSceneValue_Int32_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValue_Int32_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Int32_result)
        return this.equals((SetSceneValue_Int32_result)that);
      return false;
    }

    public boolean equals(SetSceneValue_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Int32_result typedOther = (SetSceneValue_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Int32_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int32_resultStandardScheme getScheme() {
        return new SetSceneValue_Int32_resultStandardScheme();
      }
    }

    private static class SetSceneValue_Int32_resultStandardScheme extends StandardScheme<SetSceneValue_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int32_resultTupleScheme getScheme() {
        return new SetSceneValue_Int32_resultTupleScheme();
      }
    }

    private static class SetSceneValue_Int32_resultTupleScheme extends TupleScheme<SetSceneValue_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Int16_args implements org.apache.thrift.TBase<SetSceneValue_Int16_args, SetSceneValue_Int16_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Int16_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I16, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Int16_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Int16_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public short _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Int16_args.class, metaDataMap);
    }

    public SetSceneValue_Int16_args() {
    }

    public SetSceneValue_Int16_args(
      byte _sceneId,
      RemoteValueID _valueId,
      short _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Int16_args(SetSceneValue_Int16_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public SetSceneValue_Int16_args deepCopy() {
      return new SetSceneValue_Int16_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValue_Int16_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValue_Int16_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public short get_value() {
      return this._value;
    }

    public SetSceneValue_Int16_args set_value(short _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Short.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Int16_args)
        return this.equals((SetSceneValue_Int16_args)that);
      return false;
    }

    public boolean equals(SetSceneValue_Int16_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Int16_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Int16_args typedOther = (SetSceneValue_Int16_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Int16_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Int16_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int16_argsStandardScheme getScheme() {
        return new SetSceneValue_Int16_argsStandardScheme();
      }
    }

    private static class SetSceneValue_Int16_argsStandardScheme extends StandardScheme<SetSceneValue_Int16_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct._value = iprot.readI16();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI16(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Int16_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int16_argsTupleScheme getScheme() {
        return new SetSceneValue_Int16_argsTupleScheme();
      }
    }

    private static class SetSceneValue_Int16_argsTupleScheme extends TupleScheme<SetSceneValue_Int16_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI16(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int16_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readI16();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_Int16_result implements org.apache.thrift.TBase<SetSceneValue_Int16_result, SetSceneValue_Int16_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_Int16_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_Int16_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_Int16_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_Int16_result.class, metaDataMap);
    }

    public SetSceneValue_Int16_result() {
    }

    public SetSceneValue_Int16_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_Int16_result(SetSceneValue_Int16_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValue_Int16_result deepCopy() {
      return new SetSceneValue_Int16_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValue_Int16_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_Int16_result)
        return this.equals((SetSceneValue_Int16_result)that);
      return false;
    }

    public boolean equals(SetSceneValue_Int16_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_Int16_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_Int16_result typedOther = (SetSceneValue_Int16_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_Int16_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_Int16_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int16_resultStandardScheme getScheme() {
        return new SetSceneValue_Int16_resultStandardScheme();
      }
    }

    private static class SetSceneValue_Int16_resultStandardScheme extends StandardScheme<SetSceneValue_Int16_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_Int16_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_Int16_resultTupleScheme getScheme() {
        return new SetSceneValue_Int16_resultTupleScheme();
      }
    }

    private static class SetSceneValue_Int16_resultTupleScheme extends TupleScheme<SetSceneValue_Int16_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_Int16_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_String_args implements org.apache.thrift.TBase<SetSceneValue_String_args, SetSceneValue_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_String_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_String_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_String_args.class, metaDataMap);
    }

    public SetSceneValue_String_args() {
    }

    public SetSceneValue_String_args(
      byte _sceneId,
      RemoteValueID _valueId,
      String _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_String_args(SetSceneValue_String_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetSceneValue_String_args deepCopy() {
      return new SetSceneValue_String_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      this._value = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValue_String_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValue_String_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public SetSceneValue_String_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_String_args)
        return this.equals((SetSceneValue_String_args)that);
      return false;
    }

    public boolean equals(SetSceneValue_String_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_String_args typedOther = (SetSceneValue_String_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_String_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_String_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_String_argsStandardScheme getScheme() {
        return new SetSceneValue_String_argsStandardScheme();
      }
    }

    private static class SetSceneValue_String_argsStandardScheme extends StandardScheme<SetSceneValue_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_String_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_String_argsTupleScheme getScheme() {
        return new SetSceneValue_String_argsTupleScheme();
      }
    }

    private static class SetSceneValue_String_argsTupleScheme extends TupleScheme<SetSceneValue_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValue_String_result implements org.apache.thrift.TBase<SetSceneValue_String_result, SetSceneValue_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValue_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValue_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValue_String_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValue_String_result.class, metaDataMap);
    }

    public SetSceneValue_String_result() {
    }

    public SetSceneValue_String_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValue_String_result(SetSceneValue_String_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValue_String_result deepCopy() {
      return new SetSceneValue_String_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValue_String_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValue_String_result)
        return this.equals((SetSceneValue_String_result)that);
      return false;
    }

    public boolean equals(SetSceneValue_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValue_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValue_String_result typedOther = (SetSceneValue_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValue_String_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValue_String_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValue_String_resultStandardScheme getScheme() {
        return new SetSceneValue_String_resultStandardScheme();
      }
    }

    private static class SetSceneValue_String_resultStandardScheme extends StandardScheme<SetSceneValue_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValue_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValue_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValue_String_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValue_String_resultTupleScheme getScheme() {
        return new SetSceneValue_String_resultTupleScheme();
      }
    }

    private static class SetSceneValue_String_resultTupleScheme extends TupleScheme<SetSceneValue_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValue_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValueListSelection_String_args implements org.apache.thrift.TBase<SetSceneValueListSelection_String_args, SetSceneValueListSelection_String_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValueListSelection_String_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValueListSelection_String_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValueListSelection_String_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValueListSelection_String_args.class, metaDataMap);
    }

    public SetSceneValueListSelection_String_args() {
    }

    public SetSceneValueListSelection_String_args(
      byte _sceneId,
      RemoteValueID _valueId,
      String _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValueListSelection_String_args(SetSceneValueListSelection_String_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetSceneValueListSelection_String_args deepCopy() {
      return new SetSceneValueListSelection_String_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      this._value = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValueListSelection_String_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValueListSelection_String_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public String get_value() {
      return this._value;
    }

    public SetSceneValueListSelection_String_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValueListSelection_String_args)
        return this.equals((SetSceneValueListSelection_String_args)that);
      return false;
    }

    public boolean equals(SetSceneValueListSelection_String_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValueListSelection_String_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValueListSelection_String_args typedOther = (SetSceneValueListSelection_String_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValueListSelection_String_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValueListSelection_String_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_String_argsStandardScheme getScheme() {
        return new SetSceneValueListSelection_String_argsStandardScheme();
      }
    }

    private static class SetSceneValueListSelection_String_argsStandardScheme extends StandardScheme<SetSceneValueListSelection_String_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValueListSelection_String_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_String_argsTupleScheme getScheme() {
        return new SetSceneValueListSelection_String_argsTupleScheme();
      }
    }

    private static class SetSceneValueListSelection_String_argsTupleScheme extends TupleScheme<SetSceneValueListSelection_String_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_String_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValueListSelection_String_result implements org.apache.thrift.TBase<SetSceneValueListSelection_String_result, SetSceneValueListSelection_String_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValueListSelection_String_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValueListSelection_String_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValueListSelection_String_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValueListSelection_String_result.class, metaDataMap);
    }

    public SetSceneValueListSelection_String_result() {
    }

    public SetSceneValueListSelection_String_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValueListSelection_String_result(SetSceneValueListSelection_String_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValueListSelection_String_result deepCopy() {
      return new SetSceneValueListSelection_String_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValueListSelection_String_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValueListSelection_String_result)
        return this.equals((SetSceneValueListSelection_String_result)that);
      return false;
    }

    public boolean equals(SetSceneValueListSelection_String_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValueListSelection_String_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValueListSelection_String_result typedOther = (SetSceneValueListSelection_String_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValueListSelection_String_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValueListSelection_String_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_String_resultStandardScheme getScheme() {
        return new SetSceneValueListSelection_String_resultStandardScheme();
      }
    }

    private static class SetSceneValueListSelection_String_resultStandardScheme extends StandardScheme<SetSceneValueListSelection_String_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValueListSelection_String_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_String_resultTupleScheme getScheme() {
        return new SetSceneValueListSelection_String_resultTupleScheme();
      }
    }

    private static class SetSceneValueListSelection_String_resultTupleScheme extends TupleScheme<SetSceneValueListSelection_String_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_String_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValueListSelection_Int32_args implements org.apache.thrift.TBase<SetSceneValueListSelection_Int32_args, SetSceneValueListSelection_Int32_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValueListSelection_Int32_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_valueId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValueListSelection_Int32_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValueListSelection_Int32_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public RemoteValueID _valueId; // required
    public int _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE_ID((short)2, "_valueId"),
      _VALUE((short)3, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE_ID
            return _VALUE_ID;
          case 3: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private static final int ___VALUE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE_ID, new org.apache.thrift.meta_data.FieldMetaData("_valueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteValueID.class)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValueListSelection_Int32_args.class, metaDataMap);
    }

    public SetSceneValueListSelection_Int32_args() {
    }

    public SetSceneValueListSelection_Int32_args(
      byte _sceneId,
      RemoteValueID _valueId,
      int _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._valueId = _valueId;
      this._value = _value;
      set_valueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValueListSelection_Int32_args(SetSceneValueListSelection_Int32_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_valueId()) {
        this._valueId = new RemoteValueID(other._valueId);
      }
      this._value = other._value;
    }

    public SetSceneValueListSelection_Int32_args deepCopy() {
      return new SetSceneValueListSelection_Int32_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._valueId = null;
      set_valueIsSet(false);
      this._value = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneValueListSelection_Int32_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public RemoteValueID get_valueId() {
      return this._valueId;
    }

    public SetSceneValueListSelection_Int32_args set_valueId(RemoteValueID _valueId) {
      this._valueId = _valueId;
      return this;
    }

    public void unset_valueId() {
      this._valueId = null;
    }

    /** Returns true if field _valueId is set (has been assigned a value) and false otherwise */
    public boolean isSet_valueId() {
      return this._valueId != null;
    }

    public void set_valueIdIsSet(boolean value) {
      if (!value) {
        this._valueId = null;
      }
    }

    public int get_value() {
      return this._value;
    }

    public SetSceneValueListSelection_Int32_args set_value(int _value) {
      this._value = _value;
      set_valueIsSet(true);
      return this;
    }

    public void unset_value() {
      __isset_bit_vector.clear(___VALUE_ISSET_ID);
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return __isset_bit_vector.get(___VALUE_ISSET_ID);
    }

    public void set_valueIsSet(boolean value) {
      __isset_bit_vector.set(___VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE_ID:
        if (value == null) {
          unset_valueId();
        } else {
          set_valueId((RemoteValueID)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE_ID:
        return get_valueId();

      case _VALUE:
        return Integer.valueOf(get_value());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE_ID:
        return isSet_valueId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValueListSelection_Int32_args)
        return this.equals((SetSceneValueListSelection_Int32_args)that);
      return false;
    }

    public boolean equals(SetSceneValueListSelection_Int32_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__valueId = true && this.isSet_valueId();
      boolean that_present__valueId = true && that.isSet_valueId();
      if (this_present__valueId || that_present__valueId) {
        if (!(this_present__valueId && that_present__valueId))
          return false;
        if (!this._valueId.equals(that._valueId))
          return false;
      }

      boolean this_present__value = true;
      boolean that_present__value = true;
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (this._value != that._value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValueListSelection_Int32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValueListSelection_Int32_args typedOther = (SetSceneValueListSelection_Int32_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_valueId()).compareTo(typedOther.isSet_valueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_valueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._valueId, typedOther._valueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValueListSelection_Int32_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_valueId:");
      if (this._valueId == null) {
        sb.append("null");
      } else {
        sb.append(this._valueId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      sb.append(this._value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValueListSelection_Int32_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_Int32_argsStandardScheme getScheme() {
        return new SetSceneValueListSelection_Int32_argsStandardScheme();
      }
    }

    private static class SetSceneValueListSelection_Int32_argsStandardScheme extends StandardScheme<SetSceneValueListSelection_Int32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct._valueId = new RemoteValueID();
                struct._valueId.read(iprot);
                struct.set_valueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._value = iprot.readI32();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._valueId != null) {
          oprot.writeFieldBegin(_VALUE_ID_FIELD_DESC);
          struct._valueId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_VALUE_FIELD_DESC);
        oprot.writeI32(struct._value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValueListSelection_Int32_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_Int32_argsTupleScheme getScheme() {
        return new SetSceneValueListSelection_Int32_argsTupleScheme();
      }
    }

    private static class SetSceneValueListSelection_Int32_argsTupleScheme extends TupleScheme<SetSceneValueListSelection_Int32_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_valueId()) {
          optionals.set(1);
        }
        if (struct.isSet_value()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_valueId()) {
          struct._valueId.write(oprot);
        }
        if (struct.isSet_value()) {
          oprot.writeI32(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_Int32_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._valueId = new RemoteValueID();
          struct._valueId.read(iprot);
          struct.set_valueIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct._value = iprot.readI32();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneValueListSelection_Int32_result implements org.apache.thrift.TBase<SetSceneValueListSelection_Int32_result, SetSceneValueListSelection_Int32_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneValueListSelection_Int32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneValueListSelection_Int32_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneValueListSelection_Int32_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneValueListSelection_Int32_result.class, metaDataMap);
    }

    public SetSceneValueListSelection_Int32_result() {
    }

    public SetSceneValueListSelection_Int32_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneValueListSelection_Int32_result(SetSceneValueListSelection_Int32_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SetSceneValueListSelection_Int32_result deepCopy() {
      return new SetSceneValueListSelection_Int32_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SetSceneValueListSelection_Int32_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneValueListSelection_Int32_result)
        return this.equals((SetSceneValueListSelection_Int32_result)that);
      return false;
    }

    public boolean equals(SetSceneValueListSelection_Int32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneValueListSelection_Int32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneValueListSelection_Int32_result typedOther = (SetSceneValueListSelection_Int32_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneValueListSelection_Int32_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneValueListSelection_Int32_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_Int32_resultStandardScheme getScheme() {
        return new SetSceneValueListSelection_Int32_resultStandardScheme();
      }
    }

    private static class SetSceneValueListSelection_Int32_resultStandardScheme extends StandardScheme<SetSceneValueListSelection_Int32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneValueListSelection_Int32_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneValueListSelection_Int32_resultTupleScheme getScheme() {
        return new SetSceneValueListSelection_Int32_resultTupleScheme();
      }
    }

    private static class SetSceneValueListSelection_Int32_resultTupleScheme extends TupleScheme<SetSceneValueListSelection_Int32_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneValueListSelection_Int32_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetSceneLabel_args implements org.apache.thrift.TBase<GetSceneLabel_args, GetSceneLabel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneLabel_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSceneLabel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSceneLabel_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneLabel_args.class, metaDataMap);
    }

    public GetSceneLabel_args() {
    }

    public GetSceneLabel_args(
      byte _sceneId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneLabel_args(GetSceneLabel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
    }

    public GetSceneLabel_args deepCopy() {
      return new GetSceneLabel_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public GetSceneLabel_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneLabel_args)
        return this.equals((GetSceneLabel_args)that);
      return false;
    }

    public boolean equals(GetSceneLabel_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetSceneLabel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetSceneLabel_args typedOther = (GetSceneLabel_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSceneLabel_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneLabel_argsStandardSchemeFactory implements SchemeFactory {
      public GetSceneLabel_argsStandardScheme getScheme() {
        return new GetSceneLabel_argsStandardScheme();
      }
    }

    private static class GetSceneLabel_argsStandardScheme extends StandardScheme<GetSceneLabel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneLabel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneLabel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneLabel_argsTupleSchemeFactory implements SchemeFactory {
      public GetSceneLabel_argsTupleScheme getScheme() {
        return new GetSceneLabel_argsTupleScheme();
      }
    }

    private static class GetSceneLabel_argsTupleScheme extends TupleScheme<GetSceneLabel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
      }
    }

  }

  public static class GetSceneLabel_result implements org.apache.thrift.TBase<GetSceneLabel_result, GetSceneLabel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneLabel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSceneLabel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSceneLabel_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneLabel_result.class, metaDataMap);
    }

    public GetSceneLabel_result() {
    }

    public GetSceneLabel_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneLabel_result(GetSceneLabel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetSceneLabel_result deepCopy() {
      return new GetSceneLabel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetSceneLabel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneLabel_result)
        return this.equals((GetSceneLabel_result)that);
      return false;
    }

    public boolean equals(GetSceneLabel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetSceneLabel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetSceneLabel_result typedOther = (GetSceneLabel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSceneLabel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneLabel_resultStandardSchemeFactory implements SchemeFactory {
      public GetSceneLabel_resultStandardScheme getScheme() {
        return new GetSceneLabel_resultStandardScheme();
      }
    }

    private static class GetSceneLabel_resultStandardScheme extends StandardScheme<GetSceneLabel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneLabel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneLabel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneLabel_resultTupleSchemeFactory implements SchemeFactory {
      public GetSceneLabel_resultTupleScheme getScheme() {
        return new GetSceneLabel_resultTupleScheme();
      }
    }

    private static class GetSceneLabel_resultTupleScheme extends TupleScheme<GetSceneLabel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetSceneLabel_args implements org.apache.thrift.TBase<SetSceneLabel_args, SetSceneLabel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneLabel_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);
    private static final org.apache.thrift.protocol.TField _VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("_value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneLabel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneLabel_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required
    public String _value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId"),
      _VALUE((short)2, "_value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          case 2: // _VALUE
            return _VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields._VALUE, new org.apache.thrift.meta_data.FieldMetaData("_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneLabel_args.class, metaDataMap);
    }

    public SetSceneLabel_args() {
    }

    public SetSceneLabel_args(
      byte _sceneId,
      String _value)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      this._value = _value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneLabel_args(SetSceneLabel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
      if (other.isSet_value()) {
        this._value = other._value;
      }
    }

    public SetSceneLabel_args deepCopy() {
      return new SetSceneLabel_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
      this._value = null;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SetSceneLabel_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public String get_value() {
      return this._value;
    }

    public SetSceneLabel_args set_value(String _value) {
      this._value = _value;
      return this;
    }

    public void unset_value() {
      this._value = null;
    }

    /** Returns true if field _value is set (has been assigned a value) and false otherwise */
    public boolean isSet_value() {
      return this._value != null;
    }

    public void set_valueIsSet(boolean value) {
      if (!value) {
        this._value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      case _VALUE:
        if (value == null) {
          unset_value();
        } else {
          set_value((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      case _VALUE:
        return get_value();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      case _VALUE:
        return isSet_value();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneLabel_args)
        return this.equals((SetSceneLabel_args)that);
      return false;
    }

    public boolean equals(SetSceneLabel_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      boolean this_present__value = true && this.isSet_value();
      boolean that_present__value = true && that.isSet_value();
      if (this_present__value || that_present__value) {
        if (!(this_present__value && that_present__value))
          return false;
        if (!this._value.equals(that._value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneLabel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneLabel_args typedOther = (SetSceneLabel_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_value()).compareTo(typedOther.isSet_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._value, typedOther._value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneLabel_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_value:");
      if (this._value == null) {
        sb.append("null");
      } else {
        sb.append(this._value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneLabel_argsStandardSchemeFactory implements SchemeFactory {
      public SetSceneLabel_argsStandardScheme getScheme() {
        return new SetSceneLabel_argsStandardScheme();
      }
    }

    private static class SetSceneLabel_argsStandardScheme extends StandardScheme<SetSceneLabel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneLabel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._value = iprot.readString();
                struct.set_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneLabel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        if (struct._value != null) {
          oprot.writeFieldBegin(_VALUE_FIELD_DESC);
          oprot.writeString(struct._value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneLabel_argsTupleSchemeFactory implements SchemeFactory {
      public SetSceneLabel_argsTupleScheme getScheme() {
        return new SetSceneLabel_argsTupleScheme();
      }
    }

    private static class SetSceneLabel_argsTupleScheme extends TupleScheme<SetSceneLabel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        if (struct.isSet_value()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
        if (struct.isSet_value()) {
          oprot.writeString(struct._value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct._value = iprot.readString();
          struct.set_valueIsSet(true);
        }
      }
    }

  }

  public static class SetSceneLabel_result implements org.apache.thrift.TBase<SetSceneLabel_result, SetSceneLabel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetSceneLabel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetSceneLabel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetSceneLabel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetSceneLabel_result.class, metaDataMap);
    }

    public SetSceneLabel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetSceneLabel_result(SetSceneLabel_result other) {
    }

    public SetSceneLabel_result deepCopy() {
      return new SetSceneLabel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetSceneLabel_result)
        return this.equals((SetSceneLabel_result)that);
      return false;
    }

    public boolean equals(SetSceneLabel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SetSceneLabel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SetSceneLabel_result typedOther = (SetSceneLabel_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetSceneLabel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetSceneLabel_resultStandardSchemeFactory implements SchemeFactory {
      public SetSceneLabel_resultStandardScheme getScheme() {
        return new SetSceneLabel_resultStandardScheme();
      }
    }

    private static class SetSceneLabel_resultStandardScheme extends StandardScheme<SetSceneLabel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetSceneLabel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetSceneLabel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetSceneLabel_resultTupleSchemeFactory implements SchemeFactory {
      public SetSceneLabel_resultTupleScheme getScheme() {
        return new SetSceneLabel_resultTupleScheme();
      }
    }

    private static class SetSceneLabel_resultTupleScheme extends TupleScheme<SetSceneLabel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetSceneLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetSceneLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SceneExists_args implements org.apache.thrift.TBase<SceneExists_args, SceneExists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneExists_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneExists_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneExists_args.class, metaDataMap);
    }

    public SceneExists_args() {
    }

    public SceneExists_args(
      byte _sceneId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneExists_args(SceneExists_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
    }

    public SceneExists_args deepCopy() {
      return new SceneExists_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public SceneExists_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneExists_args)
        return this.equals((SceneExists_args)that);
      return false;
    }

    public boolean equals(SceneExists_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneExists_args typedOther = (SceneExists_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneExists_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneExists_argsStandardSchemeFactory implements SchemeFactory {
      public SceneExists_argsStandardScheme getScheme() {
        return new SceneExists_argsStandardScheme();
      }
    }

    private static class SceneExists_argsStandardScheme extends StandardScheme<SceneExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneExists_argsTupleSchemeFactory implements SchemeFactory {
      public SceneExists_argsTupleScheme getScheme() {
        return new SceneExists_argsTupleScheme();
      }
    }

    private static class SceneExists_argsTupleScheme extends TupleScheme<SceneExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
      }
    }

  }

  public static class SceneExists_result implements org.apache.thrift.TBase<SceneExists_result, SceneExists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SceneExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SceneExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SceneExists_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SceneExists_result.class, metaDataMap);
    }

    public SceneExists_result() {
    }

    public SceneExists_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SceneExists_result(SceneExists_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public SceneExists_result deepCopy() {
      return new SceneExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public SceneExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SceneExists_result)
        return this.equals((SceneExists_result)that);
      return false;
    }

    public boolean equals(SceneExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SceneExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SceneExists_result typedOther = (SceneExists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SceneExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SceneExists_resultStandardSchemeFactory implements SchemeFactory {
      public SceneExists_resultStandardScheme getScheme() {
        return new SceneExists_resultStandardScheme();
      }
    }

    private static class SceneExists_resultStandardScheme extends StandardScheme<SceneExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SceneExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SceneExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SceneExists_resultTupleSchemeFactory implements SchemeFactory {
      public SceneExists_resultTupleScheme getScheme() {
        return new SceneExists_resultTupleScheme();
      }
    }

    private static class SceneExists_resultTupleScheme extends TupleScheme<SceneExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SceneExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SceneExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ActivateScene_args implements org.apache.thrift.TBase<ActivateScene_args, ActivateScene_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivateScene_args");

    private static final org.apache.thrift.protocol.TField _SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sceneId", org.apache.thrift.protocol.TType.BYTE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ActivateScene_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ActivateScene_argsTupleSchemeFactory());
    }

    public byte _sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SCENE_ID((short)1, "_sceneId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SCENE_ID
            return _SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___SCENEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("_sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivateScene_args.class, metaDataMap);
    }

    public ActivateScene_args() {
    }

    public ActivateScene_args(
      byte _sceneId)
    {
      this();
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ActivateScene_args(ActivateScene_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._sceneId = other._sceneId;
    }

    public ActivateScene_args deepCopy() {
      return new ActivateScene_args(this);
    }

    @Override
    public void clear() {
      set_sceneIdIsSet(false);
      this._sceneId = 0;
    }

    public byte get_sceneId() {
      return this._sceneId;
    }

    public ActivateScene_args set_sceneId(byte _sceneId) {
      this._sceneId = _sceneId;
      set_sceneIdIsSet(true);
      return this;
    }

    public void unset_sceneId() {
      __isset_bit_vector.clear(___SCENEID_ISSET_ID);
    }

    /** Returns true if field _sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSet_sceneId() {
      return __isset_bit_vector.get(___SCENEID_ISSET_ID);
    }

    public void set_sceneIdIsSet(boolean value) {
      __isset_bit_vector.set(___SCENEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SCENE_ID:
        if (value == null) {
          unset_sceneId();
        } else {
          set_sceneId((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SCENE_ID:
        return Byte.valueOf(get_sceneId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SCENE_ID:
        return isSet_sceneId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ActivateScene_args)
        return this.equals((ActivateScene_args)that);
      return false;
    }

    public boolean equals(ActivateScene_args that) {
      if (that == null)
        return false;

      boolean this_present__sceneId = true;
      boolean that_present__sceneId = true;
      if (this_present__sceneId || that_present__sceneId) {
        if (!(this_present__sceneId && that_present__sceneId))
          return false;
        if (this._sceneId != that._sceneId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ActivateScene_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ActivateScene_args typedOther = (ActivateScene_args)other;

      lastComparison = Boolean.valueOf(isSet_sceneId()).compareTo(typedOther.isSet_sceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_sceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sceneId, typedOther._sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ActivateScene_args(");
      boolean first = true;

      sb.append("_sceneId:");
      sb.append(this._sceneId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ActivateScene_argsStandardSchemeFactory implements SchemeFactory {
      public ActivateScene_argsStandardScheme getScheme() {
        return new ActivateScene_argsStandardScheme();
      }
    }

    private static class ActivateScene_argsStandardScheme extends StandardScheme<ActivateScene_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ActivateScene_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct._sceneId = iprot.readByte();
                struct.set_sceneIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ActivateScene_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_SCENE_ID_FIELD_DESC);
        oprot.writeByte(struct._sceneId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ActivateScene_argsTupleSchemeFactory implements SchemeFactory {
      public ActivateScene_argsTupleScheme getScheme() {
        return new ActivateScene_argsTupleScheme();
      }
    }

    private static class ActivateScene_argsTupleScheme extends TupleScheme<ActivateScene_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ActivateScene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_sceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_sceneId()) {
          oprot.writeByte(struct._sceneId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ActivateScene_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._sceneId = iprot.readByte();
          struct.set_sceneIdIsSet(true);
        }
      }
    }

  }

  public static class ActivateScene_result implements org.apache.thrift.TBase<ActivateScene_result, ActivateScene_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivateScene_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ActivateScene_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ActivateScene_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivateScene_result.class, metaDataMap);
    }

    public ActivateScene_result() {
    }

    public ActivateScene_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ActivateScene_result(ActivateScene_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public ActivateScene_result deepCopy() {
      return new ActivateScene_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ActivateScene_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ActivateScene_result)
        return this.equals((ActivateScene_result)that);
      return false;
    }

    public boolean equals(ActivateScene_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ActivateScene_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ActivateScene_result typedOther = (ActivateScene_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ActivateScene_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ActivateScene_resultStandardSchemeFactory implements SchemeFactory {
      public ActivateScene_resultStandardScheme getScheme() {
        return new ActivateScene_resultStandardScheme();
      }
    }

    private static class ActivateScene_resultStandardScheme extends StandardScheme<ActivateScene_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ActivateScene_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ActivateScene_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ActivateScene_resultTupleSchemeFactory implements SchemeFactory {
      public ActivateScene_resultTupleScheme getScheme() {
        return new ActivateScene_resultTupleScheme();
      }
    }

    private static class ActivateScene_resultTupleScheme extends TupleScheme<ActivateScene_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ActivateScene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ActivateScene_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetDriverStatistics_args implements org.apache.thrift.TBase<GetDriverStatistics_args, GetDriverStatistics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDriverStatistics_args");

    private static final org.apache.thrift.protocol.TField _HOME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_homeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetDriverStatistics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetDriverStatistics_argsTupleSchemeFactory());
    }

    public int _homeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _HOME_ID((short)1, "_homeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _HOME_ID
            return _HOME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___HOMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._HOME_ID, new org.apache.thrift.meta_data.FieldMetaData("_homeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDriverStatistics_args.class, metaDataMap);
    }

    public GetDriverStatistics_args() {
    }

    public GetDriverStatistics_args(
      int _homeId)
    {
      this();
      this._homeId = _homeId;
      set_homeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDriverStatistics_args(GetDriverStatistics_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this._homeId = other._homeId;
    }

    public GetDriverStatistics_args deepCopy() {
      return new GetDriverStatistics_args(this);
    }

    @Override
    public void clear() {
      set_homeIdIsSet(false);
      this._homeId = 0;
    }

    public int get_homeId() {
      return this._homeId;
    }

    public GetDriverStatistics_args set_homeId(int _homeId) {
      this._homeId = _homeId;
      set_homeIdIsSet(true);
      return this;
    }

    public void unset_homeId() {
      __isset_bit_vector.clear(___HOMEID_ISSET_ID);
    }

    /** Returns true if field _homeId is set (has been assigned a value) and false otherwise */
    public boolean isSet_homeId() {
      return __isset_bit_vector.get(___HOMEID_ISSET_ID);
    }

    public void set_homeIdIsSet(boolean value) {
      __isset_bit_vector.set(___HOMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _HOME_ID:
        if (value == null) {
          unset_homeId();
        } else {
          set_homeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _HOME_ID:
        return Integer.valueOf(get_homeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _HOME_ID:
        return isSet_homeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDriverStatistics_args)
        return this.equals((GetDriverStatistics_args)that);
      return false;
    }

    public boolean equals(GetDriverStatistics_args that) {
      if (that == null)
        return false;

      boolean this_present__homeId = true;
      boolean that_present__homeId = true;
      if (this_present__homeId || that_present__homeId) {
        if (!(this_present__homeId && that_present__homeId))
          return false;
        if (this._homeId != that._homeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetDriverStatistics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetDriverStatistics_args typedOther = (GetDriverStatistics_args)other;

      lastComparison = Boolean.valueOf(isSet_homeId()).compareTo(typedOther.isSet_homeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_homeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._homeId, typedOther._homeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetDriverStatistics_args(");
      boolean first = true;

      sb.append("_homeId:");
      sb.append(this._homeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDriverStatistics_argsStandardSchemeFactory implements SchemeFactory {
      public GetDriverStatistics_argsStandardScheme getScheme() {
        return new GetDriverStatistics_argsStandardScheme();
      }
    }

    private static class GetDriverStatistics_argsStandardScheme extends StandardScheme<GetDriverStatistics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDriverStatistics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _HOME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct._homeId = iprot.readI32();
                struct.set_homeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDriverStatistics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(_HOME_ID_FIELD_DESC);
        oprot.writeI32(struct._homeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDriverStatistics_argsTupleSchemeFactory implements SchemeFactory {
      public GetDriverStatistics_argsTupleScheme getScheme() {
        return new GetDriverStatistics_argsTupleScheme();
      }
    }

    private static class GetDriverStatistics_argsTupleScheme extends TupleScheme<GetDriverStatistics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDriverStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_homeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_homeId()) {
          oprot.writeI32(struct._homeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDriverStatistics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._homeId = iprot.readI32();
          struct.set_homeIdIsSet(true);
        }
      }
    }

  }

  public static class GetDriverStatistics_result implements org.apache.thrift.TBase<GetDriverStatistics_result, GetDriverStatistics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDriverStatistics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetDriverStatistics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetDriverStatistics_resultTupleSchemeFactory());
    }

    public GetDriverStatisticsReturnStruct success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetDriverStatisticsReturnStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDriverStatistics_result.class, metaDataMap);
    }

    public GetDriverStatistics_result() {
    }

    public GetDriverStatistics_result(
      GetDriverStatisticsReturnStruct success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDriverStatistics_result(GetDriverStatistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetDriverStatisticsReturnStruct(other.success);
      }
    }

    public GetDriverStatistics_result deepCopy() {
      return new GetDriverStatistics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetDriverStatisticsReturnStruct getSuccess() {
      return this.success;
    }

    public GetDriverStatistics_result setSuccess(GetDriverStatisticsReturnStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetDriverStatisticsReturnStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDriverStatistics_result)
        return this.equals((GetDriverStatistics_result)that);
      return false;
    }

    public boolean equals(GetDriverStatistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetDriverStatistics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetDriverStatistics_result typedOther = (GetDriverStatistics_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetDriverStatistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDriverStatistics_resultStandardSchemeFactory implements SchemeFactory {
      public GetDriverStatistics_resultStandardScheme getScheme() {
        return new GetDriverStatistics_resultStandardScheme();
      }
    }

    private static class GetDriverStatistics_resultStandardScheme extends StandardScheme<GetDriverStatistics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDriverStatistics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetDriverStatisticsReturnStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDriverStatistics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDriverStatistics_resultTupleSchemeFactory implements SchemeFactory {
      public GetDriverStatistics_resultTupleScheme getScheme() {
        return new GetDriverStatistics_resultTupleScheme();
      }
    }

    private static class GetDriverStatistics_resultTupleScheme extends TupleScheme<GetDriverStatistics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDriverStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDriverStatistics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetDriverStatisticsReturnStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SendAllValues_args implements org.apache.thrift.TBase<SendAllValues_args, SendAllValues_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendAllValues_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SendAllValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SendAllValues_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendAllValues_args.class, metaDataMap);
    }

    public SendAllValues_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendAllValues_args(SendAllValues_args other) {
    }

    public SendAllValues_args deepCopy() {
      return new SendAllValues_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SendAllValues_args)
        return this.equals((SendAllValues_args)that);
      return false;
    }

    public boolean equals(SendAllValues_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SendAllValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SendAllValues_args typedOther = (SendAllValues_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SendAllValues_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendAllValues_argsStandardSchemeFactory implements SchemeFactory {
      public SendAllValues_argsStandardScheme getScheme() {
        return new SendAllValues_argsStandardScheme();
      }
    }

    private static class SendAllValues_argsStandardScheme extends StandardScheme<SendAllValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendAllValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendAllValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendAllValues_argsTupleSchemeFactory implements SchemeFactory {
      public SendAllValues_argsTupleScheme getScheme() {
        return new SendAllValues_argsTupleScheme();
      }
    }

    private static class SendAllValues_argsTupleScheme extends TupleScheme<SendAllValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendAllValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendAllValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SendAllValues_result implements org.apache.thrift.TBase<SendAllValues_result, SendAllValues_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendAllValues_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SendAllValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SendAllValues_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendAllValues_result.class, metaDataMap);
    }

    public SendAllValues_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendAllValues_result(SendAllValues_result other) {
    }

    public SendAllValues_result deepCopy() {
      return new SendAllValues_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SendAllValues_result)
        return this.equals((SendAllValues_result)that);
      return false;
    }

    public boolean equals(SendAllValues_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(SendAllValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      SendAllValues_result typedOther = (SendAllValues_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SendAllValues_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendAllValues_resultStandardSchemeFactory implements SchemeFactory {
      public SendAllValues_resultStandardScheme getScheme() {
        return new SendAllValues_resultStandardScheme();
      }
    }

    private static class SendAllValues_resultStandardScheme extends StandardScheme<SendAllValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendAllValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendAllValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendAllValues_resultTupleSchemeFactory implements SchemeFactory {
      public SendAllValues_resultTupleScheme getScheme() {
        return new SendAllValues_resultTupleScheme();
      }
    }

    private static class SendAllValues_resultTupleScheme extends TupleScheme<SendAllValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendAllValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendAllValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
