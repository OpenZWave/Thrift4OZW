/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package OpenZWave;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GetSwitchPointReturnStruct implements org.apache.thrift.TBase<GetSwitchPointReturnStruct, GetSwitchPointReturnStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwitchPointReturnStruct");

  private static final org.apache.thrift.protocol.TField RETVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("retval", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField O_HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("o_hours", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField O_MINUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("o_minutes", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField O_SETBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("o_setback", org.apache.thrift.protocol.TType.BYTE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetSwitchPointReturnStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetSwitchPointReturnStructTupleSchemeFactory());
  }

  public boolean retval; // required
  public byte o_hours; // required
  public byte o_minutes; // required
  public byte o_setback; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RETVAL((short)1, "retval"),
    O_HOURS((short)2, "o_hours"),
    O_MINUTES((short)3, "o_minutes"),
    O_SETBACK((short)4, "o_setback");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETVAL
          return RETVAL;
        case 2: // O_HOURS
          return O_HOURS;
        case 3: // O_MINUTES
          return O_MINUTES;
        case 4: // O_SETBACK
          return O_SETBACK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RETVAL_ISSET_ID = 0;
  private static final int __O_HOURS_ISSET_ID = 1;
  private static final int __O_MINUTES_ISSET_ID = 2;
  private static final int __O_SETBACK_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETVAL, new org.apache.thrift.meta_data.FieldMetaData("retval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.O_HOURS, new org.apache.thrift.meta_data.FieldMetaData("o_hours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.O_MINUTES, new org.apache.thrift.meta_data.FieldMetaData("o_minutes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.O_SETBACK, new org.apache.thrift.meta_data.FieldMetaData("o_setback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwitchPointReturnStruct.class, metaDataMap);
  }

  public GetSwitchPointReturnStruct() {
  }

  public GetSwitchPointReturnStruct(
    boolean retval,
    byte o_hours,
    byte o_minutes,
    byte o_setback)
  {
    this();
    this.retval = retval;
    setRetvalIsSet(true);
    this.o_hours = o_hours;
    setO_hoursIsSet(true);
    this.o_minutes = o_minutes;
    setO_minutesIsSet(true);
    this.o_setback = o_setback;
    setO_setbackIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSwitchPointReturnStruct(GetSwitchPointReturnStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.retval = other.retval;
    this.o_hours = other.o_hours;
    this.o_minutes = other.o_minutes;
    this.o_setback = other.o_setback;
  }

  public GetSwitchPointReturnStruct deepCopy() {
    return new GetSwitchPointReturnStruct(this);
  }

  @Override
  public void clear() {
    setRetvalIsSet(false);
    this.retval = false;
    setO_hoursIsSet(false);
    this.o_hours = 0;
    setO_minutesIsSet(false);
    this.o_minutes = 0;
    setO_setbackIsSet(false);
    this.o_setback = 0;
  }

  public boolean isRetval() {
    return this.retval;
  }

  public GetSwitchPointReturnStruct setRetval(boolean retval) {
    this.retval = retval;
    setRetvalIsSet(true);
    return this;
  }

  public void unsetRetval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETVAL_ISSET_ID);
  }

  /** Returns true if field retval is set (has been assigned a value) and false otherwise */
  public boolean isSetRetval() {
    return EncodingUtils.testBit(__isset_bitfield, __RETVAL_ISSET_ID);
  }

  public void setRetvalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETVAL_ISSET_ID, value);
  }

  public byte getO_hours() {
    return this.o_hours;
  }

  public GetSwitchPointReturnStruct setO_hours(byte o_hours) {
    this.o_hours = o_hours;
    setO_hoursIsSet(true);
    return this;
  }

  public void unsetO_hours() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __O_HOURS_ISSET_ID);
  }

  /** Returns true if field o_hours is set (has been assigned a value) and false otherwise */
  public boolean isSetO_hours() {
    return EncodingUtils.testBit(__isset_bitfield, __O_HOURS_ISSET_ID);
  }

  public void setO_hoursIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __O_HOURS_ISSET_ID, value);
  }

  public byte getO_minutes() {
    return this.o_minutes;
  }

  public GetSwitchPointReturnStruct setO_minutes(byte o_minutes) {
    this.o_minutes = o_minutes;
    setO_minutesIsSet(true);
    return this;
  }

  public void unsetO_minutes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __O_MINUTES_ISSET_ID);
  }

  /** Returns true if field o_minutes is set (has been assigned a value) and false otherwise */
  public boolean isSetO_minutes() {
    return EncodingUtils.testBit(__isset_bitfield, __O_MINUTES_ISSET_ID);
  }

  public void setO_minutesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __O_MINUTES_ISSET_ID, value);
  }

  public byte getO_setback() {
    return this.o_setback;
  }

  public GetSwitchPointReturnStruct setO_setback(byte o_setback) {
    this.o_setback = o_setback;
    setO_setbackIsSet(true);
    return this;
  }

  public void unsetO_setback() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __O_SETBACK_ISSET_ID);
  }

  /** Returns true if field o_setback is set (has been assigned a value) and false otherwise */
  public boolean isSetO_setback() {
    return EncodingUtils.testBit(__isset_bitfield, __O_SETBACK_ISSET_ID);
  }

  public void setO_setbackIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __O_SETBACK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETVAL:
      if (value == null) {
        unsetRetval();
      } else {
        setRetval((Boolean)value);
      }
      break;

    case O_HOURS:
      if (value == null) {
        unsetO_hours();
      } else {
        setO_hours((Byte)value);
      }
      break;

    case O_MINUTES:
      if (value == null) {
        unsetO_minutes();
      } else {
        setO_minutes((Byte)value);
      }
      break;

    case O_SETBACK:
      if (value == null) {
        unsetO_setback();
      } else {
        setO_setback((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETVAL:
      return Boolean.valueOf(isRetval());

    case O_HOURS:
      return Byte.valueOf(getO_hours());

    case O_MINUTES:
      return Byte.valueOf(getO_minutes());

    case O_SETBACK:
      return Byte.valueOf(getO_setback());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETVAL:
      return isSetRetval();
    case O_HOURS:
      return isSetO_hours();
    case O_MINUTES:
      return isSetO_minutes();
    case O_SETBACK:
      return isSetO_setback();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSwitchPointReturnStruct)
      return this.equals((GetSwitchPointReturnStruct)that);
    return false;
  }

  public boolean equals(GetSwitchPointReturnStruct that) {
    if (that == null)
      return false;

    boolean this_present_retval = true;
    boolean that_present_retval = true;
    if (this_present_retval || that_present_retval) {
      if (!(this_present_retval && that_present_retval))
        return false;
      if (this.retval != that.retval)
        return false;
    }

    boolean this_present_o_hours = true;
    boolean that_present_o_hours = true;
    if (this_present_o_hours || that_present_o_hours) {
      if (!(this_present_o_hours && that_present_o_hours))
        return false;
      if (this.o_hours != that.o_hours)
        return false;
    }

    boolean this_present_o_minutes = true;
    boolean that_present_o_minutes = true;
    if (this_present_o_minutes || that_present_o_minutes) {
      if (!(this_present_o_minutes && that_present_o_minutes))
        return false;
      if (this.o_minutes != that.o_minutes)
        return false;
    }

    boolean this_present_o_setback = true;
    boolean that_present_o_setback = true;
    if (this_present_o_setback || that_present_o_setback) {
      if (!(this_present_o_setback && that_present_o_setback))
        return false;
      if (this.o_setback != that.o_setback)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GetSwitchPointReturnStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GetSwitchPointReturnStruct typedOther = (GetSwitchPointReturnStruct)other;

    lastComparison = Boolean.valueOf(isSetRetval()).compareTo(typedOther.isSetRetval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retval, typedOther.retval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO_hours()).compareTo(typedOther.isSetO_hours());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO_hours()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o_hours, typedOther.o_hours);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO_minutes()).compareTo(typedOther.isSetO_minutes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO_minutes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o_minutes, typedOther.o_minutes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO_setback()).compareTo(typedOther.isSetO_setback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO_setback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o_setback, typedOther.o_setback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetSwitchPointReturnStruct(");
    boolean first = true;

    sb.append("retval:");
    sb.append(this.retval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o_hours:");
    sb.append(this.o_hours);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o_minutes:");
    sb.append(this.o_minutes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o_setback:");
    sb.append(this.o_setback);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetSwitchPointReturnStructStandardSchemeFactory implements SchemeFactory {
    public GetSwitchPointReturnStructStandardScheme getScheme() {
      return new GetSwitchPointReturnStructStandardScheme();
    }
  }

  private static class GetSwitchPointReturnStructStandardScheme extends StandardScheme<GetSwitchPointReturnStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwitchPointReturnStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.retval = iprot.readBool();
              struct.setRetvalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // O_HOURS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.o_hours = iprot.readByte();
              struct.setO_hoursIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // O_MINUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.o_minutes = iprot.readByte();
              struct.setO_minutesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // O_SETBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.o_setback = iprot.readByte();
              struct.setO_setbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwitchPointReturnStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RETVAL_FIELD_DESC);
      oprot.writeBool(struct.retval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(O_HOURS_FIELD_DESC);
      oprot.writeByte(struct.o_hours);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(O_MINUTES_FIELD_DESC);
      oprot.writeByte(struct.o_minutes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(O_SETBACK_FIELD_DESC);
      oprot.writeByte(struct.o_setback);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetSwitchPointReturnStructTupleSchemeFactory implements SchemeFactory {
    public GetSwitchPointReturnStructTupleScheme getScheme() {
      return new GetSwitchPointReturnStructTupleScheme();
    }
  }

  private static class GetSwitchPointReturnStructTupleScheme extends TupleScheme<GetSwitchPointReturnStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetSwitchPointReturnStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRetval()) {
        optionals.set(0);
      }
      if (struct.isSetO_hours()) {
        optionals.set(1);
      }
      if (struct.isSetO_minutes()) {
        optionals.set(2);
      }
      if (struct.isSetO_setback()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRetval()) {
        oprot.writeBool(struct.retval);
      }
      if (struct.isSetO_hours()) {
        oprot.writeByte(struct.o_hours);
      }
      if (struct.isSetO_minutes()) {
        oprot.writeByte(struct.o_minutes);
      }
      if (struct.isSetO_setback()) {
        oprot.writeByte(struct.o_setback);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetSwitchPointReturnStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.retval = iprot.readBool();
        struct.setRetvalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.o_hours = iprot.readByte();
        struct.setO_hoursIsSet(true);
      }
      if (incoming.get(2)) {
        struct.o_minutes = iprot.readByte();
        struct.setO_minutesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.o_setback = iprot.readByte();
        struct.setO_setbackIsSet(true);
      }
    }
  }

}

