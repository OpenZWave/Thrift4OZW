/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef RemoteManager_H
#define RemoteManager_H

#include <TProcessor.h>
#include "ozw_types.h"

namespace OpenZWave {

class RemoteManagerIf {
 public:
  virtual ~RemoteManagerIf() {}
  virtual void WriteConfig(const int32_t _homeId) = 0;
  virtual int8_t GetControllerNodeId(const int32_t _homeId) = 0;
  virtual bool IsPrimaryController(const int32_t _homeId) = 0;
  virtual bool IsStaticUpdateController(const int32_t _homeId) = 0;
  virtual bool IsBridgeController(const int32_t _homeId) = 0;
  virtual void GetLibraryVersion(std::string& _return, const int32_t _homeId) = 0;
  virtual void GetLibraryTypeName(std::string& _return, const int32_t _homeId) = 0;
  virtual int32_t GetSendQueueCount(const int32_t _homeId) = 0;
  virtual int32_t GetPollInterval() = 0;
  virtual void SetPollInterval(const int32_t _seconds) = 0;
  virtual bool EnablePoll(const RemoteValueID _valueId) = 0;
  virtual bool DisablePoll(const RemoteValueID _valueId) = 0;
  virtual bool isPolled(const RemoteValueID _valueId) = 0;
  virtual bool RefreshNodeInfo(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual bool RequestNodeState(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual bool RequestNodeDynamic(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual bool IsNodeListeningDevice(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual bool IsNodeRoutingDevice(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int32_t GetNodeMaxBaudRate(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int8_t GetNodeVersion(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int8_t GetNodeSecurity(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int8_t GetNodeBasic(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int8_t GetNodeGeneric(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int8_t GetNodeSpecific(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeType(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeNeighbors(UInt32_ListByte& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeManufacturerName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeProductName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeLocation(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeManufacturerId(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeProductType(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeProductId(std::string& _return, const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void SetNodeManufacturerName(const int32_t _homeId, const int8_t _nodeId, const std::string& _manufacturerName) = 0;
  virtual void SetNodeProductName(const int32_t _homeId, const int8_t _nodeId, const std::string& _productName) = 0;
  virtual void SetNodeName(const int32_t _homeId, const int8_t _nodeId, const std::string& _nodeName) = 0;
  virtual void SetNodeLocation(const int32_t _homeId, const int8_t _nodeId, const std::string& _location) = 0;
  virtual void SetNodeOn(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void SetNodeOff(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void SetNodeLevel(const int32_t _homeId, const int8_t _nodeId, const int8_t _level) = 0;
  virtual bool IsNodeInfoReceived(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetNodeClassInformation(Bool_GetNodeClassInformation& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _commandClassId) = 0;
  virtual void GetValueLabel(std::string& _return, const RemoteValueID _id) = 0;
  virtual void SetValueLabel(const RemoteValueID _id, const std::string& _value) = 0;
  virtual void GetValueUnits(std::string& _return, const RemoteValueID _id) = 0;
  virtual void SetValueUnits(const RemoteValueID _id, const std::string& _value) = 0;
  virtual void GetValueHelp(std::string& _return, const RemoteValueID _id) = 0;
  virtual void SetValueHelp(const RemoteValueID _id, const std::string& _value) = 0;
  virtual int32_t GetValueMin(const RemoteValueID _id) = 0;
  virtual int32_t GetValueMax(const RemoteValueID _id) = 0;
  virtual bool IsValueReadOnly(const RemoteValueID _id) = 0;
  virtual bool IsValueWriteOnly(const RemoteValueID _id) = 0;
  virtual bool IsValueSet(const RemoteValueID _id) = 0;
  virtual void GetValueAsBool(Bool_Bool& _return, const RemoteValueID _id) = 0;
  virtual void GetValueAsByte(Bool_UInt8& _return, const RemoteValueID _id) = 0;
  virtual void GetValueAsFloat(Bool_Float& _return, const RemoteValueID _id) = 0;
  virtual void GetValueAsInt(Bool_Int& _return, const RemoteValueID _id) = 0;
  virtual void GetValueAsShort(Bool_Int16& _return, const RemoteValueID _id) = 0;
  virtual void GetValueAsString(Bool_String& _return, const RemoteValueID _id) = 0;
  virtual void GetValueListSelection_String(Bool_String& _return, const RemoteValueID _id) = 0;
  virtual void GetValueListSelection_Int32(Bool_Int& _return, const RemoteValueID _id) = 0;
  virtual void GetValueListItems(Bool_ListString& _return, const RemoteValueID _id) = 0;
  virtual void GetValueFloatPrecision(Bool_UInt8& _return, const RemoteValueID _id) = 0;
  virtual bool SetValue_Bool(const RemoteValueID _id, const bool _value) = 0;
  virtual bool SetValue_UInt8(const RemoteValueID _id, const int8_t _value) = 0;
  virtual bool SetValue_Float(const RemoteValueID _id, const double _value) = 0;
  virtual bool SetValue_Int32(const RemoteValueID _id, const int32_t _value) = 0;
  virtual bool SetValue_Int16(const RemoteValueID _id, const int16_t _value) = 0;
  virtual bool SetValue_String(const RemoteValueID _id, const std::string& _value) = 0;
  virtual bool SetValueListSelection(const RemoteValueID _id, const std::string& _selectedItem) = 0;
  virtual bool PressButton(const RemoteValueID _id) = 0;
  virtual bool ReleaseButton(const RemoteValueID _id) = 0;
  virtual int8_t GetNumSwitchPoints(const RemoteValueID _id) = 0;
  virtual bool SetSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes, const int8_t _setback) = 0;
  virtual bool RemoveSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes) = 0;
  virtual void ClearSwitchPoints(const RemoteValueID _id) = 0;
  virtual void GetSwitchPoint(GetSwitchPointReturnStruct& _return, const RemoteValueID _id, const int8_t _idx) = 0;
  virtual void SwitchAllOn(const int32_t _homeId) = 0;
  virtual void SwitchAllOff(const int32_t _homeId) = 0;
  virtual bool SetConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param, const int32_t _value, const int8_t _size) = 0;
  virtual void RequestConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param) = 0;
  virtual void RequestAllConfigParams(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual int8_t GetNumGroups(const int32_t _homeId, const int8_t _nodeId) = 0;
  virtual void GetAssociations(GetAssociationsReturnStruct& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) = 0;
  virtual int8_t GetMaxAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) = 0;
  virtual void GetGroupLabel(std::string& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) = 0;
  virtual void AddAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId) = 0;
  virtual void RemoveAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId) = 0;
  virtual void ResetController(const int32_t _homeId) = 0;
  virtual void SoftReset(const int32_t _homeId) = 0;
  virtual int8_t GetNumScenes() = 0;
  virtual void GetAllScenes(GetAllScenesReturnStruct& _return) = 0;
  virtual int8_t CreateScene() = 0;
  virtual bool RemoveScene(const int8_t _sceneId) = 0;
  virtual bool AddSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value) = 0;
  virtual bool AddSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value) = 0;
  virtual bool AddSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value) = 0;
  virtual bool AddSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) = 0;
  virtual bool AddSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value) = 0;
  virtual bool AddSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) = 0;
  virtual bool AddSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) = 0;
  virtual bool AddSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) = 0;
  virtual bool RemoveSceneValue(const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValues(SceneGetValuesReturnStruct& _return, const int8_t _sceneId) = 0;
  virtual void SceneGetValueAsBool(Bool_Bool& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueAsByte(Bool_UInt8& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueAsFloat(Bool_Float& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueAsInt(Bool_Int& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueAsShort(Bool_Int16& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueAsString(Bool_String& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueListSelection_String(Bool_String& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual void SceneGetValueListSelection_Int32(Bool_Int& _return, const int8_t _sceneId, const RemoteValueID _valueId) = 0;
  virtual bool SetSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value) = 0;
  virtual bool SetSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value) = 0;
  virtual bool SetSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value) = 0;
  virtual bool SetSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) = 0;
  virtual bool SetSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value) = 0;
  virtual bool SetSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) = 0;
  virtual bool SetSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) = 0;
  virtual bool SetSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) = 0;
  virtual void GetSceneLabel(std::string& _return, const int8_t _sceneId) = 0;
  virtual void SetSceneLabel(const int8_t _sceneId, const std::string& _value) = 0;
  virtual bool SceneExists(const int8_t _sceneId) = 0;
  virtual bool ActivateScene(const int8_t _sceneId) = 0;
};

class RemoteManagerNull : virtual public RemoteManagerIf {
 public:
  virtual ~RemoteManagerNull() {}
  void WriteConfig(const int32_t /* _homeId */) {
    return;
  }
  int8_t GetControllerNodeId(const int32_t /* _homeId */) {
    int8_t _return = 0;
    return _return;
  }
  bool IsPrimaryController(const int32_t /* _homeId */) {
    bool _return = false;
    return _return;
  }
  bool IsStaticUpdateController(const int32_t /* _homeId */) {
    bool _return = false;
    return _return;
  }
  bool IsBridgeController(const int32_t /* _homeId */) {
    bool _return = false;
    return _return;
  }
  void GetLibraryVersion(std::string& /* _return */, const int32_t /* _homeId */) {
    return;
  }
  void GetLibraryTypeName(std::string& /* _return */, const int32_t /* _homeId */) {
    return;
  }
  int32_t GetSendQueueCount(const int32_t /* _homeId */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetPollInterval() {
    int32_t _return = 0;
    return _return;
  }
  void SetPollInterval(const int32_t /* _seconds */) {
    return;
  }
  bool EnablePoll(const RemoteValueID /* _valueId */) {
    bool _return = false;
    return _return;
  }
  bool DisablePoll(const RemoteValueID /* _valueId */) {
    bool _return = false;
    return _return;
  }
  bool isPolled(const RemoteValueID /* _valueId */) {
    bool _return = false;
    return _return;
  }
  bool RefreshNodeInfo(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    bool _return = false;
    return _return;
  }
  bool RequestNodeState(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    bool _return = false;
    return _return;
  }
  bool RequestNodeDynamic(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    bool _return = false;
    return _return;
  }
  bool IsNodeListeningDevice(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    bool _return = false;
    return _return;
  }
  bool IsNodeRoutingDevice(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    bool _return = false;
    return _return;
  }
  int32_t GetNodeMaxBaudRate(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int32_t _return = 0;
    return _return;
  }
  int8_t GetNodeVersion(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t GetNodeSecurity(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t GetNodeBasic(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t GetNodeGeneric(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int8_t _return = 0;
    return _return;
  }
  int8_t GetNodeSpecific(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int8_t _return = 0;
    return _return;
  }
  void GetNodeType(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeNeighbors(UInt32_ListByte& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeManufacturerName(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeProductName(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeName(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeLocation(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeManufacturerId(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeProductType(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void GetNodeProductId(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void SetNodeManufacturerName(const int32_t /* _homeId */, const int8_t /* _nodeId */, const std::string& /* _manufacturerName */) {
    return;
  }
  void SetNodeProductName(const int32_t /* _homeId */, const int8_t /* _nodeId */, const std::string& /* _productName */) {
    return;
  }
  void SetNodeName(const int32_t /* _homeId */, const int8_t /* _nodeId */, const std::string& /* _nodeName */) {
    return;
  }
  void SetNodeLocation(const int32_t /* _homeId */, const int8_t /* _nodeId */, const std::string& /* _location */) {
    return;
  }
  void SetNodeOn(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void SetNodeOff(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  void SetNodeLevel(const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _level */) {
    return;
  }
  bool IsNodeInfoReceived(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    bool _return = false;
    return _return;
  }
  void GetNodeClassInformation(Bool_GetNodeClassInformation& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _commandClassId */) {
    return;
  }
  void GetValueLabel(std::string& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void SetValueLabel(const RemoteValueID /* _id */, const std::string& /* _value */) {
    return;
  }
  void GetValueUnits(std::string& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void SetValueUnits(const RemoteValueID /* _id */, const std::string& /* _value */) {
    return;
  }
  void GetValueHelp(std::string& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void SetValueHelp(const RemoteValueID /* _id */, const std::string& /* _value */) {
    return;
  }
  int32_t GetValueMin(const RemoteValueID /* _id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t GetValueMax(const RemoteValueID /* _id */) {
    int32_t _return = 0;
    return _return;
  }
  bool IsValueReadOnly(const RemoteValueID /* _id */) {
    bool _return = false;
    return _return;
  }
  bool IsValueWriteOnly(const RemoteValueID /* _id */) {
    bool _return = false;
    return _return;
  }
  bool IsValueSet(const RemoteValueID /* _id */) {
    bool _return = false;
    return _return;
  }
  void GetValueAsBool(Bool_Bool& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueAsByte(Bool_UInt8& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueAsFloat(Bool_Float& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueAsInt(Bool_Int& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueAsShort(Bool_Int16& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueAsString(Bool_String& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueListSelection_String(Bool_String& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueListSelection_Int32(Bool_Int& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueListItems(Bool_ListString& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  void GetValueFloatPrecision(Bool_UInt8& /* _return */, const RemoteValueID /* _id */) {
    return;
  }
  bool SetValue_Bool(const RemoteValueID /* _id */, const bool /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetValue_UInt8(const RemoteValueID /* _id */, const int8_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetValue_Float(const RemoteValueID /* _id */, const double /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetValue_Int32(const RemoteValueID /* _id */, const int32_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetValue_Int16(const RemoteValueID /* _id */, const int16_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetValue_String(const RemoteValueID /* _id */, const std::string& /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetValueListSelection(const RemoteValueID /* _id */, const std::string& /* _selectedItem */) {
    bool _return = false;
    return _return;
  }
  bool PressButton(const RemoteValueID /* _id */) {
    bool _return = false;
    return _return;
  }
  bool ReleaseButton(const RemoteValueID /* _id */) {
    bool _return = false;
    return _return;
  }
  int8_t GetNumSwitchPoints(const RemoteValueID /* _id */) {
    int8_t _return = 0;
    return _return;
  }
  bool SetSwitchPoint(const RemoteValueID /* _id */, const int8_t /* _hours */, const int8_t /* _minutes */, const int8_t /* _setback */) {
    bool _return = false;
    return _return;
  }
  bool RemoveSwitchPoint(const RemoteValueID /* _id */, const int8_t /* _hours */, const int8_t /* _minutes */) {
    bool _return = false;
    return _return;
  }
  void ClearSwitchPoints(const RemoteValueID /* _id */) {
    return;
  }
  void GetSwitchPoint(GetSwitchPointReturnStruct& /* _return */, const RemoteValueID /* _id */, const int8_t /* _idx */) {
    return;
  }
  void SwitchAllOn(const int32_t /* _homeId */) {
    return;
  }
  void SwitchAllOff(const int32_t /* _homeId */) {
    return;
  }
  bool SetConfigParam(const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _param */, const int32_t /* _value */, const int8_t /* _size */) {
    bool _return = false;
    return _return;
  }
  void RequestConfigParam(const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _param */) {
    return;
  }
  void RequestAllConfigParams(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    return;
  }
  int8_t GetNumGroups(const int32_t /* _homeId */, const int8_t /* _nodeId */) {
    int8_t _return = 0;
    return _return;
  }
  void GetAssociations(GetAssociationsReturnStruct& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _groupIdx */) {
    return;
  }
  int8_t GetMaxAssociations(const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _groupIdx */) {
    int8_t _return = 0;
    return _return;
  }
  void GetGroupLabel(std::string& /* _return */, const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _groupIdx */) {
    return;
  }
  void AddAssociation(const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _groupIdx */, const int8_t /* _targetNodeId */) {
    return;
  }
  void RemoveAssociation(const int32_t /* _homeId */, const int8_t /* _nodeId */, const int8_t /* _groupIdx */, const int8_t /* _targetNodeId */) {
    return;
  }
  void ResetController(const int32_t /* _homeId */) {
    return;
  }
  void SoftReset(const int32_t /* _homeId */) {
    return;
  }
  int8_t GetNumScenes() {
    int8_t _return = 0;
    return _return;
  }
  void GetAllScenes(GetAllScenesReturnStruct& /* _return */) {
    return;
  }
  int8_t CreateScene() {
    int8_t _return = 0;
    return _return;
  }
  bool RemoveScene(const int8_t /* _sceneId */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValue_Bool(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const bool /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValue_Uint8(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int8_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValue_Float(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const double /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValue_Int32(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int32_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValue_Int16(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int16_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValue_String(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const std::string& /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValueListSelection_String(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const std::string& /* _value */) {
    bool _return = false;
    return _return;
  }
  bool AddSceneValueListSelection_Int32(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int32_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool RemoveSceneValue(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    bool _return = false;
    return _return;
  }
  void SceneGetValues(SceneGetValuesReturnStruct& /* _return */, const int8_t /* _sceneId */) {
    return;
  }
  void SceneGetValueAsBool(Bool_Bool& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueAsByte(Bool_UInt8& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueAsFloat(Bool_Float& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueAsInt(Bool_Int& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueAsShort(Bool_Int16& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueAsString(Bool_String& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueListSelection_String(Bool_String& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  void SceneGetValueListSelection_Int32(Bool_Int& /* _return */, const int8_t /* _sceneId */, const RemoteValueID /* _valueId */) {
    return;
  }
  bool SetSceneValue_Bool(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const bool /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValue_Uint8(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int8_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValue_Float(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const double /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValue_Int32(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int32_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValue_Int16(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int16_t /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValue_String(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const std::string& /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValueListSelection_String(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const std::string& /* _value */) {
    bool _return = false;
    return _return;
  }
  bool SetSceneValueListSelection_Int32(const int8_t /* _sceneId */, const RemoteValueID /* _valueId */, const int32_t /* _value */) {
    bool _return = false;
    return _return;
  }
  void GetSceneLabel(std::string& /* _return */, const int8_t /* _sceneId */) {
    return;
  }
  void SetSceneLabel(const int8_t /* _sceneId */, const std::string& /* _value */) {
    return;
  }
  bool SceneExists(const int8_t /* _sceneId */) {
    bool _return = false;
    return _return;
  }
  bool ActivateScene(const int8_t /* _sceneId */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _RemoteManager_WriteConfig_args__isset {
  _RemoteManager_WriteConfig_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_WriteConfig_args__isset;

class RemoteManager_WriteConfig_args {
 public:

  RemoteManager_WriteConfig_args() : _homeId(0) {
  }

  virtual ~RemoteManager_WriteConfig_args() throw() {}

  int32_t _homeId;

  _RemoteManager_WriteConfig_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_WriteConfig_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_WriteConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_WriteConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_WriteConfig_pargs {
 public:


  virtual ~RemoteManager_WriteConfig_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_WriteConfig_result {
 public:

  RemoteManager_WriteConfig_result() {
  }

  virtual ~RemoteManager_WriteConfig_result() throw() {}


  bool operator == (const RemoteManager_WriteConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_WriteConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_WriteConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_WriteConfig_presult {
 public:


  virtual ~RemoteManager_WriteConfig_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetControllerNodeId_args__isset {
  _RemoteManager_GetControllerNodeId_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_GetControllerNodeId_args__isset;

class RemoteManager_GetControllerNodeId_args {
 public:

  RemoteManager_GetControllerNodeId_args() : _homeId(0) {
  }

  virtual ~RemoteManager_GetControllerNodeId_args() throw() {}

  int32_t _homeId;

  _RemoteManager_GetControllerNodeId_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_GetControllerNodeId_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetControllerNodeId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetControllerNodeId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetControllerNodeId_pargs {
 public:


  virtual ~RemoteManager_GetControllerNodeId_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetControllerNodeId_result__isset {
  _RemoteManager_GetControllerNodeId_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetControllerNodeId_result__isset;

class RemoteManager_GetControllerNodeId_result {
 public:

  RemoteManager_GetControllerNodeId_result() : success(0) {
  }

  virtual ~RemoteManager_GetControllerNodeId_result() throw() {}

  int8_t success;

  _RemoteManager_GetControllerNodeId_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetControllerNodeId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetControllerNodeId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetControllerNodeId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetControllerNodeId_presult__isset {
  _RemoteManager_GetControllerNodeId_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetControllerNodeId_presult__isset;

class RemoteManager_GetControllerNodeId_presult {
 public:


  virtual ~RemoteManager_GetControllerNodeId_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetControllerNodeId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsPrimaryController_args__isset {
  _RemoteManager_IsPrimaryController_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_IsPrimaryController_args__isset;

class RemoteManager_IsPrimaryController_args {
 public:

  RemoteManager_IsPrimaryController_args() : _homeId(0) {
  }

  virtual ~RemoteManager_IsPrimaryController_args() throw() {}

  int32_t _homeId;

  _RemoteManager_IsPrimaryController_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_IsPrimaryController_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsPrimaryController_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsPrimaryController_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsPrimaryController_pargs {
 public:


  virtual ~RemoteManager_IsPrimaryController_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsPrimaryController_result__isset {
  _RemoteManager_IsPrimaryController_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsPrimaryController_result__isset;

class RemoteManager_IsPrimaryController_result {
 public:

  RemoteManager_IsPrimaryController_result() : success(0) {
  }

  virtual ~RemoteManager_IsPrimaryController_result() throw() {}

  bool success;

  _RemoteManager_IsPrimaryController_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsPrimaryController_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsPrimaryController_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsPrimaryController_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsPrimaryController_presult__isset {
  _RemoteManager_IsPrimaryController_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsPrimaryController_presult__isset;

class RemoteManager_IsPrimaryController_presult {
 public:


  virtual ~RemoteManager_IsPrimaryController_presult() throw() {}

  bool* success;

  _RemoteManager_IsPrimaryController_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsStaticUpdateController_args__isset {
  _RemoteManager_IsStaticUpdateController_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_IsStaticUpdateController_args__isset;

class RemoteManager_IsStaticUpdateController_args {
 public:

  RemoteManager_IsStaticUpdateController_args() : _homeId(0) {
  }

  virtual ~RemoteManager_IsStaticUpdateController_args() throw() {}

  int32_t _homeId;

  _RemoteManager_IsStaticUpdateController_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_IsStaticUpdateController_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsStaticUpdateController_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsStaticUpdateController_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsStaticUpdateController_pargs {
 public:


  virtual ~RemoteManager_IsStaticUpdateController_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsStaticUpdateController_result__isset {
  _RemoteManager_IsStaticUpdateController_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsStaticUpdateController_result__isset;

class RemoteManager_IsStaticUpdateController_result {
 public:

  RemoteManager_IsStaticUpdateController_result() : success(0) {
  }

  virtual ~RemoteManager_IsStaticUpdateController_result() throw() {}

  bool success;

  _RemoteManager_IsStaticUpdateController_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsStaticUpdateController_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsStaticUpdateController_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsStaticUpdateController_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsStaticUpdateController_presult__isset {
  _RemoteManager_IsStaticUpdateController_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsStaticUpdateController_presult__isset;

class RemoteManager_IsStaticUpdateController_presult {
 public:


  virtual ~RemoteManager_IsStaticUpdateController_presult() throw() {}

  bool* success;

  _RemoteManager_IsStaticUpdateController_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsBridgeController_args__isset {
  _RemoteManager_IsBridgeController_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_IsBridgeController_args__isset;

class RemoteManager_IsBridgeController_args {
 public:

  RemoteManager_IsBridgeController_args() : _homeId(0) {
  }

  virtual ~RemoteManager_IsBridgeController_args() throw() {}

  int32_t _homeId;

  _RemoteManager_IsBridgeController_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_IsBridgeController_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsBridgeController_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsBridgeController_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsBridgeController_pargs {
 public:


  virtual ~RemoteManager_IsBridgeController_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsBridgeController_result__isset {
  _RemoteManager_IsBridgeController_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsBridgeController_result__isset;

class RemoteManager_IsBridgeController_result {
 public:

  RemoteManager_IsBridgeController_result() : success(0) {
  }

  virtual ~RemoteManager_IsBridgeController_result() throw() {}

  bool success;

  _RemoteManager_IsBridgeController_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsBridgeController_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsBridgeController_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsBridgeController_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsBridgeController_presult__isset {
  _RemoteManager_IsBridgeController_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsBridgeController_presult__isset;

class RemoteManager_IsBridgeController_presult {
 public:


  virtual ~RemoteManager_IsBridgeController_presult() throw() {}

  bool* success;

  _RemoteManager_IsBridgeController_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetLibraryVersion_args__isset {
  _RemoteManager_GetLibraryVersion_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_GetLibraryVersion_args__isset;

class RemoteManager_GetLibraryVersion_args {
 public:

  RemoteManager_GetLibraryVersion_args() : _homeId(0) {
  }

  virtual ~RemoteManager_GetLibraryVersion_args() throw() {}

  int32_t _homeId;

  _RemoteManager_GetLibraryVersion_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_GetLibraryVersion_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetLibraryVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetLibraryVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetLibraryVersion_pargs {
 public:


  virtual ~RemoteManager_GetLibraryVersion_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetLibraryVersion_result__isset {
  _RemoteManager_GetLibraryVersion_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetLibraryVersion_result__isset;

class RemoteManager_GetLibraryVersion_result {
 public:

  RemoteManager_GetLibraryVersion_result() : success("") {
  }

  virtual ~RemoteManager_GetLibraryVersion_result() throw() {}

  std::string success;

  _RemoteManager_GetLibraryVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetLibraryVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetLibraryVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetLibraryVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetLibraryVersion_presult__isset {
  _RemoteManager_GetLibraryVersion_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetLibraryVersion_presult__isset;

class RemoteManager_GetLibraryVersion_presult {
 public:


  virtual ~RemoteManager_GetLibraryVersion_presult() throw() {}

  std::string* success;

  _RemoteManager_GetLibraryVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetLibraryTypeName_args__isset {
  _RemoteManager_GetLibraryTypeName_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_GetLibraryTypeName_args__isset;

class RemoteManager_GetLibraryTypeName_args {
 public:

  RemoteManager_GetLibraryTypeName_args() : _homeId(0) {
  }

  virtual ~RemoteManager_GetLibraryTypeName_args() throw() {}

  int32_t _homeId;

  _RemoteManager_GetLibraryTypeName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_GetLibraryTypeName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetLibraryTypeName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetLibraryTypeName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetLibraryTypeName_pargs {
 public:


  virtual ~RemoteManager_GetLibraryTypeName_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetLibraryTypeName_result__isset {
  _RemoteManager_GetLibraryTypeName_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetLibraryTypeName_result__isset;

class RemoteManager_GetLibraryTypeName_result {
 public:

  RemoteManager_GetLibraryTypeName_result() : success("") {
  }

  virtual ~RemoteManager_GetLibraryTypeName_result() throw() {}

  std::string success;

  _RemoteManager_GetLibraryTypeName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetLibraryTypeName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetLibraryTypeName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetLibraryTypeName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetLibraryTypeName_presult__isset {
  _RemoteManager_GetLibraryTypeName_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetLibraryTypeName_presult__isset;

class RemoteManager_GetLibraryTypeName_presult {
 public:


  virtual ~RemoteManager_GetLibraryTypeName_presult() throw() {}

  std::string* success;

  _RemoteManager_GetLibraryTypeName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetSendQueueCount_args__isset {
  _RemoteManager_GetSendQueueCount_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_GetSendQueueCount_args__isset;

class RemoteManager_GetSendQueueCount_args {
 public:

  RemoteManager_GetSendQueueCount_args() : _homeId(0) {
  }

  virtual ~RemoteManager_GetSendQueueCount_args() throw() {}

  int32_t _homeId;

  _RemoteManager_GetSendQueueCount_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_GetSendQueueCount_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetSendQueueCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetSendQueueCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetSendQueueCount_pargs {
 public:


  virtual ~RemoteManager_GetSendQueueCount_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetSendQueueCount_result__isset {
  _RemoteManager_GetSendQueueCount_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetSendQueueCount_result__isset;

class RemoteManager_GetSendQueueCount_result {
 public:

  RemoteManager_GetSendQueueCount_result() : success(0) {
  }

  virtual ~RemoteManager_GetSendQueueCount_result() throw() {}

  int32_t success;

  _RemoteManager_GetSendQueueCount_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetSendQueueCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetSendQueueCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetSendQueueCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetSendQueueCount_presult__isset {
  _RemoteManager_GetSendQueueCount_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetSendQueueCount_presult__isset;

class RemoteManager_GetSendQueueCount_presult {
 public:


  virtual ~RemoteManager_GetSendQueueCount_presult() throw() {}

  int32_t* success;

  _RemoteManager_GetSendQueueCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteManager_GetPollInterval_args {
 public:

  RemoteManager_GetPollInterval_args() {
  }

  virtual ~RemoteManager_GetPollInterval_args() throw() {}


  bool operator == (const RemoteManager_GetPollInterval_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_GetPollInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetPollInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetPollInterval_pargs {
 public:


  virtual ~RemoteManager_GetPollInterval_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetPollInterval_result__isset {
  _RemoteManager_GetPollInterval_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetPollInterval_result__isset;

class RemoteManager_GetPollInterval_result {
 public:

  RemoteManager_GetPollInterval_result() : success(0) {
  }

  virtual ~RemoteManager_GetPollInterval_result() throw() {}

  int32_t success;

  _RemoteManager_GetPollInterval_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetPollInterval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetPollInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetPollInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetPollInterval_presult__isset {
  _RemoteManager_GetPollInterval_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetPollInterval_presult__isset;

class RemoteManager_GetPollInterval_presult {
 public:


  virtual ~RemoteManager_GetPollInterval_presult() throw() {}

  int32_t* success;

  _RemoteManager_GetPollInterval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetPollInterval_args__isset {
  _RemoteManager_SetPollInterval_args__isset() : _seconds(false) {}
  bool _seconds;
} _RemoteManager_SetPollInterval_args__isset;

class RemoteManager_SetPollInterval_args {
 public:

  RemoteManager_SetPollInterval_args() : _seconds(0) {
  }

  virtual ~RemoteManager_SetPollInterval_args() throw() {}

  int32_t _seconds;

  _RemoteManager_SetPollInterval_args__isset __isset;

  void __set__seconds(const int32_t val) {
    _seconds = val;
  }

  bool operator == (const RemoteManager_SetPollInterval_args & rhs) const
  {
    if (!(_seconds == rhs._seconds))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetPollInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetPollInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetPollInterval_pargs {
 public:


  virtual ~RemoteManager_SetPollInterval_pargs() throw() {}

  const int32_t* _seconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetPollInterval_result {
 public:

  RemoteManager_SetPollInterval_result() {
  }

  virtual ~RemoteManager_SetPollInterval_result() throw() {}


  bool operator == (const RemoteManager_SetPollInterval_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetPollInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetPollInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetPollInterval_presult {
 public:


  virtual ~RemoteManager_SetPollInterval_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_EnablePoll_args__isset {
  _RemoteManager_EnablePoll_args__isset() : _valueId(false) {}
  bool _valueId;
} _RemoteManager_EnablePoll_args__isset;

class RemoteManager_EnablePoll_args {
 public:

  RemoteManager_EnablePoll_args() : _valueId(0) {
  }

  virtual ~RemoteManager_EnablePoll_args() throw() {}

  RemoteValueID _valueId;

  _RemoteManager_EnablePoll_args__isset __isset;

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_EnablePoll_args & rhs) const
  {
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_EnablePoll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_EnablePoll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_EnablePoll_pargs {
 public:


  virtual ~RemoteManager_EnablePoll_pargs() throw() {}

  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_EnablePoll_result__isset {
  _RemoteManager_EnablePoll_result__isset() : success(false) {}
  bool success;
} _RemoteManager_EnablePoll_result__isset;

class RemoteManager_EnablePoll_result {
 public:

  RemoteManager_EnablePoll_result() : success(0) {
  }

  virtual ~RemoteManager_EnablePoll_result() throw() {}

  bool success;

  _RemoteManager_EnablePoll_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_EnablePoll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_EnablePoll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_EnablePoll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_EnablePoll_presult__isset {
  _RemoteManager_EnablePoll_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_EnablePoll_presult__isset;

class RemoteManager_EnablePoll_presult {
 public:


  virtual ~RemoteManager_EnablePoll_presult() throw() {}

  bool* success;

  _RemoteManager_EnablePoll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_DisablePoll_args__isset {
  _RemoteManager_DisablePoll_args__isset() : _valueId(false) {}
  bool _valueId;
} _RemoteManager_DisablePoll_args__isset;

class RemoteManager_DisablePoll_args {
 public:

  RemoteManager_DisablePoll_args() : _valueId(0) {
  }

  virtual ~RemoteManager_DisablePoll_args() throw() {}

  RemoteValueID _valueId;

  _RemoteManager_DisablePoll_args__isset __isset;

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_DisablePoll_args & rhs) const
  {
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_DisablePoll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_DisablePoll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_DisablePoll_pargs {
 public:


  virtual ~RemoteManager_DisablePoll_pargs() throw() {}

  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_DisablePoll_result__isset {
  _RemoteManager_DisablePoll_result__isset() : success(false) {}
  bool success;
} _RemoteManager_DisablePoll_result__isset;

class RemoteManager_DisablePoll_result {
 public:

  RemoteManager_DisablePoll_result() : success(0) {
  }

  virtual ~RemoteManager_DisablePoll_result() throw() {}

  bool success;

  _RemoteManager_DisablePoll_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_DisablePoll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_DisablePoll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_DisablePoll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_DisablePoll_presult__isset {
  _RemoteManager_DisablePoll_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_DisablePoll_presult__isset;

class RemoteManager_DisablePoll_presult {
 public:


  virtual ~RemoteManager_DisablePoll_presult() throw() {}

  bool* success;

  _RemoteManager_DisablePoll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_isPolled_args__isset {
  _RemoteManager_isPolled_args__isset() : _valueId(false) {}
  bool _valueId;
} _RemoteManager_isPolled_args__isset;

class RemoteManager_isPolled_args {
 public:

  RemoteManager_isPolled_args() : _valueId(0) {
  }

  virtual ~RemoteManager_isPolled_args() throw() {}

  RemoteValueID _valueId;

  _RemoteManager_isPolled_args__isset __isset;

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_isPolled_args & rhs) const
  {
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_isPolled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_isPolled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_isPolled_pargs {
 public:


  virtual ~RemoteManager_isPolled_pargs() throw() {}

  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_isPolled_result__isset {
  _RemoteManager_isPolled_result__isset() : success(false) {}
  bool success;
} _RemoteManager_isPolled_result__isset;

class RemoteManager_isPolled_result {
 public:

  RemoteManager_isPolled_result() : success(0) {
  }

  virtual ~RemoteManager_isPolled_result() throw() {}

  bool success;

  _RemoteManager_isPolled_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_isPolled_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_isPolled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_isPolled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_isPolled_presult__isset {
  _RemoteManager_isPolled_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_isPolled_presult__isset;

class RemoteManager_isPolled_presult {
 public:


  virtual ~RemoteManager_isPolled_presult() throw() {}

  bool* success;

  _RemoteManager_isPolled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RefreshNodeInfo_args__isset {
  _RemoteManager_RefreshNodeInfo_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_RefreshNodeInfo_args__isset;

class RemoteManager_RefreshNodeInfo_args {
 public:

  RemoteManager_RefreshNodeInfo_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_RefreshNodeInfo_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_RefreshNodeInfo_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_RefreshNodeInfo_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RefreshNodeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RefreshNodeInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RefreshNodeInfo_pargs {
 public:


  virtual ~RemoteManager_RefreshNodeInfo_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RefreshNodeInfo_result__isset {
  _RemoteManager_RefreshNodeInfo_result__isset() : success(false) {}
  bool success;
} _RemoteManager_RefreshNodeInfo_result__isset;

class RemoteManager_RefreshNodeInfo_result {
 public:

  RemoteManager_RefreshNodeInfo_result() : success(0) {
  }

  virtual ~RemoteManager_RefreshNodeInfo_result() throw() {}

  bool success;

  _RemoteManager_RefreshNodeInfo_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_RefreshNodeInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RefreshNodeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RefreshNodeInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RefreshNodeInfo_presult__isset {
  _RemoteManager_RefreshNodeInfo_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_RefreshNodeInfo_presult__isset;

class RemoteManager_RefreshNodeInfo_presult {
 public:


  virtual ~RemoteManager_RefreshNodeInfo_presult() throw() {}

  bool* success;

  _RemoteManager_RefreshNodeInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RequestNodeState_args__isset {
  _RemoteManager_RequestNodeState_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_RequestNodeState_args__isset;

class RemoteManager_RequestNodeState_args {
 public:

  RemoteManager_RequestNodeState_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_RequestNodeState_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_RequestNodeState_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_RequestNodeState_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RequestNodeState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestNodeState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestNodeState_pargs {
 public:


  virtual ~RemoteManager_RequestNodeState_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RequestNodeState_result__isset {
  _RemoteManager_RequestNodeState_result__isset() : success(false) {}
  bool success;
} _RemoteManager_RequestNodeState_result__isset;

class RemoteManager_RequestNodeState_result {
 public:

  RemoteManager_RequestNodeState_result() : success(0) {
  }

  virtual ~RemoteManager_RequestNodeState_result() throw() {}

  bool success;

  _RemoteManager_RequestNodeState_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_RequestNodeState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RequestNodeState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestNodeState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RequestNodeState_presult__isset {
  _RemoteManager_RequestNodeState_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_RequestNodeState_presult__isset;

class RemoteManager_RequestNodeState_presult {
 public:


  virtual ~RemoteManager_RequestNodeState_presult() throw() {}

  bool* success;

  _RemoteManager_RequestNodeState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RequestNodeDynamic_args__isset {
  _RemoteManager_RequestNodeDynamic_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_RequestNodeDynamic_args__isset;

class RemoteManager_RequestNodeDynamic_args {
 public:

  RemoteManager_RequestNodeDynamic_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_RequestNodeDynamic_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_RequestNodeDynamic_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_RequestNodeDynamic_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RequestNodeDynamic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestNodeDynamic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestNodeDynamic_pargs {
 public:


  virtual ~RemoteManager_RequestNodeDynamic_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RequestNodeDynamic_result__isset {
  _RemoteManager_RequestNodeDynamic_result__isset() : success(false) {}
  bool success;
} _RemoteManager_RequestNodeDynamic_result__isset;

class RemoteManager_RequestNodeDynamic_result {
 public:

  RemoteManager_RequestNodeDynamic_result() : success(0) {
  }

  virtual ~RemoteManager_RequestNodeDynamic_result() throw() {}

  bool success;

  _RemoteManager_RequestNodeDynamic_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_RequestNodeDynamic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RequestNodeDynamic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestNodeDynamic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RequestNodeDynamic_presult__isset {
  _RemoteManager_RequestNodeDynamic_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_RequestNodeDynamic_presult__isset;

class RemoteManager_RequestNodeDynamic_presult {
 public:


  virtual ~RemoteManager_RequestNodeDynamic_presult() throw() {}

  bool* success;

  _RemoteManager_RequestNodeDynamic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsNodeListeningDevice_args__isset {
  _RemoteManager_IsNodeListeningDevice_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_IsNodeListeningDevice_args__isset;

class RemoteManager_IsNodeListeningDevice_args {
 public:

  RemoteManager_IsNodeListeningDevice_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_IsNodeListeningDevice_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_IsNodeListeningDevice_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_IsNodeListeningDevice_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsNodeListeningDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsNodeListeningDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsNodeListeningDevice_pargs {
 public:


  virtual ~RemoteManager_IsNodeListeningDevice_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsNodeListeningDevice_result__isset {
  _RemoteManager_IsNodeListeningDevice_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsNodeListeningDevice_result__isset;

class RemoteManager_IsNodeListeningDevice_result {
 public:

  RemoteManager_IsNodeListeningDevice_result() : success(0) {
  }

  virtual ~RemoteManager_IsNodeListeningDevice_result() throw() {}

  bool success;

  _RemoteManager_IsNodeListeningDevice_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsNodeListeningDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsNodeListeningDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsNodeListeningDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsNodeListeningDevice_presult__isset {
  _RemoteManager_IsNodeListeningDevice_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsNodeListeningDevice_presult__isset;

class RemoteManager_IsNodeListeningDevice_presult {
 public:


  virtual ~RemoteManager_IsNodeListeningDevice_presult() throw() {}

  bool* success;

  _RemoteManager_IsNodeListeningDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsNodeRoutingDevice_args__isset {
  _RemoteManager_IsNodeRoutingDevice_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_IsNodeRoutingDevice_args__isset;

class RemoteManager_IsNodeRoutingDevice_args {
 public:

  RemoteManager_IsNodeRoutingDevice_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_IsNodeRoutingDevice_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_IsNodeRoutingDevice_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_IsNodeRoutingDevice_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsNodeRoutingDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsNodeRoutingDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsNodeRoutingDevice_pargs {
 public:


  virtual ~RemoteManager_IsNodeRoutingDevice_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsNodeRoutingDevice_result__isset {
  _RemoteManager_IsNodeRoutingDevice_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsNodeRoutingDevice_result__isset;

class RemoteManager_IsNodeRoutingDevice_result {
 public:

  RemoteManager_IsNodeRoutingDevice_result() : success(0) {
  }

  virtual ~RemoteManager_IsNodeRoutingDevice_result() throw() {}

  bool success;

  _RemoteManager_IsNodeRoutingDevice_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsNodeRoutingDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsNodeRoutingDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsNodeRoutingDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsNodeRoutingDevice_presult__isset {
  _RemoteManager_IsNodeRoutingDevice_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsNodeRoutingDevice_presult__isset;

class RemoteManager_IsNodeRoutingDevice_presult {
 public:


  virtual ~RemoteManager_IsNodeRoutingDevice_presult() throw() {}

  bool* success;

  _RemoteManager_IsNodeRoutingDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeMaxBaudRate_args__isset {
  _RemoteManager_GetNodeMaxBaudRate_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeMaxBaudRate_args__isset;

class RemoteManager_GetNodeMaxBaudRate_args {
 public:

  RemoteManager_GetNodeMaxBaudRate_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeMaxBaudRate_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeMaxBaudRate_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeMaxBaudRate_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeMaxBaudRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeMaxBaudRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeMaxBaudRate_pargs {
 public:


  virtual ~RemoteManager_GetNodeMaxBaudRate_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeMaxBaudRate_result__isset {
  _RemoteManager_GetNodeMaxBaudRate_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeMaxBaudRate_result__isset;

class RemoteManager_GetNodeMaxBaudRate_result {
 public:

  RemoteManager_GetNodeMaxBaudRate_result() : success(0) {
  }

  virtual ~RemoteManager_GetNodeMaxBaudRate_result() throw() {}

  int32_t success;

  _RemoteManager_GetNodeMaxBaudRate_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeMaxBaudRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeMaxBaudRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeMaxBaudRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeMaxBaudRate_presult__isset {
  _RemoteManager_GetNodeMaxBaudRate_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeMaxBaudRate_presult__isset;

class RemoteManager_GetNodeMaxBaudRate_presult {
 public:


  virtual ~RemoteManager_GetNodeMaxBaudRate_presult() throw() {}

  int32_t* success;

  _RemoteManager_GetNodeMaxBaudRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeVersion_args__isset {
  _RemoteManager_GetNodeVersion_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeVersion_args__isset;

class RemoteManager_GetNodeVersion_args {
 public:

  RemoteManager_GetNodeVersion_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeVersion_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeVersion_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeVersion_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeVersion_pargs {
 public:


  virtual ~RemoteManager_GetNodeVersion_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeVersion_result__isset {
  _RemoteManager_GetNodeVersion_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeVersion_result__isset;

class RemoteManager_GetNodeVersion_result {
 public:

  RemoteManager_GetNodeVersion_result() : success(0) {
  }

  virtual ~RemoteManager_GetNodeVersion_result() throw() {}

  int8_t success;

  _RemoteManager_GetNodeVersion_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeVersion_presult__isset {
  _RemoteManager_GetNodeVersion_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeVersion_presult__isset;

class RemoteManager_GetNodeVersion_presult {
 public:


  virtual ~RemoteManager_GetNodeVersion_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNodeVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeSecurity_args__isset {
  _RemoteManager_GetNodeSecurity_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeSecurity_args__isset;

class RemoteManager_GetNodeSecurity_args {
 public:

  RemoteManager_GetNodeSecurity_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeSecurity_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeSecurity_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeSecurity_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeSecurity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeSecurity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeSecurity_pargs {
 public:


  virtual ~RemoteManager_GetNodeSecurity_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeSecurity_result__isset {
  _RemoteManager_GetNodeSecurity_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeSecurity_result__isset;

class RemoteManager_GetNodeSecurity_result {
 public:

  RemoteManager_GetNodeSecurity_result() : success(0) {
  }

  virtual ~RemoteManager_GetNodeSecurity_result() throw() {}

  int8_t success;

  _RemoteManager_GetNodeSecurity_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeSecurity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeSecurity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeSecurity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeSecurity_presult__isset {
  _RemoteManager_GetNodeSecurity_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeSecurity_presult__isset;

class RemoteManager_GetNodeSecurity_presult {
 public:


  virtual ~RemoteManager_GetNodeSecurity_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNodeSecurity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeBasic_args__isset {
  _RemoteManager_GetNodeBasic_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeBasic_args__isset;

class RemoteManager_GetNodeBasic_args {
 public:

  RemoteManager_GetNodeBasic_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeBasic_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeBasic_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeBasic_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeBasic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeBasic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeBasic_pargs {
 public:


  virtual ~RemoteManager_GetNodeBasic_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeBasic_result__isset {
  _RemoteManager_GetNodeBasic_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeBasic_result__isset;

class RemoteManager_GetNodeBasic_result {
 public:

  RemoteManager_GetNodeBasic_result() : success(0) {
  }

  virtual ~RemoteManager_GetNodeBasic_result() throw() {}

  int8_t success;

  _RemoteManager_GetNodeBasic_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeBasic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeBasic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeBasic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeBasic_presult__isset {
  _RemoteManager_GetNodeBasic_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeBasic_presult__isset;

class RemoteManager_GetNodeBasic_presult {
 public:


  virtual ~RemoteManager_GetNodeBasic_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNodeBasic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeGeneric_args__isset {
  _RemoteManager_GetNodeGeneric_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeGeneric_args__isset;

class RemoteManager_GetNodeGeneric_args {
 public:

  RemoteManager_GetNodeGeneric_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeGeneric_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeGeneric_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeGeneric_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeGeneric_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeGeneric_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeGeneric_pargs {
 public:


  virtual ~RemoteManager_GetNodeGeneric_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeGeneric_result__isset {
  _RemoteManager_GetNodeGeneric_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeGeneric_result__isset;

class RemoteManager_GetNodeGeneric_result {
 public:

  RemoteManager_GetNodeGeneric_result() : success(0) {
  }

  virtual ~RemoteManager_GetNodeGeneric_result() throw() {}

  int8_t success;

  _RemoteManager_GetNodeGeneric_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeGeneric_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeGeneric_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeGeneric_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeGeneric_presult__isset {
  _RemoteManager_GetNodeGeneric_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeGeneric_presult__isset;

class RemoteManager_GetNodeGeneric_presult {
 public:


  virtual ~RemoteManager_GetNodeGeneric_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNodeGeneric_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeSpecific_args__isset {
  _RemoteManager_GetNodeSpecific_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeSpecific_args__isset;

class RemoteManager_GetNodeSpecific_args {
 public:

  RemoteManager_GetNodeSpecific_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeSpecific_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeSpecific_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeSpecific_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeSpecific_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeSpecific_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeSpecific_pargs {
 public:


  virtual ~RemoteManager_GetNodeSpecific_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeSpecific_result__isset {
  _RemoteManager_GetNodeSpecific_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeSpecific_result__isset;

class RemoteManager_GetNodeSpecific_result {
 public:

  RemoteManager_GetNodeSpecific_result() : success(0) {
  }

  virtual ~RemoteManager_GetNodeSpecific_result() throw() {}

  int8_t success;

  _RemoteManager_GetNodeSpecific_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeSpecific_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeSpecific_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeSpecific_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeSpecific_presult__isset {
  _RemoteManager_GetNodeSpecific_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeSpecific_presult__isset;

class RemoteManager_GetNodeSpecific_presult {
 public:


  virtual ~RemoteManager_GetNodeSpecific_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNodeSpecific_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeType_args__isset {
  _RemoteManager_GetNodeType_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeType_args__isset;

class RemoteManager_GetNodeType_args {
 public:

  RemoteManager_GetNodeType_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeType_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeType_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeType_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeType_pargs {
 public:


  virtual ~RemoteManager_GetNodeType_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeType_result__isset {
  _RemoteManager_GetNodeType_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeType_result__isset;

class RemoteManager_GetNodeType_result {
 public:

  RemoteManager_GetNodeType_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeType_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeType_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeType_presult__isset {
  _RemoteManager_GetNodeType_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeType_presult__isset;

class RemoteManager_GetNodeType_presult {
 public:


  virtual ~RemoteManager_GetNodeType_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeNeighbors_args__isset {
  _RemoteManager_GetNodeNeighbors_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeNeighbors_args__isset;

class RemoteManager_GetNodeNeighbors_args {
 public:

  RemoteManager_GetNodeNeighbors_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeNeighbors_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeNeighbors_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeNeighbors_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeNeighbors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeNeighbors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeNeighbors_pargs {
 public:


  virtual ~RemoteManager_GetNodeNeighbors_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeNeighbors_result__isset {
  _RemoteManager_GetNodeNeighbors_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeNeighbors_result__isset;

class RemoteManager_GetNodeNeighbors_result {
 public:

  RemoteManager_GetNodeNeighbors_result() {
  }

  virtual ~RemoteManager_GetNodeNeighbors_result() throw() {}

  UInt32_ListByte success;

  _RemoteManager_GetNodeNeighbors_result__isset __isset;

  void __set_success(const UInt32_ListByte& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeNeighbors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeNeighbors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeNeighbors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeNeighbors_presult__isset {
  _RemoteManager_GetNodeNeighbors_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeNeighbors_presult__isset;

class RemoteManager_GetNodeNeighbors_presult {
 public:


  virtual ~RemoteManager_GetNodeNeighbors_presult() throw() {}

  UInt32_ListByte* success;

  _RemoteManager_GetNodeNeighbors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeManufacturerName_args__isset {
  _RemoteManager_GetNodeManufacturerName_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeManufacturerName_args__isset;

class RemoteManager_GetNodeManufacturerName_args {
 public:

  RemoteManager_GetNodeManufacturerName_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeManufacturerName_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeManufacturerName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeManufacturerName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeManufacturerName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeManufacturerName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeManufacturerName_pargs {
 public:


  virtual ~RemoteManager_GetNodeManufacturerName_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeManufacturerName_result__isset {
  _RemoteManager_GetNodeManufacturerName_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeManufacturerName_result__isset;

class RemoteManager_GetNodeManufacturerName_result {
 public:

  RemoteManager_GetNodeManufacturerName_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeManufacturerName_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeManufacturerName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeManufacturerName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeManufacturerName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeManufacturerName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeManufacturerName_presult__isset {
  _RemoteManager_GetNodeManufacturerName_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeManufacturerName_presult__isset;

class RemoteManager_GetNodeManufacturerName_presult {
 public:


  virtual ~RemoteManager_GetNodeManufacturerName_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeManufacturerName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeProductName_args__isset {
  _RemoteManager_GetNodeProductName_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeProductName_args__isset;

class RemoteManager_GetNodeProductName_args {
 public:

  RemoteManager_GetNodeProductName_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeProductName_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeProductName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeProductName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeProductName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeProductName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeProductName_pargs {
 public:


  virtual ~RemoteManager_GetNodeProductName_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeProductName_result__isset {
  _RemoteManager_GetNodeProductName_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeProductName_result__isset;

class RemoteManager_GetNodeProductName_result {
 public:

  RemoteManager_GetNodeProductName_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeProductName_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeProductName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeProductName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeProductName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeProductName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeProductName_presult__isset {
  _RemoteManager_GetNodeProductName_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeProductName_presult__isset;

class RemoteManager_GetNodeProductName_presult {
 public:


  virtual ~RemoteManager_GetNodeProductName_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeProductName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeName_args__isset {
  _RemoteManager_GetNodeName_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeName_args__isset;

class RemoteManager_GetNodeName_args {
 public:

  RemoteManager_GetNodeName_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeName_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeName_pargs {
 public:


  virtual ~RemoteManager_GetNodeName_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeName_result__isset {
  _RemoteManager_GetNodeName_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeName_result__isset;

class RemoteManager_GetNodeName_result {
 public:

  RemoteManager_GetNodeName_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeName_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeName_presult__isset {
  _RemoteManager_GetNodeName_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeName_presult__isset;

class RemoteManager_GetNodeName_presult {
 public:


  virtual ~RemoteManager_GetNodeName_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeLocation_args__isset {
  _RemoteManager_GetNodeLocation_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeLocation_args__isset;

class RemoteManager_GetNodeLocation_args {
 public:

  RemoteManager_GetNodeLocation_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeLocation_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeLocation_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeLocation_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeLocation_pargs {
 public:


  virtual ~RemoteManager_GetNodeLocation_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeLocation_result__isset {
  _RemoteManager_GetNodeLocation_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeLocation_result__isset;

class RemoteManager_GetNodeLocation_result {
 public:

  RemoteManager_GetNodeLocation_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeLocation_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeLocation_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeLocation_presult__isset {
  _RemoteManager_GetNodeLocation_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeLocation_presult__isset;

class RemoteManager_GetNodeLocation_presult {
 public:


  virtual ~RemoteManager_GetNodeLocation_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeManufacturerId_args__isset {
  _RemoteManager_GetNodeManufacturerId_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeManufacturerId_args__isset;

class RemoteManager_GetNodeManufacturerId_args {
 public:

  RemoteManager_GetNodeManufacturerId_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeManufacturerId_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeManufacturerId_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeManufacturerId_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeManufacturerId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeManufacturerId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeManufacturerId_pargs {
 public:


  virtual ~RemoteManager_GetNodeManufacturerId_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeManufacturerId_result__isset {
  _RemoteManager_GetNodeManufacturerId_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeManufacturerId_result__isset;

class RemoteManager_GetNodeManufacturerId_result {
 public:

  RemoteManager_GetNodeManufacturerId_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeManufacturerId_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeManufacturerId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeManufacturerId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeManufacturerId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeManufacturerId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeManufacturerId_presult__isset {
  _RemoteManager_GetNodeManufacturerId_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeManufacturerId_presult__isset;

class RemoteManager_GetNodeManufacturerId_presult {
 public:


  virtual ~RemoteManager_GetNodeManufacturerId_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeManufacturerId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeProductType_args__isset {
  _RemoteManager_GetNodeProductType_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeProductType_args__isset;

class RemoteManager_GetNodeProductType_args {
 public:

  RemoteManager_GetNodeProductType_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeProductType_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeProductType_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeProductType_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeProductType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeProductType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeProductType_pargs {
 public:


  virtual ~RemoteManager_GetNodeProductType_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeProductType_result__isset {
  _RemoteManager_GetNodeProductType_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeProductType_result__isset;

class RemoteManager_GetNodeProductType_result {
 public:

  RemoteManager_GetNodeProductType_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeProductType_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeProductType_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeProductType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeProductType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeProductType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeProductType_presult__isset {
  _RemoteManager_GetNodeProductType_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeProductType_presult__isset;

class RemoteManager_GetNodeProductType_presult {
 public:


  virtual ~RemoteManager_GetNodeProductType_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeProductType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeProductId_args__isset {
  _RemoteManager_GetNodeProductId_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNodeProductId_args__isset;

class RemoteManager_GetNodeProductId_args {
 public:

  RemoteManager_GetNodeProductId_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNodeProductId_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNodeProductId_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNodeProductId_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeProductId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeProductId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeProductId_pargs {
 public:


  virtual ~RemoteManager_GetNodeProductId_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeProductId_result__isset {
  _RemoteManager_GetNodeProductId_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeProductId_result__isset;

class RemoteManager_GetNodeProductId_result {
 public:

  RemoteManager_GetNodeProductId_result() : success("") {
  }

  virtual ~RemoteManager_GetNodeProductId_result() throw() {}

  std::string success;

  _RemoteManager_GetNodeProductId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeProductId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeProductId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeProductId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeProductId_presult__isset {
  _RemoteManager_GetNodeProductId_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeProductId_presult__isset;

class RemoteManager_GetNodeProductId_presult {
 public:


  virtual ~RemoteManager_GetNodeProductId_presult() throw() {}

  std::string* success;

  _RemoteManager_GetNodeProductId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeManufacturerName_args__isset {
  _RemoteManager_SetNodeManufacturerName_args__isset() : _homeId(false), _nodeId(false), _manufacturerName(false) {}
  bool _homeId;
  bool _nodeId;
  bool _manufacturerName;
} _RemoteManager_SetNodeManufacturerName_args__isset;

class RemoteManager_SetNodeManufacturerName_args {
 public:

  RemoteManager_SetNodeManufacturerName_args() : _homeId(0), _nodeId(0), _manufacturerName("") {
  }

  virtual ~RemoteManager_SetNodeManufacturerName_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  std::string _manufacturerName;

  _RemoteManager_SetNodeManufacturerName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__manufacturerName(const std::string& val) {
    _manufacturerName = val;
  }

  bool operator == (const RemoteManager_SetNodeManufacturerName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_manufacturerName == rhs._manufacturerName))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeManufacturerName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeManufacturerName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeManufacturerName_pargs {
 public:


  virtual ~RemoteManager_SetNodeManufacturerName_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const std::string* _manufacturerName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeManufacturerName_result {
 public:

  RemoteManager_SetNodeManufacturerName_result() {
  }

  virtual ~RemoteManager_SetNodeManufacturerName_result() throw() {}


  bool operator == (const RemoteManager_SetNodeManufacturerName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeManufacturerName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeManufacturerName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeManufacturerName_presult {
 public:


  virtual ~RemoteManager_SetNodeManufacturerName_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeProductName_args__isset {
  _RemoteManager_SetNodeProductName_args__isset() : _homeId(false), _nodeId(false), _productName(false) {}
  bool _homeId;
  bool _nodeId;
  bool _productName;
} _RemoteManager_SetNodeProductName_args__isset;

class RemoteManager_SetNodeProductName_args {
 public:

  RemoteManager_SetNodeProductName_args() : _homeId(0), _nodeId(0), _productName("") {
  }

  virtual ~RemoteManager_SetNodeProductName_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  std::string _productName;

  _RemoteManager_SetNodeProductName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__productName(const std::string& val) {
    _productName = val;
  }

  bool operator == (const RemoteManager_SetNodeProductName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_productName == rhs._productName))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeProductName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeProductName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeProductName_pargs {
 public:


  virtual ~RemoteManager_SetNodeProductName_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const std::string* _productName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeProductName_result {
 public:

  RemoteManager_SetNodeProductName_result() {
  }

  virtual ~RemoteManager_SetNodeProductName_result() throw() {}


  bool operator == (const RemoteManager_SetNodeProductName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeProductName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeProductName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeProductName_presult {
 public:


  virtual ~RemoteManager_SetNodeProductName_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeName_args__isset {
  _RemoteManager_SetNodeName_args__isset() : _homeId(false), _nodeId(false), _nodeName(false) {}
  bool _homeId;
  bool _nodeId;
  bool _nodeName;
} _RemoteManager_SetNodeName_args__isset;

class RemoteManager_SetNodeName_args {
 public:

  RemoteManager_SetNodeName_args() : _homeId(0), _nodeId(0), _nodeName("") {
  }

  virtual ~RemoteManager_SetNodeName_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  std::string _nodeName;

  _RemoteManager_SetNodeName_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__nodeName(const std::string& val) {
    _nodeName = val;
  }

  bool operator == (const RemoteManager_SetNodeName_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_nodeName == rhs._nodeName))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeName_pargs {
 public:


  virtual ~RemoteManager_SetNodeName_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const std::string* _nodeName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeName_result {
 public:

  RemoteManager_SetNodeName_result() {
  }

  virtual ~RemoteManager_SetNodeName_result() throw() {}


  bool operator == (const RemoteManager_SetNodeName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeName_presult {
 public:


  virtual ~RemoteManager_SetNodeName_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeLocation_args__isset {
  _RemoteManager_SetNodeLocation_args__isset() : _homeId(false), _nodeId(false), _location(false) {}
  bool _homeId;
  bool _nodeId;
  bool _location;
} _RemoteManager_SetNodeLocation_args__isset;

class RemoteManager_SetNodeLocation_args {
 public:

  RemoteManager_SetNodeLocation_args() : _homeId(0), _nodeId(0), _location("") {
  }

  virtual ~RemoteManager_SetNodeLocation_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  std::string _location;

  _RemoteManager_SetNodeLocation_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__location(const std::string& val) {
    _location = val;
  }

  bool operator == (const RemoteManager_SetNodeLocation_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_location == rhs._location))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeLocation_pargs {
 public:


  virtual ~RemoteManager_SetNodeLocation_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const std::string* _location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeLocation_result {
 public:

  RemoteManager_SetNodeLocation_result() {
  }

  virtual ~RemoteManager_SetNodeLocation_result() throw() {}


  bool operator == (const RemoteManager_SetNodeLocation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeLocation_presult {
 public:


  virtual ~RemoteManager_SetNodeLocation_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeOn_args__isset {
  _RemoteManager_SetNodeOn_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_SetNodeOn_args__isset;

class RemoteManager_SetNodeOn_args {
 public:

  RemoteManager_SetNodeOn_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_SetNodeOn_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_SetNodeOn_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_SetNodeOn_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeOn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeOn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeOn_pargs {
 public:


  virtual ~RemoteManager_SetNodeOn_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeOn_result {
 public:

  RemoteManager_SetNodeOn_result() {
  }

  virtual ~RemoteManager_SetNodeOn_result() throw() {}


  bool operator == (const RemoteManager_SetNodeOn_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeOn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeOn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeOn_presult {
 public:


  virtual ~RemoteManager_SetNodeOn_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeOff_args__isset {
  _RemoteManager_SetNodeOff_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_SetNodeOff_args__isset;

class RemoteManager_SetNodeOff_args {
 public:

  RemoteManager_SetNodeOff_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_SetNodeOff_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_SetNodeOff_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_SetNodeOff_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeOff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeOff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeOff_pargs {
 public:


  virtual ~RemoteManager_SetNodeOff_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeOff_result {
 public:

  RemoteManager_SetNodeOff_result() {
  }

  virtual ~RemoteManager_SetNodeOff_result() throw() {}


  bool operator == (const RemoteManager_SetNodeOff_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeOff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeOff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeOff_presult {
 public:


  virtual ~RemoteManager_SetNodeOff_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetNodeLevel_args__isset {
  _RemoteManager_SetNodeLevel_args__isset() : _homeId(false), _nodeId(false), _level(false) {}
  bool _homeId;
  bool _nodeId;
  bool _level;
} _RemoteManager_SetNodeLevel_args__isset;

class RemoteManager_SetNodeLevel_args {
 public:

  RemoteManager_SetNodeLevel_args() : _homeId(0), _nodeId(0), _level(0) {
  }

  virtual ~RemoteManager_SetNodeLevel_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _level;

  _RemoteManager_SetNodeLevel_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__level(const int8_t val) {
    _level = val;
  }

  bool operator == (const RemoteManager_SetNodeLevel_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_level == rhs._level))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetNodeLevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeLevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeLevel_pargs {
 public:


  virtual ~RemoteManager_SetNodeLevel_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeLevel_result {
 public:

  RemoteManager_SetNodeLevel_result() {
  }

  virtual ~RemoteManager_SetNodeLevel_result() throw() {}


  bool operator == (const RemoteManager_SetNodeLevel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetNodeLevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetNodeLevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetNodeLevel_presult {
 public:


  virtual ~RemoteManager_SetNodeLevel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsNodeInfoReceived_args__isset {
  _RemoteManager_IsNodeInfoReceived_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_IsNodeInfoReceived_args__isset;

class RemoteManager_IsNodeInfoReceived_args {
 public:

  RemoteManager_IsNodeInfoReceived_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_IsNodeInfoReceived_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_IsNodeInfoReceived_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_IsNodeInfoReceived_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsNodeInfoReceived_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsNodeInfoReceived_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsNodeInfoReceived_pargs {
 public:


  virtual ~RemoteManager_IsNodeInfoReceived_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsNodeInfoReceived_result__isset {
  _RemoteManager_IsNodeInfoReceived_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsNodeInfoReceived_result__isset;

class RemoteManager_IsNodeInfoReceived_result {
 public:

  RemoteManager_IsNodeInfoReceived_result() : success(0) {
  }

  virtual ~RemoteManager_IsNodeInfoReceived_result() throw() {}

  bool success;

  _RemoteManager_IsNodeInfoReceived_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsNodeInfoReceived_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsNodeInfoReceived_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsNodeInfoReceived_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsNodeInfoReceived_presult__isset {
  _RemoteManager_IsNodeInfoReceived_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsNodeInfoReceived_presult__isset;

class RemoteManager_IsNodeInfoReceived_presult {
 public:


  virtual ~RemoteManager_IsNodeInfoReceived_presult() throw() {}

  bool* success;

  _RemoteManager_IsNodeInfoReceived_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNodeClassInformation_args__isset {
  _RemoteManager_GetNodeClassInformation_args__isset() : _homeId(false), _nodeId(false), _commandClassId(false) {}
  bool _homeId;
  bool _nodeId;
  bool _commandClassId;
} _RemoteManager_GetNodeClassInformation_args__isset;

class RemoteManager_GetNodeClassInformation_args {
 public:

  RemoteManager_GetNodeClassInformation_args() : _homeId(0), _nodeId(0), _commandClassId(0) {
  }

  virtual ~RemoteManager_GetNodeClassInformation_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _commandClassId;

  _RemoteManager_GetNodeClassInformation_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__commandClassId(const int8_t val) {
    _commandClassId = val;
  }

  bool operator == (const RemoteManager_GetNodeClassInformation_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_commandClassId == rhs._commandClassId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeClassInformation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeClassInformation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNodeClassInformation_pargs {
 public:


  virtual ~RemoteManager_GetNodeClassInformation_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _commandClassId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeClassInformation_result__isset {
  _RemoteManager_GetNodeClassInformation_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeClassInformation_result__isset;

class RemoteManager_GetNodeClassInformation_result {
 public:

  RemoteManager_GetNodeClassInformation_result() {
  }

  virtual ~RemoteManager_GetNodeClassInformation_result() throw() {}

  Bool_GetNodeClassInformation success;

  _RemoteManager_GetNodeClassInformation_result__isset __isset;

  void __set_success(const Bool_GetNodeClassInformation& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNodeClassInformation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNodeClassInformation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNodeClassInformation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNodeClassInformation_presult__isset {
  _RemoteManager_GetNodeClassInformation_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNodeClassInformation_presult__isset;

class RemoteManager_GetNodeClassInformation_presult {
 public:


  virtual ~RemoteManager_GetNodeClassInformation_presult() throw() {}

  Bool_GetNodeClassInformation* success;

  _RemoteManager_GetNodeClassInformation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueLabel_args__isset {
  _RemoteManager_GetValueLabel_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueLabel_args__isset;

class RemoteManager_GetValueLabel_args {
 public:

  RemoteManager_GetValueLabel_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueLabel_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueLabel_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueLabel_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueLabel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueLabel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueLabel_pargs {
 public:


  virtual ~RemoteManager_GetValueLabel_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueLabel_result__isset {
  _RemoteManager_GetValueLabel_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueLabel_result__isset;

class RemoteManager_GetValueLabel_result {
 public:

  RemoteManager_GetValueLabel_result() : success("") {
  }

  virtual ~RemoteManager_GetValueLabel_result() throw() {}

  std::string success;

  _RemoteManager_GetValueLabel_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueLabel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueLabel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueLabel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueLabel_presult__isset {
  _RemoteManager_GetValueLabel_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueLabel_presult__isset;

class RemoteManager_GetValueLabel_presult {
 public:


  virtual ~RemoteManager_GetValueLabel_presult() throw() {}

  std::string* success;

  _RemoteManager_GetValueLabel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValueLabel_args__isset {
  _RemoteManager_SetValueLabel_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValueLabel_args__isset;

class RemoteManager_SetValueLabel_args {
 public:

  RemoteManager_SetValueLabel_args() : _id(0), _value("") {
  }

  virtual ~RemoteManager_SetValueLabel_args() throw() {}

  RemoteValueID _id;
  std::string _value;

  _RemoteManager_SetValueLabel_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValueLabel_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValueLabel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueLabel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueLabel_pargs {
 public:


  virtual ~RemoteManager_SetValueLabel_pargs() throw() {}

  const RemoteValueID* _id;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueLabel_result {
 public:

  RemoteManager_SetValueLabel_result() {
  }

  virtual ~RemoteManager_SetValueLabel_result() throw() {}


  bool operator == (const RemoteManager_SetValueLabel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetValueLabel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueLabel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueLabel_presult {
 public:


  virtual ~RemoteManager_SetValueLabel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueUnits_args__isset {
  _RemoteManager_GetValueUnits_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueUnits_args__isset;

class RemoteManager_GetValueUnits_args {
 public:

  RemoteManager_GetValueUnits_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueUnits_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueUnits_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueUnits_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueUnits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueUnits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueUnits_pargs {
 public:


  virtual ~RemoteManager_GetValueUnits_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueUnits_result__isset {
  _RemoteManager_GetValueUnits_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueUnits_result__isset;

class RemoteManager_GetValueUnits_result {
 public:

  RemoteManager_GetValueUnits_result() : success("") {
  }

  virtual ~RemoteManager_GetValueUnits_result() throw() {}

  std::string success;

  _RemoteManager_GetValueUnits_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueUnits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueUnits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueUnits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueUnits_presult__isset {
  _RemoteManager_GetValueUnits_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueUnits_presult__isset;

class RemoteManager_GetValueUnits_presult {
 public:


  virtual ~RemoteManager_GetValueUnits_presult() throw() {}

  std::string* success;

  _RemoteManager_GetValueUnits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValueUnits_args__isset {
  _RemoteManager_SetValueUnits_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValueUnits_args__isset;

class RemoteManager_SetValueUnits_args {
 public:

  RemoteManager_SetValueUnits_args() : _id(0), _value("") {
  }

  virtual ~RemoteManager_SetValueUnits_args() throw() {}

  RemoteValueID _id;
  std::string _value;

  _RemoteManager_SetValueUnits_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValueUnits_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValueUnits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueUnits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueUnits_pargs {
 public:


  virtual ~RemoteManager_SetValueUnits_pargs() throw() {}

  const RemoteValueID* _id;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueUnits_result {
 public:

  RemoteManager_SetValueUnits_result() {
  }

  virtual ~RemoteManager_SetValueUnits_result() throw() {}


  bool operator == (const RemoteManager_SetValueUnits_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetValueUnits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueUnits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueUnits_presult {
 public:


  virtual ~RemoteManager_SetValueUnits_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueHelp_args__isset {
  _RemoteManager_GetValueHelp_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueHelp_args__isset;

class RemoteManager_GetValueHelp_args {
 public:

  RemoteManager_GetValueHelp_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueHelp_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueHelp_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueHelp_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueHelp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueHelp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueHelp_pargs {
 public:


  virtual ~RemoteManager_GetValueHelp_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueHelp_result__isset {
  _RemoteManager_GetValueHelp_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueHelp_result__isset;

class RemoteManager_GetValueHelp_result {
 public:

  RemoteManager_GetValueHelp_result() : success("") {
  }

  virtual ~RemoteManager_GetValueHelp_result() throw() {}

  std::string success;

  _RemoteManager_GetValueHelp_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueHelp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueHelp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueHelp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueHelp_presult__isset {
  _RemoteManager_GetValueHelp_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueHelp_presult__isset;

class RemoteManager_GetValueHelp_presult {
 public:


  virtual ~RemoteManager_GetValueHelp_presult() throw() {}

  std::string* success;

  _RemoteManager_GetValueHelp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValueHelp_args__isset {
  _RemoteManager_SetValueHelp_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValueHelp_args__isset;

class RemoteManager_SetValueHelp_args {
 public:

  RemoteManager_SetValueHelp_args() : _id(0), _value("") {
  }

  virtual ~RemoteManager_SetValueHelp_args() throw() {}

  RemoteValueID _id;
  std::string _value;

  _RemoteManager_SetValueHelp_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValueHelp_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValueHelp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueHelp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueHelp_pargs {
 public:


  virtual ~RemoteManager_SetValueHelp_pargs() throw() {}

  const RemoteValueID* _id;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueHelp_result {
 public:

  RemoteManager_SetValueHelp_result() {
  }

  virtual ~RemoteManager_SetValueHelp_result() throw() {}


  bool operator == (const RemoteManager_SetValueHelp_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetValueHelp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueHelp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueHelp_presult {
 public:


  virtual ~RemoteManager_SetValueHelp_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueMin_args__isset {
  _RemoteManager_GetValueMin_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueMin_args__isset;

class RemoteManager_GetValueMin_args {
 public:

  RemoteManager_GetValueMin_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueMin_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueMin_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueMin_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueMin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueMin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueMin_pargs {
 public:


  virtual ~RemoteManager_GetValueMin_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueMin_result__isset {
  _RemoteManager_GetValueMin_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueMin_result__isset;

class RemoteManager_GetValueMin_result {
 public:

  RemoteManager_GetValueMin_result() : success(0) {
  }

  virtual ~RemoteManager_GetValueMin_result() throw() {}

  int32_t success;

  _RemoteManager_GetValueMin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueMin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueMin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueMin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueMin_presult__isset {
  _RemoteManager_GetValueMin_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueMin_presult__isset;

class RemoteManager_GetValueMin_presult {
 public:


  virtual ~RemoteManager_GetValueMin_presult() throw() {}

  int32_t* success;

  _RemoteManager_GetValueMin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueMax_args__isset {
  _RemoteManager_GetValueMax_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueMax_args__isset;

class RemoteManager_GetValueMax_args {
 public:

  RemoteManager_GetValueMax_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueMax_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueMax_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueMax_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueMax_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueMax_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueMax_pargs {
 public:


  virtual ~RemoteManager_GetValueMax_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueMax_result__isset {
  _RemoteManager_GetValueMax_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueMax_result__isset;

class RemoteManager_GetValueMax_result {
 public:

  RemoteManager_GetValueMax_result() : success(0) {
  }

  virtual ~RemoteManager_GetValueMax_result() throw() {}

  int32_t success;

  _RemoteManager_GetValueMax_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueMax_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueMax_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueMax_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueMax_presult__isset {
  _RemoteManager_GetValueMax_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueMax_presult__isset;

class RemoteManager_GetValueMax_presult {
 public:


  virtual ~RemoteManager_GetValueMax_presult() throw() {}

  int32_t* success;

  _RemoteManager_GetValueMax_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsValueReadOnly_args__isset {
  _RemoteManager_IsValueReadOnly_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_IsValueReadOnly_args__isset;

class RemoteManager_IsValueReadOnly_args {
 public:

  RemoteManager_IsValueReadOnly_args() : _id(0) {
  }

  virtual ~RemoteManager_IsValueReadOnly_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_IsValueReadOnly_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_IsValueReadOnly_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsValueReadOnly_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsValueReadOnly_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsValueReadOnly_pargs {
 public:


  virtual ~RemoteManager_IsValueReadOnly_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsValueReadOnly_result__isset {
  _RemoteManager_IsValueReadOnly_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsValueReadOnly_result__isset;

class RemoteManager_IsValueReadOnly_result {
 public:

  RemoteManager_IsValueReadOnly_result() : success(0) {
  }

  virtual ~RemoteManager_IsValueReadOnly_result() throw() {}

  bool success;

  _RemoteManager_IsValueReadOnly_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsValueReadOnly_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsValueReadOnly_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsValueReadOnly_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsValueReadOnly_presult__isset {
  _RemoteManager_IsValueReadOnly_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsValueReadOnly_presult__isset;

class RemoteManager_IsValueReadOnly_presult {
 public:


  virtual ~RemoteManager_IsValueReadOnly_presult() throw() {}

  bool* success;

  _RemoteManager_IsValueReadOnly_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsValueWriteOnly_args__isset {
  _RemoteManager_IsValueWriteOnly_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_IsValueWriteOnly_args__isset;

class RemoteManager_IsValueWriteOnly_args {
 public:

  RemoteManager_IsValueWriteOnly_args() : _id(0) {
  }

  virtual ~RemoteManager_IsValueWriteOnly_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_IsValueWriteOnly_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_IsValueWriteOnly_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsValueWriteOnly_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsValueWriteOnly_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsValueWriteOnly_pargs {
 public:


  virtual ~RemoteManager_IsValueWriteOnly_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsValueWriteOnly_result__isset {
  _RemoteManager_IsValueWriteOnly_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsValueWriteOnly_result__isset;

class RemoteManager_IsValueWriteOnly_result {
 public:

  RemoteManager_IsValueWriteOnly_result() : success(0) {
  }

  virtual ~RemoteManager_IsValueWriteOnly_result() throw() {}

  bool success;

  _RemoteManager_IsValueWriteOnly_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsValueWriteOnly_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsValueWriteOnly_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsValueWriteOnly_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsValueWriteOnly_presult__isset {
  _RemoteManager_IsValueWriteOnly_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsValueWriteOnly_presult__isset;

class RemoteManager_IsValueWriteOnly_presult {
 public:


  virtual ~RemoteManager_IsValueWriteOnly_presult() throw() {}

  bool* success;

  _RemoteManager_IsValueWriteOnly_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_IsValueSet_args__isset {
  _RemoteManager_IsValueSet_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_IsValueSet_args__isset;

class RemoteManager_IsValueSet_args {
 public:

  RemoteManager_IsValueSet_args() : _id(0) {
  }

  virtual ~RemoteManager_IsValueSet_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_IsValueSet_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_IsValueSet_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsValueSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsValueSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_IsValueSet_pargs {
 public:


  virtual ~RemoteManager_IsValueSet_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsValueSet_result__isset {
  _RemoteManager_IsValueSet_result__isset() : success(false) {}
  bool success;
} _RemoteManager_IsValueSet_result__isset;

class RemoteManager_IsValueSet_result {
 public:

  RemoteManager_IsValueSet_result() : success(0) {
  }

  virtual ~RemoteManager_IsValueSet_result() throw() {}

  bool success;

  _RemoteManager_IsValueSet_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_IsValueSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_IsValueSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_IsValueSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_IsValueSet_presult__isset {
  _RemoteManager_IsValueSet_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_IsValueSet_presult__isset;

class RemoteManager_IsValueSet_presult {
 public:


  virtual ~RemoteManager_IsValueSet_presult() throw() {}

  bool* success;

  _RemoteManager_IsValueSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueAsBool_args__isset {
  _RemoteManager_GetValueAsBool_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueAsBool_args__isset;

class RemoteManager_GetValueAsBool_args {
 public:

  RemoteManager_GetValueAsBool_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueAsBool_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueAsBool_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueAsBool_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueAsBool_pargs {
 public:


  virtual ~RemoteManager_GetValueAsBool_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsBool_result__isset {
  _RemoteManager_GetValueAsBool_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsBool_result__isset;

class RemoteManager_GetValueAsBool_result {
 public:

  RemoteManager_GetValueAsBool_result() {
  }

  virtual ~RemoteManager_GetValueAsBool_result() throw() {}

  Bool_Bool success;

  _RemoteManager_GetValueAsBool_result__isset __isset;

  void __set_success(const Bool_Bool& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueAsBool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsBool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsBool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsBool_presult__isset {
  _RemoteManager_GetValueAsBool_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsBool_presult__isset;

class RemoteManager_GetValueAsBool_presult {
 public:


  virtual ~RemoteManager_GetValueAsBool_presult() throw() {}

  Bool_Bool* success;

  _RemoteManager_GetValueAsBool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueAsByte_args__isset {
  _RemoteManager_GetValueAsByte_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueAsByte_args__isset;

class RemoteManager_GetValueAsByte_args {
 public:

  RemoteManager_GetValueAsByte_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueAsByte_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueAsByte_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueAsByte_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsByte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsByte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueAsByte_pargs {
 public:


  virtual ~RemoteManager_GetValueAsByte_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsByte_result__isset {
  _RemoteManager_GetValueAsByte_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsByte_result__isset;

class RemoteManager_GetValueAsByte_result {
 public:

  RemoteManager_GetValueAsByte_result() {
  }

  virtual ~RemoteManager_GetValueAsByte_result() throw() {}

  Bool_UInt8 success;

  _RemoteManager_GetValueAsByte_result__isset __isset;

  void __set_success(const Bool_UInt8& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueAsByte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsByte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsByte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsByte_presult__isset {
  _RemoteManager_GetValueAsByte_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsByte_presult__isset;

class RemoteManager_GetValueAsByte_presult {
 public:


  virtual ~RemoteManager_GetValueAsByte_presult() throw() {}

  Bool_UInt8* success;

  _RemoteManager_GetValueAsByte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueAsFloat_args__isset {
  _RemoteManager_GetValueAsFloat_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueAsFloat_args__isset;

class RemoteManager_GetValueAsFloat_args {
 public:

  RemoteManager_GetValueAsFloat_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueAsFloat_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueAsFloat_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueAsFloat_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsFloat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsFloat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueAsFloat_pargs {
 public:


  virtual ~RemoteManager_GetValueAsFloat_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsFloat_result__isset {
  _RemoteManager_GetValueAsFloat_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsFloat_result__isset;

class RemoteManager_GetValueAsFloat_result {
 public:

  RemoteManager_GetValueAsFloat_result() {
  }

  virtual ~RemoteManager_GetValueAsFloat_result() throw() {}

  Bool_Float success;

  _RemoteManager_GetValueAsFloat_result__isset __isset;

  void __set_success(const Bool_Float& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueAsFloat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsFloat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsFloat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsFloat_presult__isset {
  _RemoteManager_GetValueAsFloat_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsFloat_presult__isset;

class RemoteManager_GetValueAsFloat_presult {
 public:


  virtual ~RemoteManager_GetValueAsFloat_presult() throw() {}

  Bool_Float* success;

  _RemoteManager_GetValueAsFloat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueAsInt_args__isset {
  _RemoteManager_GetValueAsInt_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueAsInt_args__isset;

class RemoteManager_GetValueAsInt_args {
 public:

  RemoteManager_GetValueAsInt_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueAsInt_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueAsInt_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueAsInt_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueAsInt_pargs {
 public:


  virtual ~RemoteManager_GetValueAsInt_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsInt_result__isset {
  _RemoteManager_GetValueAsInt_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsInt_result__isset;

class RemoteManager_GetValueAsInt_result {
 public:

  RemoteManager_GetValueAsInt_result() {
  }

  virtual ~RemoteManager_GetValueAsInt_result() throw() {}

  Bool_Int success;

  _RemoteManager_GetValueAsInt_result__isset __isset;

  void __set_success(const Bool_Int& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueAsInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsInt_presult__isset {
  _RemoteManager_GetValueAsInt_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsInt_presult__isset;

class RemoteManager_GetValueAsInt_presult {
 public:


  virtual ~RemoteManager_GetValueAsInt_presult() throw() {}

  Bool_Int* success;

  _RemoteManager_GetValueAsInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueAsShort_args__isset {
  _RemoteManager_GetValueAsShort_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueAsShort_args__isset;

class RemoteManager_GetValueAsShort_args {
 public:

  RemoteManager_GetValueAsShort_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueAsShort_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueAsShort_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueAsShort_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsShort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsShort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueAsShort_pargs {
 public:


  virtual ~RemoteManager_GetValueAsShort_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsShort_result__isset {
  _RemoteManager_GetValueAsShort_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsShort_result__isset;

class RemoteManager_GetValueAsShort_result {
 public:

  RemoteManager_GetValueAsShort_result() {
  }

  virtual ~RemoteManager_GetValueAsShort_result() throw() {}

  Bool_Int16 success;

  _RemoteManager_GetValueAsShort_result__isset __isset;

  void __set_success(const Bool_Int16& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueAsShort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsShort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsShort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsShort_presult__isset {
  _RemoteManager_GetValueAsShort_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsShort_presult__isset;

class RemoteManager_GetValueAsShort_presult {
 public:


  virtual ~RemoteManager_GetValueAsShort_presult() throw() {}

  Bool_Int16* success;

  _RemoteManager_GetValueAsShort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueAsString_args__isset {
  _RemoteManager_GetValueAsString_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueAsString_args__isset;

class RemoteManager_GetValueAsString_args {
 public:

  RemoteManager_GetValueAsString_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueAsString_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueAsString_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueAsString_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueAsString_pargs {
 public:


  virtual ~RemoteManager_GetValueAsString_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsString_result__isset {
  _RemoteManager_GetValueAsString_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsString_result__isset;

class RemoteManager_GetValueAsString_result {
 public:

  RemoteManager_GetValueAsString_result() {
  }

  virtual ~RemoteManager_GetValueAsString_result() throw() {}

  Bool_String success;

  _RemoteManager_GetValueAsString_result__isset __isset;

  void __set_success(const Bool_String& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueAsString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueAsString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueAsString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueAsString_presult__isset {
  _RemoteManager_GetValueAsString_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueAsString_presult__isset;

class RemoteManager_GetValueAsString_presult {
 public:


  virtual ~RemoteManager_GetValueAsString_presult() throw() {}

  Bool_String* success;

  _RemoteManager_GetValueAsString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueListSelection_String_args__isset {
  _RemoteManager_GetValueListSelection_String_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueListSelection_String_args__isset;

class RemoteManager_GetValueListSelection_String_args {
 public:

  RemoteManager_GetValueListSelection_String_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueListSelection_String_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueListSelection_String_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueListSelection_String_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueListSelection_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueListSelection_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueListSelection_String_pargs {
 public:


  virtual ~RemoteManager_GetValueListSelection_String_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueListSelection_String_result__isset {
  _RemoteManager_GetValueListSelection_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueListSelection_String_result__isset;

class RemoteManager_GetValueListSelection_String_result {
 public:

  RemoteManager_GetValueListSelection_String_result() {
  }

  virtual ~RemoteManager_GetValueListSelection_String_result() throw() {}

  Bool_String success;

  _RemoteManager_GetValueListSelection_String_result__isset __isset;

  void __set_success(const Bool_String& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueListSelection_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueListSelection_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueListSelection_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueListSelection_String_presult__isset {
  _RemoteManager_GetValueListSelection_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueListSelection_String_presult__isset;

class RemoteManager_GetValueListSelection_String_presult {
 public:


  virtual ~RemoteManager_GetValueListSelection_String_presult() throw() {}

  Bool_String* success;

  _RemoteManager_GetValueListSelection_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueListSelection_Int32_args__isset {
  _RemoteManager_GetValueListSelection_Int32_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueListSelection_Int32_args__isset;

class RemoteManager_GetValueListSelection_Int32_args {
 public:

  RemoteManager_GetValueListSelection_Int32_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueListSelection_Int32_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueListSelection_Int32_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueListSelection_Int32_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueListSelection_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueListSelection_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueListSelection_Int32_pargs {
 public:


  virtual ~RemoteManager_GetValueListSelection_Int32_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueListSelection_Int32_result__isset {
  _RemoteManager_GetValueListSelection_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueListSelection_Int32_result__isset;

class RemoteManager_GetValueListSelection_Int32_result {
 public:

  RemoteManager_GetValueListSelection_Int32_result() {
  }

  virtual ~RemoteManager_GetValueListSelection_Int32_result() throw() {}

  Bool_Int success;

  _RemoteManager_GetValueListSelection_Int32_result__isset __isset;

  void __set_success(const Bool_Int& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueListSelection_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueListSelection_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueListSelection_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueListSelection_Int32_presult__isset {
  _RemoteManager_GetValueListSelection_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueListSelection_Int32_presult__isset;

class RemoteManager_GetValueListSelection_Int32_presult {
 public:


  virtual ~RemoteManager_GetValueListSelection_Int32_presult() throw() {}

  Bool_Int* success;

  _RemoteManager_GetValueListSelection_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueListItems_args__isset {
  _RemoteManager_GetValueListItems_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueListItems_args__isset;

class RemoteManager_GetValueListItems_args {
 public:

  RemoteManager_GetValueListItems_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueListItems_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueListItems_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueListItems_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueListItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueListItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueListItems_pargs {
 public:


  virtual ~RemoteManager_GetValueListItems_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueListItems_result__isset {
  _RemoteManager_GetValueListItems_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueListItems_result__isset;

class RemoteManager_GetValueListItems_result {
 public:

  RemoteManager_GetValueListItems_result() {
  }

  virtual ~RemoteManager_GetValueListItems_result() throw() {}

  Bool_ListString success;

  _RemoteManager_GetValueListItems_result__isset __isset;

  void __set_success(const Bool_ListString& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueListItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueListItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueListItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueListItems_presult__isset {
  _RemoteManager_GetValueListItems_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueListItems_presult__isset;

class RemoteManager_GetValueListItems_presult {
 public:


  virtual ~RemoteManager_GetValueListItems_presult() throw() {}

  Bool_ListString* success;

  _RemoteManager_GetValueListItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetValueFloatPrecision_args__isset {
  _RemoteManager_GetValueFloatPrecision_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetValueFloatPrecision_args__isset;

class RemoteManager_GetValueFloatPrecision_args {
 public:

  RemoteManager_GetValueFloatPrecision_args() : _id(0) {
  }

  virtual ~RemoteManager_GetValueFloatPrecision_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetValueFloatPrecision_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetValueFloatPrecision_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueFloatPrecision_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueFloatPrecision_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetValueFloatPrecision_pargs {
 public:


  virtual ~RemoteManager_GetValueFloatPrecision_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueFloatPrecision_result__isset {
  _RemoteManager_GetValueFloatPrecision_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueFloatPrecision_result__isset;

class RemoteManager_GetValueFloatPrecision_result {
 public:

  RemoteManager_GetValueFloatPrecision_result() {
  }

  virtual ~RemoteManager_GetValueFloatPrecision_result() throw() {}

  Bool_UInt8 success;

  _RemoteManager_GetValueFloatPrecision_result__isset __isset;

  void __set_success(const Bool_UInt8& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetValueFloatPrecision_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetValueFloatPrecision_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetValueFloatPrecision_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetValueFloatPrecision_presult__isset {
  _RemoteManager_GetValueFloatPrecision_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetValueFloatPrecision_presult__isset;

class RemoteManager_GetValueFloatPrecision_presult {
 public:


  virtual ~RemoteManager_GetValueFloatPrecision_presult() throw() {}

  Bool_UInt8* success;

  _RemoteManager_GetValueFloatPrecision_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValue_Bool_args__isset {
  _RemoteManager_SetValue_Bool_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValue_Bool_args__isset;

class RemoteManager_SetValue_Bool_args {
 public:

  RemoteManager_SetValue_Bool_args() : _id(0), _value(0) {
  }

  virtual ~RemoteManager_SetValue_Bool_args() throw() {}

  RemoteValueID _id;
  bool _value;

  _RemoteManager_SetValue_Bool_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const bool val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValue_Bool_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Bool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Bool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValue_Bool_pargs {
 public:


  virtual ~RemoteManager_SetValue_Bool_pargs() throw() {}

  const RemoteValueID* _id;
  const bool* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Bool_result__isset {
  _RemoteManager_SetValue_Bool_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Bool_result__isset;

class RemoteManager_SetValue_Bool_result {
 public:

  RemoteManager_SetValue_Bool_result() : success(0) {
  }

  virtual ~RemoteManager_SetValue_Bool_result() throw() {}

  bool success;

  _RemoteManager_SetValue_Bool_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValue_Bool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Bool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Bool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Bool_presult__isset {
  _RemoteManager_SetValue_Bool_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Bool_presult__isset;

class RemoteManager_SetValue_Bool_presult {
 public:


  virtual ~RemoteManager_SetValue_Bool_presult() throw() {}

  bool* success;

  _RemoteManager_SetValue_Bool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValue_UInt8_args__isset {
  _RemoteManager_SetValue_UInt8_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValue_UInt8_args__isset;

class RemoteManager_SetValue_UInt8_args {
 public:

  RemoteManager_SetValue_UInt8_args() : _id(0), _value(0) {
  }

  virtual ~RemoteManager_SetValue_UInt8_args() throw() {}

  RemoteValueID _id;
  int8_t _value;

  _RemoteManager_SetValue_UInt8_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const int8_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValue_UInt8_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_UInt8_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_UInt8_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValue_UInt8_pargs {
 public:


  virtual ~RemoteManager_SetValue_UInt8_pargs() throw() {}

  const RemoteValueID* _id;
  const int8_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_UInt8_result__isset {
  _RemoteManager_SetValue_UInt8_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_UInt8_result__isset;

class RemoteManager_SetValue_UInt8_result {
 public:

  RemoteManager_SetValue_UInt8_result() : success(0) {
  }

  virtual ~RemoteManager_SetValue_UInt8_result() throw() {}

  bool success;

  _RemoteManager_SetValue_UInt8_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValue_UInt8_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_UInt8_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_UInt8_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_UInt8_presult__isset {
  _RemoteManager_SetValue_UInt8_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_UInt8_presult__isset;

class RemoteManager_SetValue_UInt8_presult {
 public:


  virtual ~RemoteManager_SetValue_UInt8_presult() throw() {}

  bool* success;

  _RemoteManager_SetValue_UInt8_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValue_Float_args__isset {
  _RemoteManager_SetValue_Float_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValue_Float_args__isset;

class RemoteManager_SetValue_Float_args {
 public:

  RemoteManager_SetValue_Float_args() : _id(0), _value(0) {
  }

  virtual ~RemoteManager_SetValue_Float_args() throw() {}

  RemoteValueID _id;
  double _value;

  _RemoteManager_SetValue_Float_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const double val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValue_Float_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Float_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Float_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValue_Float_pargs {
 public:


  virtual ~RemoteManager_SetValue_Float_pargs() throw() {}

  const RemoteValueID* _id;
  const double* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Float_result__isset {
  _RemoteManager_SetValue_Float_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Float_result__isset;

class RemoteManager_SetValue_Float_result {
 public:

  RemoteManager_SetValue_Float_result() : success(0) {
  }

  virtual ~RemoteManager_SetValue_Float_result() throw() {}

  bool success;

  _RemoteManager_SetValue_Float_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValue_Float_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Float_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Float_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Float_presult__isset {
  _RemoteManager_SetValue_Float_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Float_presult__isset;

class RemoteManager_SetValue_Float_presult {
 public:


  virtual ~RemoteManager_SetValue_Float_presult() throw() {}

  bool* success;

  _RemoteManager_SetValue_Float_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValue_Int32_args__isset {
  _RemoteManager_SetValue_Int32_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValue_Int32_args__isset;

class RemoteManager_SetValue_Int32_args {
 public:

  RemoteManager_SetValue_Int32_args() : _id(0), _value(0) {
  }

  virtual ~RemoteManager_SetValue_Int32_args() throw() {}

  RemoteValueID _id;
  int32_t _value;

  _RemoteManager_SetValue_Int32_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const int32_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValue_Int32_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValue_Int32_pargs {
 public:


  virtual ~RemoteManager_SetValue_Int32_pargs() throw() {}

  const RemoteValueID* _id;
  const int32_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Int32_result__isset {
  _RemoteManager_SetValue_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Int32_result__isset;

class RemoteManager_SetValue_Int32_result {
 public:

  RemoteManager_SetValue_Int32_result() : success(0) {
  }

  virtual ~RemoteManager_SetValue_Int32_result() throw() {}

  bool success;

  _RemoteManager_SetValue_Int32_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValue_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Int32_presult__isset {
  _RemoteManager_SetValue_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Int32_presult__isset;

class RemoteManager_SetValue_Int32_presult {
 public:


  virtual ~RemoteManager_SetValue_Int32_presult() throw() {}

  bool* success;

  _RemoteManager_SetValue_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValue_Int16_args__isset {
  _RemoteManager_SetValue_Int16_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValue_Int16_args__isset;

class RemoteManager_SetValue_Int16_args {
 public:

  RemoteManager_SetValue_Int16_args() : _id(0), _value(0) {
  }

  virtual ~RemoteManager_SetValue_Int16_args() throw() {}

  RemoteValueID _id;
  int16_t _value;

  _RemoteManager_SetValue_Int16_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const int16_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValue_Int16_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Int16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Int16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValue_Int16_pargs {
 public:


  virtual ~RemoteManager_SetValue_Int16_pargs() throw() {}

  const RemoteValueID* _id;
  const int16_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Int16_result__isset {
  _RemoteManager_SetValue_Int16_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Int16_result__isset;

class RemoteManager_SetValue_Int16_result {
 public:

  RemoteManager_SetValue_Int16_result() : success(0) {
  }

  virtual ~RemoteManager_SetValue_Int16_result() throw() {}

  bool success;

  _RemoteManager_SetValue_Int16_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValue_Int16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_Int16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_Int16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_Int16_presult__isset {
  _RemoteManager_SetValue_Int16_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_Int16_presult__isset;

class RemoteManager_SetValue_Int16_presult {
 public:


  virtual ~RemoteManager_SetValue_Int16_presult() throw() {}

  bool* success;

  _RemoteManager_SetValue_Int16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValue_String_args__isset {
  _RemoteManager_SetValue_String_args__isset() : _id(false), _value(false) {}
  bool _id;
  bool _value;
} _RemoteManager_SetValue_String_args__isset;

class RemoteManager_SetValue_String_args {
 public:

  RemoteManager_SetValue_String_args() : _id(0), _value("") {
  }

  virtual ~RemoteManager_SetValue_String_args() throw() {}

  RemoteValueID _id;
  std::string _value;

  _RemoteManager_SetValue_String_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetValue_String_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValue_String_pargs {
 public:


  virtual ~RemoteManager_SetValue_String_pargs() throw() {}

  const RemoteValueID* _id;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_String_result__isset {
  _RemoteManager_SetValue_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_String_result__isset;

class RemoteManager_SetValue_String_result {
 public:

  RemoteManager_SetValue_String_result() : success(0) {
  }

  virtual ~RemoteManager_SetValue_String_result() throw() {}

  bool success;

  _RemoteManager_SetValue_String_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValue_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValue_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValue_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValue_String_presult__isset {
  _RemoteManager_SetValue_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValue_String_presult__isset;

class RemoteManager_SetValue_String_presult {
 public:


  virtual ~RemoteManager_SetValue_String_presult() throw() {}

  bool* success;

  _RemoteManager_SetValue_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetValueListSelection_args__isset {
  _RemoteManager_SetValueListSelection_args__isset() : _id(false), _selectedItem(false) {}
  bool _id;
  bool _selectedItem;
} _RemoteManager_SetValueListSelection_args__isset;

class RemoteManager_SetValueListSelection_args {
 public:

  RemoteManager_SetValueListSelection_args() : _id(0), _selectedItem("") {
  }

  virtual ~RemoteManager_SetValueListSelection_args() throw() {}

  RemoteValueID _id;
  std::string _selectedItem;

  _RemoteManager_SetValueListSelection_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__selectedItem(const std::string& val) {
    _selectedItem = val;
  }

  bool operator == (const RemoteManager_SetValueListSelection_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_selectedItem == rhs._selectedItem))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValueListSelection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueListSelection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetValueListSelection_pargs {
 public:


  virtual ~RemoteManager_SetValueListSelection_pargs() throw() {}

  const RemoteValueID* _id;
  const std::string* _selectedItem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValueListSelection_result__isset {
  _RemoteManager_SetValueListSelection_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValueListSelection_result__isset;

class RemoteManager_SetValueListSelection_result {
 public:

  RemoteManager_SetValueListSelection_result() : success(0) {
  }

  virtual ~RemoteManager_SetValueListSelection_result() throw() {}

  bool success;

  _RemoteManager_SetValueListSelection_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetValueListSelection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetValueListSelection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetValueListSelection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetValueListSelection_presult__isset {
  _RemoteManager_SetValueListSelection_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetValueListSelection_presult__isset;

class RemoteManager_SetValueListSelection_presult {
 public:


  virtual ~RemoteManager_SetValueListSelection_presult() throw() {}

  bool* success;

  _RemoteManager_SetValueListSelection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_PressButton_args__isset {
  _RemoteManager_PressButton_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_PressButton_args__isset;

class RemoteManager_PressButton_args {
 public:

  RemoteManager_PressButton_args() : _id(0) {
  }

  virtual ~RemoteManager_PressButton_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_PressButton_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_PressButton_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_PressButton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_PressButton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_PressButton_pargs {
 public:


  virtual ~RemoteManager_PressButton_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_PressButton_result__isset {
  _RemoteManager_PressButton_result__isset() : success(false) {}
  bool success;
} _RemoteManager_PressButton_result__isset;

class RemoteManager_PressButton_result {
 public:

  RemoteManager_PressButton_result() : success(0) {
  }

  virtual ~RemoteManager_PressButton_result() throw() {}

  bool success;

  _RemoteManager_PressButton_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_PressButton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_PressButton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_PressButton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_PressButton_presult__isset {
  _RemoteManager_PressButton_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_PressButton_presult__isset;

class RemoteManager_PressButton_presult {
 public:


  virtual ~RemoteManager_PressButton_presult() throw() {}

  bool* success;

  _RemoteManager_PressButton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_ReleaseButton_args__isset {
  _RemoteManager_ReleaseButton_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_ReleaseButton_args__isset;

class RemoteManager_ReleaseButton_args {
 public:

  RemoteManager_ReleaseButton_args() : _id(0) {
  }

  virtual ~RemoteManager_ReleaseButton_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_ReleaseButton_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_ReleaseButton_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_ReleaseButton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ReleaseButton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ReleaseButton_pargs {
 public:


  virtual ~RemoteManager_ReleaseButton_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_ReleaseButton_result__isset {
  _RemoteManager_ReleaseButton_result__isset() : success(false) {}
  bool success;
} _RemoteManager_ReleaseButton_result__isset;

class RemoteManager_ReleaseButton_result {
 public:

  RemoteManager_ReleaseButton_result() : success(0) {
  }

  virtual ~RemoteManager_ReleaseButton_result() throw() {}

  bool success;

  _RemoteManager_ReleaseButton_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_ReleaseButton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_ReleaseButton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ReleaseButton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_ReleaseButton_presult__isset {
  _RemoteManager_ReleaseButton_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_ReleaseButton_presult__isset;

class RemoteManager_ReleaseButton_presult {
 public:


  virtual ~RemoteManager_ReleaseButton_presult() throw() {}

  bool* success;

  _RemoteManager_ReleaseButton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNumSwitchPoints_args__isset {
  _RemoteManager_GetNumSwitchPoints_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_GetNumSwitchPoints_args__isset;

class RemoteManager_GetNumSwitchPoints_args {
 public:

  RemoteManager_GetNumSwitchPoints_args() : _id(0) {
  }

  virtual ~RemoteManager_GetNumSwitchPoints_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_GetNumSwitchPoints_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_GetNumSwitchPoints_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNumSwitchPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNumSwitchPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNumSwitchPoints_pargs {
 public:


  virtual ~RemoteManager_GetNumSwitchPoints_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNumSwitchPoints_result__isset {
  _RemoteManager_GetNumSwitchPoints_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNumSwitchPoints_result__isset;

class RemoteManager_GetNumSwitchPoints_result {
 public:

  RemoteManager_GetNumSwitchPoints_result() : success(0) {
  }

  virtual ~RemoteManager_GetNumSwitchPoints_result() throw() {}

  int8_t success;

  _RemoteManager_GetNumSwitchPoints_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNumSwitchPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNumSwitchPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNumSwitchPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNumSwitchPoints_presult__isset {
  _RemoteManager_GetNumSwitchPoints_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNumSwitchPoints_presult__isset;

class RemoteManager_GetNumSwitchPoints_presult {
 public:


  virtual ~RemoteManager_GetNumSwitchPoints_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNumSwitchPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSwitchPoint_args__isset {
  _RemoteManager_SetSwitchPoint_args__isset() : _id(false), _hours(false), _minutes(false), _setback(false) {}
  bool _id;
  bool _hours;
  bool _minutes;
  bool _setback;
} _RemoteManager_SetSwitchPoint_args__isset;

class RemoteManager_SetSwitchPoint_args {
 public:

  RemoteManager_SetSwitchPoint_args() : _id(0), _hours(0), _minutes(0), _setback(0) {
  }

  virtual ~RemoteManager_SetSwitchPoint_args() throw() {}

  RemoteValueID _id;
  int8_t _hours;
  int8_t _minutes;
  int8_t _setback;

  _RemoteManager_SetSwitchPoint_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__hours(const int8_t val) {
    _hours = val;
  }

  void __set__minutes(const int8_t val) {
    _minutes = val;
  }

  void __set__setback(const int8_t val) {
    _setback = val;
  }

  bool operator == (const RemoteManager_SetSwitchPoint_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_hours == rhs._hours))
      return false;
    if (!(_minutes == rhs._minutes))
      return false;
    if (!(_setback == rhs._setback))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSwitchPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSwitchPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSwitchPoint_pargs {
 public:


  virtual ~RemoteManager_SetSwitchPoint_pargs() throw() {}

  const RemoteValueID* _id;
  const int8_t* _hours;
  const int8_t* _minutes;
  const int8_t* _setback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSwitchPoint_result__isset {
  _RemoteManager_SetSwitchPoint_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSwitchPoint_result__isset;

class RemoteManager_SetSwitchPoint_result {
 public:

  RemoteManager_SetSwitchPoint_result() : success(0) {
  }

  virtual ~RemoteManager_SetSwitchPoint_result() throw() {}

  bool success;

  _RemoteManager_SetSwitchPoint_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSwitchPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSwitchPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSwitchPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSwitchPoint_presult__isset {
  _RemoteManager_SetSwitchPoint_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSwitchPoint_presult__isset;

class RemoteManager_SetSwitchPoint_presult {
 public:


  virtual ~RemoteManager_SetSwitchPoint_presult() throw() {}

  bool* success;

  _RemoteManager_SetSwitchPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RemoveSwitchPoint_args__isset {
  _RemoteManager_RemoveSwitchPoint_args__isset() : _id(false), _hours(false), _minutes(false) {}
  bool _id;
  bool _hours;
  bool _minutes;
} _RemoteManager_RemoveSwitchPoint_args__isset;

class RemoteManager_RemoveSwitchPoint_args {
 public:

  RemoteManager_RemoveSwitchPoint_args() : _id(0), _hours(0), _minutes(0) {
  }

  virtual ~RemoteManager_RemoveSwitchPoint_args() throw() {}

  RemoteValueID _id;
  int8_t _hours;
  int8_t _minutes;

  _RemoteManager_RemoveSwitchPoint_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__hours(const int8_t val) {
    _hours = val;
  }

  void __set__minutes(const int8_t val) {
    _minutes = val;
  }

  bool operator == (const RemoteManager_RemoveSwitchPoint_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_hours == rhs._hours))
      return false;
    if (!(_minutes == rhs._minutes))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveSwitchPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveSwitchPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RemoveSwitchPoint_pargs {
 public:


  virtual ~RemoteManager_RemoveSwitchPoint_pargs() throw() {}

  const RemoteValueID* _id;
  const int8_t* _hours;
  const int8_t* _minutes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RemoveSwitchPoint_result__isset {
  _RemoteManager_RemoveSwitchPoint_result__isset() : success(false) {}
  bool success;
} _RemoteManager_RemoveSwitchPoint_result__isset;

class RemoteManager_RemoveSwitchPoint_result {
 public:

  RemoteManager_RemoveSwitchPoint_result() : success(0) {
  }

  virtual ~RemoteManager_RemoveSwitchPoint_result() throw() {}

  bool success;

  _RemoteManager_RemoveSwitchPoint_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_RemoveSwitchPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveSwitchPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveSwitchPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RemoveSwitchPoint_presult__isset {
  _RemoteManager_RemoveSwitchPoint_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_RemoveSwitchPoint_presult__isset;

class RemoteManager_RemoveSwitchPoint_presult {
 public:


  virtual ~RemoteManager_RemoveSwitchPoint_presult() throw() {}

  bool* success;

  _RemoteManager_RemoveSwitchPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_ClearSwitchPoints_args__isset {
  _RemoteManager_ClearSwitchPoints_args__isset() : _id(false) {}
  bool _id;
} _RemoteManager_ClearSwitchPoints_args__isset;

class RemoteManager_ClearSwitchPoints_args {
 public:

  RemoteManager_ClearSwitchPoints_args() : _id(0) {
  }

  virtual ~RemoteManager_ClearSwitchPoints_args() throw() {}

  RemoteValueID _id;

  _RemoteManager_ClearSwitchPoints_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  bool operator == (const RemoteManager_ClearSwitchPoints_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_ClearSwitchPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ClearSwitchPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ClearSwitchPoints_pargs {
 public:


  virtual ~RemoteManager_ClearSwitchPoints_pargs() throw() {}

  const RemoteValueID* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ClearSwitchPoints_result {
 public:

  RemoteManager_ClearSwitchPoints_result() {
  }

  virtual ~RemoteManager_ClearSwitchPoints_result() throw() {}


  bool operator == (const RemoteManager_ClearSwitchPoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_ClearSwitchPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ClearSwitchPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ClearSwitchPoints_presult {
 public:


  virtual ~RemoteManager_ClearSwitchPoints_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetSwitchPoint_args__isset {
  _RemoteManager_GetSwitchPoint_args__isset() : _id(false), _idx(false) {}
  bool _id;
  bool _idx;
} _RemoteManager_GetSwitchPoint_args__isset;

class RemoteManager_GetSwitchPoint_args {
 public:

  RemoteManager_GetSwitchPoint_args() : _id(0), _idx(0) {
  }

  virtual ~RemoteManager_GetSwitchPoint_args() throw() {}

  RemoteValueID _id;
  int8_t _idx;

  _RemoteManager_GetSwitchPoint_args__isset __isset;

  void __set__id(const RemoteValueID val) {
    _id = val;
  }

  void __set__idx(const int8_t val) {
    _idx = val;
  }

  bool operator == (const RemoteManager_GetSwitchPoint_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_idx == rhs._idx))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetSwitchPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetSwitchPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetSwitchPoint_pargs {
 public:


  virtual ~RemoteManager_GetSwitchPoint_pargs() throw() {}

  const RemoteValueID* _id;
  const int8_t* _idx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetSwitchPoint_result__isset {
  _RemoteManager_GetSwitchPoint_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetSwitchPoint_result__isset;

class RemoteManager_GetSwitchPoint_result {
 public:

  RemoteManager_GetSwitchPoint_result() {
  }

  virtual ~RemoteManager_GetSwitchPoint_result() throw() {}

  GetSwitchPointReturnStruct success;

  _RemoteManager_GetSwitchPoint_result__isset __isset;

  void __set_success(const GetSwitchPointReturnStruct& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetSwitchPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetSwitchPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetSwitchPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetSwitchPoint_presult__isset {
  _RemoteManager_GetSwitchPoint_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetSwitchPoint_presult__isset;

class RemoteManager_GetSwitchPoint_presult {
 public:


  virtual ~RemoteManager_GetSwitchPoint_presult() throw() {}

  GetSwitchPointReturnStruct* success;

  _RemoteManager_GetSwitchPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SwitchAllOn_args__isset {
  _RemoteManager_SwitchAllOn_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_SwitchAllOn_args__isset;

class RemoteManager_SwitchAllOn_args {
 public:

  RemoteManager_SwitchAllOn_args() : _homeId(0) {
  }

  virtual ~RemoteManager_SwitchAllOn_args() throw() {}

  int32_t _homeId;

  _RemoteManager_SwitchAllOn_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_SwitchAllOn_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SwitchAllOn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SwitchAllOn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SwitchAllOn_pargs {
 public:


  virtual ~RemoteManager_SwitchAllOn_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SwitchAllOn_result {
 public:

  RemoteManager_SwitchAllOn_result() {
  }

  virtual ~RemoteManager_SwitchAllOn_result() throw() {}


  bool operator == (const RemoteManager_SwitchAllOn_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SwitchAllOn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SwitchAllOn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SwitchAllOn_presult {
 public:


  virtual ~RemoteManager_SwitchAllOn_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SwitchAllOff_args__isset {
  _RemoteManager_SwitchAllOff_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_SwitchAllOff_args__isset;

class RemoteManager_SwitchAllOff_args {
 public:

  RemoteManager_SwitchAllOff_args() : _homeId(0) {
  }

  virtual ~RemoteManager_SwitchAllOff_args() throw() {}

  int32_t _homeId;

  _RemoteManager_SwitchAllOff_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_SwitchAllOff_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SwitchAllOff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SwitchAllOff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SwitchAllOff_pargs {
 public:


  virtual ~RemoteManager_SwitchAllOff_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SwitchAllOff_result {
 public:

  RemoteManager_SwitchAllOff_result() {
  }

  virtual ~RemoteManager_SwitchAllOff_result() throw() {}


  bool operator == (const RemoteManager_SwitchAllOff_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SwitchAllOff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SwitchAllOff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SwitchAllOff_presult {
 public:


  virtual ~RemoteManager_SwitchAllOff_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetConfigParam_args__isset {
  _RemoteManager_SetConfigParam_args__isset() : _homeId(false), _nodeId(false), _param(false), _value(false), _size(false) {}
  bool _homeId;
  bool _nodeId;
  bool _param;
  bool _value;
  bool _size;
} _RemoteManager_SetConfigParam_args__isset;

class RemoteManager_SetConfigParam_args {
 public:

  RemoteManager_SetConfigParam_args() : _homeId(0), _nodeId(0), _param(0), _value(0), _size(2) {
  }

  virtual ~RemoteManager_SetConfigParam_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _param;
  int32_t _value;
  int8_t _size;

  _RemoteManager_SetConfigParam_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__param(const int8_t val) {
    _param = val;
  }

  void __set__value(const int32_t val) {
    _value = val;
  }

  void __set__size(const int8_t val) {
    _size = val;
  }

  bool operator == (const RemoteManager_SetConfigParam_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_param == rhs._param))
      return false;
    if (!(_value == rhs._value))
      return false;
    if (!(_size == rhs._size))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetConfigParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetConfigParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetConfigParam_pargs {
 public:


  virtual ~RemoteManager_SetConfigParam_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _param;
  const int32_t* _value;
  const int8_t* _size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetConfigParam_result__isset {
  _RemoteManager_SetConfigParam_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetConfigParam_result__isset;

class RemoteManager_SetConfigParam_result {
 public:

  RemoteManager_SetConfigParam_result() : success(0) {
  }

  virtual ~RemoteManager_SetConfigParam_result() throw() {}

  bool success;

  _RemoteManager_SetConfigParam_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetConfigParam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetConfigParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetConfigParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetConfigParam_presult__isset {
  _RemoteManager_SetConfigParam_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetConfigParam_presult__isset;

class RemoteManager_SetConfigParam_presult {
 public:


  virtual ~RemoteManager_SetConfigParam_presult() throw() {}

  bool* success;

  _RemoteManager_SetConfigParam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RequestConfigParam_args__isset {
  _RemoteManager_RequestConfigParam_args__isset() : _homeId(false), _nodeId(false), _param(false) {}
  bool _homeId;
  bool _nodeId;
  bool _param;
} _RemoteManager_RequestConfigParam_args__isset;

class RemoteManager_RequestConfigParam_args {
 public:

  RemoteManager_RequestConfigParam_args() : _homeId(0), _nodeId(0), _param(0) {
  }

  virtual ~RemoteManager_RequestConfigParam_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _param;

  _RemoteManager_RequestConfigParam_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__param(const int8_t val) {
    _param = val;
  }

  bool operator == (const RemoteManager_RequestConfigParam_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_param == rhs._param))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RequestConfigParam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestConfigParam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestConfigParam_pargs {
 public:


  virtual ~RemoteManager_RequestConfigParam_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestConfigParam_result {
 public:

  RemoteManager_RequestConfigParam_result() {
  }

  virtual ~RemoteManager_RequestConfigParam_result() throw() {}


  bool operator == (const RemoteManager_RequestConfigParam_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_RequestConfigParam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestConfigParam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestConfigParam_presult {
 public:


  virtual ~RemoteManager_RequestConfigParam_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RequestAllConfigParams_args__isset {
  _RemoteManager_RequestAllConfigParams_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_RequestAllConfigParams_args__isset;

class RemoteManager_RequestAllConfigParams_args {
 public:

  RemoteManager_RequestAllConfigParams_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_RequestAllConfigParams_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_RequestAllConfigParams_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_RequestAllConfigParams_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RequestAllConfigParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestAllConfigParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestAllConfigParams_pargs {
 public:


  virtual ~RemoteManager_RequestAllConfigParams_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestAllConfigParams_result {
 public:

  RemoteManager_RequestAllConfigParams_result() {
  }

  virtual ~RemoteManager_RequestAllConfigParams_result() throw() {}


  bool operator == (const RemoteManager_RequestAllConfigParams_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_RequestAllConfigParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RequestAllConfigParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RequestAllConfigParams_presult {
 public:


  virtual ~RemoteManager_RequestAllConfigParams_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetNumGroups_args__isset {
  _RemoteManager_GetNumGroups_args__isset() : _homeId(false), _nodeId(false) {}
  bool _homeId;
  bool _nodeId;
} _RemoteManager_GetNumGroups_args__isset;

class RemoteManager_GetNumGroups_args {
 public:

  RemoteManager_GetNumGroups_args() : _homeId(0), _nodeId(0) {
  }

  virtual ~RemoteManager_GetNumGroups_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;

  _RemoteManager_GetNumGroups_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  bool operator == (const RemoteManager_GetNumGroups_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNumGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNumGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNumGroups_pargs {
 public:


  virtual ~RemoteManager_GetNumGroups_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNumGroups_result__isset {
  _RemoteManager_GetNumGroups_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNumGroups_result__isset;

class RemoteManager_GetNumGroups_result {
 public:

  RemoteManager_GetNumGroups_result() : success(0) {
  }

  virtual ~RemoteManager_GetNumGroups_result() throw() {}

  int8_t success;

  _RemoteManager_GetNumGroups_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNumGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNumGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNumGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNumGroups_presult__isset {
  _RemoteManager_GetNumGroups_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNumGroups_presult__isset;

class RemoteManager_GetNumGroups_presult {
 public:


  virtual ~RemoteManager_GetNumGroups_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNumGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetAssociations_args__isset {
  _RemoteManager_GetAssociations_args__isset() : _homeId(false), _nodeId(false), _groupIdx(false) {}
  bool _homeId;
  bool _nodeId;
  bool _groupIdx;
} _RemoteManager_GetAssociations_args__isset;

class RemoteManager_GetAssociations_args {
 public:

  RemoteManager_GetAssociations_args() : _homeId(0), _nodeId(0), _groupIdx(0) {
  }

  virtual ~RemoteManager_GetAssociations_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _groupIdx;

  _RemoteManager_GetAssociations_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__groupIdx(const int8_t val) {
    _groupIdx = val;
  }

  bool operator == (const RemoteManager_GetAssociations_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_groupIdx == rhs._groupIdx))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetAssociations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetAssociations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetAssociations_pargs {
 public:


  virtual ~RemoteManager_GetAssociations_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _groupIdx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetAssociations_result__isset {
  _RemoteManager_GetAssociations_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetAssociations_result__isset;

class RemoteManager_GetAssociations_result {
 public:

  RemoteManager_GetAssociations_result() {
  }

  virtual ~RemoteManager_GetAssociations_result() throw() {}

  GetAssociationsReturnStruct success;

  _RemoteManager_GetAssociations_result__isset __isset;

  void __set_success(const GetAssociationsReturnStruct& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetAssociations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetAssociations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetAssociations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetAssociations_presult__isset {
  _RemoteManager_GetAssociations_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetAssociations_presult__isset;

class RemoteManager_GetAssociations_presult {
 public:


  virtual ~RemoteManager_GetAssociations_presult() throw() {}

  GetAssociationsReturnStruct* success;

  _RemoteManager_GetAssociations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetMaxAssociations_args__isset {
  _RemoteManager_GetMaxAssociations_args__isset() : _homeId(false), _nodeId(false), _groupIdx(false) {}
  bool _homeId;
  bool _nodeId;
  bool _groupIdx;
} _RemoteManager_GetMaxAssociations_args__isset;

class RemoteManager_GetMaxAssociations_args {
 public:

  RemoteManager_GetMaxAssociations_args() : _homeId(0), _nodeId(0), _groupIdx(0) {
  }

  virtual ~RemoteManager_GetMaxAssociations_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _groupIdx;

  _RemoteManager_GetMaxAssociations_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__groupIdx(const int8_t val) {
    _groupIdx = val;
  }

  bool operator == (const RemoteManager_GetMaxAssociations_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_groupIdx == rhs._groupIdx))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetMaxAssociations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetMaxAssociations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetMaxAssociations_pargs {
 public:


  virtual ~RemoteManager_GetMaxAssociations_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _groupIdx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetMaxAssociations_result__isset {
  _RemoteManager_GetMaxAssociations_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetMaxAssociations_result__isset;

class RemoteManager_GetMaxAssociations_result {
 public:

  RemoteManager_GetMaxAssociations_result() : success(0) {
  }

  virtual ~RemoteManager_GetMaxAssociations_result() throw() {}

  int8_t success;

  _RemoteManager_GetMaxAssociations_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetMaxAssociations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetMaxAssociations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetMaxAssociations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetMaxAssociations_presult__isset {
  _RemoteManager_GetMaxAssociations_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetMaxAssociations_presult__isset;

class RemoteManager_GetMaxAssociations_presult {
 public:


  virtual ~RemoteManager_GetMaxAssociations_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetMaxAssociations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetGroupLabel_args__isset {
  _RemoteManager_GetGroupLabel_args__isset() : _homeId(false), _nodeId(false), _groupIdx(false) {}
  bool _homeId;
  bool _nodeId;
  bool _groupIdx;
} _RemoteManager_GetGroupLabel_args__isset;

class RemoteManager_GetGroupLabel_args {
 public:

  RemoteManager_GetGroupLabel_args() : _homeId(0), _nodeId(0), _groupIdx(0) {
  }

  virtual ~RemoteManager_GetGroupLabel_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _groupIdx;

  _RemoteManager_GetGroupLabel_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__groupIdx(const int8_t val) {
    _groupIdx = val;
  }

  bool operator == (const RemoteManager_GetGroupLabel_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_groupIdx == rhs._groupIdx))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetGroupLabel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetGroupLabel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetGroupLabel_pargs {
 public:


  virtual ~RemoteManager_GetGroupLabel_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _groupIdx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetGroupLabel_result__isset {
  _RemoteManager_GetGroupLabel_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetGroupLabel_result__isset;

class RemoteManager_GetGroupLabel_result {
 public:

  RemoteManager_GetGroupLabel_result() : success("") {
  }

  virtual ~RemoteManager_GetGroupLabel_result() throw() {}

  std::string success;

  _RemoteManager_GetGroupLabel_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetGroupLabel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetGroupLabel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetGroupLabel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetGroupLabel_presult__isset {
  _RemoteManager_GetGroupLabel_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetGroupLabel_presult__isset;

class RemoteManager_GetGroupLabel_presult {
 public:


  virtual ~RemoteManager_GetGroupLabel_presult() throw() {}

  std::string* success;

  _RemoteManager_GetGroupLabel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddAssociation_args__isset {
  _RemoteManager_AddAssociation_args__isset() : _homeId(false), _nodeId(false), _groupIdx(false), _targetNodeId(false) {}
  bool _homeId;
  bool _nodeId;
  bool _groupIdx;
  bool _targetNodeId;
} _RemoteManager_AddAssociation_args__isset;

class RemoteManager_AddAssociation_args {
 public:

  RemoteManager_AddAssociation_args() : _homeId(0), _nodeId(0), _groupIdx(0), _targetNodeId(0) {
  }

  virtual ~RemoteManager_AddAssociation_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _groupIdx;
  int8_t _targetNodeId;

  _RemoteManager_AddAssociation_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__groupIdx(const int8_t val) {
    _groupIdx = val;
  }

  void __set__targetNodeId(const int8_t val) {
    _targetNodeId = val;
  }

  bool operator == (const RemoteManager_AddAssociation_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_groupIdx == rhs._groupIdx))
      return false;
    if (!(_targetNodeId == rhs._targetNodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddAssociation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddAssociation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddAssociation_pargs {
 public:


  virtual ~RemoteManager_AddAssociation_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _groupIdx;
  const int8_t* _targetNodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddAssociation_result {
 public:

  RemoteManager_AddAssociation_result() {
  }

  virtual ~RemoteManager_AddAssociation_result() throw() {}


  bool operator == (const RemoteManager_AddAssociation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_AddAssociation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddAssociation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddAssociation_presult {
 public:


  virtual ~RemoteManager_AddAssociation_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RemoveAssociation_args__isset {
  _RemoteManager_RemoveAssociation_args__isset() : _homeId(false), _nodeId(false), _groupIdx(false), _targetNodeId(false) {}
  bool _homeId;
  bool _nodeId;
  bool _groupIdx;
  bool _targetNodeId;
} _RemoteManager_RemoveAssociation_args__isset;

class RemoteManager_RemoveAssociation_args {
 public:

  RemoteManager_RemoveAssociation_args() : _homeId(0), _nodeId(0), _groupIdx(0), _targetNodeId(0) {
  }

  virtual ~RemoteManager_RemoveAssociation_args() throw() {}

  int32_t _homeId;
  int8_t _nodeId;
  int8_t _groupIdx;
  int8_t _targetNodeId;

  _RemoteManager_RemoveAssociation_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  void __set__nodeId(const int8_t val) {
    _nodeId = val;
  }

  void __set__groupIdx(const int8_t val) {
    _groupIdx = val;
  }

  void __set__targetNodeId(const int8_t val) {
    _targetNodeId = val;
  }

  bool operator == (const RemoteManager_RemoveAssociation_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    if (!(_nodeId == rhs._nodeId))
      return false;
    if (!(_groupIdx == rhs._groupIdx))
      return false;
    if (!(_targetNodeId == rhs._targetNodeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveAssociation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveAssociation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RemoveAssociation_pargs {
 public:


  virtual ~RemoteManager_RemoveAssociation_pargs() throw() {}

  const int32_t* _homeId;
  const int8_t* _nodeId;
  const int8_t* _groupIdx;
  const int8_t* _targetNodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RemoveAssociation_result {
 public:

  RemoteManager_RemoveAssociation_result() {
  }

  virtual ~RemoteManager_RemoveAssociation_result() throw() {}


  bool operator == (const RemoteManager_RemoveAssociation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_RemoveAssociation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveAssociation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RemoveAssociation_presult {
 public:


  virtual ~RemoteManager_RemoveAssociation_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_ResetController_args__isset {
  _RemoteManager_ResetController_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_ResetController_args__isset;

class RemoteManager_ResetController_args {
 public:

  RemoteManager_ResetController_args() : _homeId(0) {
  }

  virtual ~RemoteManager_ResetController_args() throw() {}

  int32_t _homeId;

  _RemoteManager_ResetController_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_ResetController_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_ResetController_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ResetController_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ResetController_pargs {
 public:


  virtual ~RemoteManager_ResetController_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ResetController_result {
 public:

  RemoteManager_ResetController_result() {
  }

  virtual ~RemoteManager_ResetController_result() throw() {}


  bool operator == (const RemoteManager_ResetController_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_ResetController_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ResetController_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ResetController_presult {
 public:


  virtual ~RemoteManager_ResetController_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SoftReset_args__isset {
  _RemoteManager_SoftReset_args__isset() : _homeId(false) {}
  bool _homeId;
} _RemoteManager_SoftReset_args__isset;

class RemoteManager_SoftReset_args {
 public:

  RemoteManager_SoftReset_args() : _homeId(0) {
  }

  virtual ~RemoteManager_SoftReset_args() throw() {}

  int32_t _homeId;

  _RemoteManager_SoftReset_args__isset __isset;

  void __set__homeId(const int32_t val) {
    _homeId = val;
  }

  bool operator == (const RemoteManager_SoftReset_args & rhs) const
  {
    if (!(_homeId == rhs._homeId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SoftReset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SoftReset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SoftReset_pargs {
 public:


  virtual ~RemoteManager_SoftReset_pargs() throw() {}

  const int32_t* _homeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SoftReset_result {
 public:

  RemoteManager_SoftReset_result() {
  }

  virtual ~RemoteManager_SoftReset_result() throw() {}


  bool operator == (const RemoteManager_SoftReset_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SoftReset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SoftReset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SoftReset_presult {
 public:


  virtual ~RemoteManager_SoftReset_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteManager_GetNumScenes_args {
 public:

  RemoteManager_GetNumScenes_args() {
  }

  virtual ~RemoteManager_GetNumScenes_args() throw() {}


  bool operator == (const RemoteManager_GetNumScenes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_GetNumScenes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNumScenes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetNumScenes_pargs {
 public:


  virtual ~RemoteManager_GetNumScenes_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNumScenes_result__isset {
  _RemoteManager_GetNumScenes_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNumScenes_result__isset;

class RemoteManager_GetNumScenes_result {
 public:

  RemoteManager_GetNumScenes_result() : success(0) {
  }

  virtual ~RemoteManager_GetNumScenes_result() throw() {}

  int8_t success;

  _RemoteManager_GetNumScenes_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetNumScenes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetNumScenes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetNumScenes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetNumScenes_presult__isset {
  _RemoteManager_GetNumScenes_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetNumScenes_presult__isset;

class RemoteManager_GetNumScenes_presult {
 public:


  virtual ~RemoteManager_GetNumScenes_presult() throw() {}

  int8_t* success;

  _RemoteManager_GetNumScenes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteManager_GetAllScenes_args {
 public:

  RemoteManager_GetAllScenes_args() {
  }

  virtual ~RemoteManager_GetAllScenes_args() throw() {}


  bool operator == (const RemoteManager_GetAllScenes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_GetAllScenes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetAllScenes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetAllScenes_pargs {
 public:


  virtual ~RemoteManager_GetAllScenes_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetAllScenes_result__isset {
  _RemoteManager_GetAllScenes_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetAllScenes_result__isset;

class RemoteManager_GetAllScenes_result {
 public:

  RemoteManager_GetAllScenes_result() {
  }

  virtual ~RemoteManager_GetAllScenes_result() throw() {}

  GetAllScenesReturnStruct success;

  _RemoteManager_GetAllScenes_result__isset __isset;

  void __set_success(const GetAllScenesReturnStruct& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetAllScenes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetAllScenes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetAllScenes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetAllScenes_presult__isset {
  _RemoteManager_GetAllScenes_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetAllScenes_presult__isset;

class RemoteManager_GetAllScenes_presult {
 public:


  virtual ~RemoteManager_GetAllScenes_presult() throw() {}

  GetAllScenesReturnStruct* success;

  _RemoteManager_GetAllScenes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteManager_CreateScene_args {
 public:

  RemoteManager_CreateScene_args() {
  }

  virtual ~RemoteManager_CreateScene_args() throw() {}


  bool operator == (const RemoteManager_CreateScene_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_CreateScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_CreateScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_CreateScene_pargs {
 public:


  virtual ~RemoteManager_CreateScene_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_CreateScene_result__isset {
  _RemoteManager_CreateScene_result__isset() : success(false) {}
  bool success;
} _RemoteManager_CreateScene_result__isset;

class RemoteManager_CreateScene_result {
 public:

  RemoteManager_CreateScene_result() : success(0) {
  }

  virtual ~RemoteManager_CreateScene_result() throw() {}

  int8_t success;

  _RemoteManager_CreateScene_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const RemoteManager_CreateScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_CreateScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_CreateScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_CreateScene_presult__isset {
  _RemoteManager_CreateScene_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_CreateScene_presult__isset;

class RemoteManager_CreateScene_presult {
 public:


  virtual ~RemoteManager_CreateScene_presult() throw() {}

  int8_t* success;

  _RemoteManager_CreateScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RemoveScene_args__isset {
  _RemoteManager_RemoveScene_args__isset() : _sceneId(false) {}
  bool _sceneId;
} _RemoteManager_RemoveScene_args__isset;

class RemoteManager_RemoveScene_args {
 public:

  RemoteManager_RemoveScene_args() : _sceneId(0) {
  }

  virtual ~RemoteManager_RemoveScene_args() throw() {}

  int8_t _sceneId;

  _RemoteManager_RemoveScene_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  bool operator == (const RemoteManager_RemoveScene_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RemoveScene_pargs {
 public:


  virtual ~RemoteManager_RemoveScene_pargs() throw() {}

  const int8_t* _sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RemoveScene_result__isset {
  _RemoteManager_RemoveScene_result__isset() : success(false) {}
  bool success;
} _RemoteManager_RemoveScene_result__isset;

class RemoteManager_RemoveScene_result {
 public:

  RemoteManager_RemoveScene_result() : success(0) {
  }

  virtual ~RemoteManager_RemoveScene_result() throw() {}

  bool success;

  _RemoteManager_RemoveScene_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_RemoveScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RemoveScene_presult__isset {
  _RemoteManager_RemoveScene_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_RemoveScene_presult__isset;

class RemoteManager_RemoveScene_presult {
 public:


  virtual ~RemoteManager_RemoveScene_presult() throw() {}

  bool* success;

  _RemoteManager_RemoveScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValue_Bool_args__isset {
  _RemoteManager_AddSceneValue_Bool_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValue_Bool_args__isset;

class RemoteManager_AddSceneValue_Bool_args {
 public:

  RemoteManager_AddSceneValue_Bool_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Bool_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  bool _value;

  _RemoteManager_AddSceneValue_Bool_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const bool val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Bool_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Bool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Bool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValue_Bool_pargs {
 public:


  virtual ~RemoteManager_AddSceneValue_Bool_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const bool* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Bool_result__isset {
  _RemoteManager_AddSceneValue_Bool_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Bool_result__isset;

class RemoteManager_AddSceneValue_Bool_result {
 public:

  RemoteManager_AddSceneValue_Bool_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Bool_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValue_Bool_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Bool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Bool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Bool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Bool_presult__isset {
  _RemoteManager_AddSceneValue_Bool_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Bool_presult__isset;

class RemoteManager_AddSceneValue_Bool_presult {
 public:


  virtual ~RemoteManager_AddSceneValue_Bool_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValue_Bool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValue_Uint8_args__isset {
  _RemoteManager_AddSceneValue_Uint8_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValue_Uint8_args__isset;

class RemoteManager_AddSceneValue_Uint8_args {
 public:

  RemoteManager_AddSceneValue_Uint8_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Uint8_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int8_t _value;

  _RemoteManager_AddSceneValue_Uint8_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int8_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Uint8_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Uint8_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Uint8_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValue_Uint8_pargs {
 public:


  virtual ~RemoteManager_AddSceneValue_Uint8_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int8_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Uint8_result__isset {
  _RemoteManager_AddSceneValue_Uint8_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Uint8_result__isset;

class RemoteManager_AddSceneValue_Uint8_result {
 public:

  RemoteManager_AddSceneValue_Uint8_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Uint8_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValue_Uint8_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Uint8_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Uint8_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Uint8_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Uint8_presult__isset {
  _RemoteManager_AddSceneValue_Uint8_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Uint8_presult__isset;

class RemoteManager_AddSceneValue_Uint8_presult {
 public:


  virtual ~RemoteManager_AddSceneValue_Uint8_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValue_Uint8_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValue_Float_args__isset {
  _RemoteManager_AddSceneValue_Float_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValue_Float_args__isset;

class RemoteManager_AddSceneValue_Float_args {
 public:

  RemoteManager_AddSceneValue_Float_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Float_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  double _value;

  _RemoteManager_AddSceneValue_Float_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const double val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Float_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Float_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Float_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValue_Float_pargs {
 public:


  virtual ~RemoteManager_AddSceneValue_Float_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const double* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Float_result__isset {
  _RemoteManager_AddSceneValue_Float_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Float_result__isset;

class RemoteManager_AddSceneValue_Float_result {
 public:

  RemoteManager_AddSceneValue_Float_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Float_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValue_Float_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Float_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Float_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Float_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Float_presult__isset {
  _RemoteManager_AddSceneValue_Float_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Float_presult__isset;

class RemoteManager_AddSceneValue_Float_presult {
 public:


  virtual ~RemoteManager_AddSceneValue_Float_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValue_Float_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValue_Int32_args__isset {
  _RemoteManager_AddSceneValue_Int32_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValue_Int32_args__isset;

class RemoteManager_AddSceneValue_Int32_args {
 public:

  RemoteManager_AddSceneValue_Int32_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Int32_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int32_t _value;

  _RemoteManager_AddSceneValue_Int32_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int32_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Int32_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValue_Int32_pargs {
 public:


  virtual ~RemoteManager_AddSceneValue_Int32_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int32_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Int32_result__isset {
  _RemoteManager_AddSceneValue_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Int32_result__isset;

class RemoteManager_AddSceneValue_Int32_result {
 public:

  RemoteManager_AddSceneValue_Int32_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Int32_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValue_Int32_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Int32_presult__isset {
  _RemoteManager_AddSceneValue_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Int32_presult__isset;

class RemoteManager_AddSceneValue_Int32_presult {
 public:


  virtual ~RemoteManager_AddSceneValue_Int32_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValue_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValue_Int16_args__isset {
  _RemoteManager_AddSceneValue_Int16_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValue_Int16_args__isset;

class RemoteManager_AddSceneValue_Int16_args {
 public:

  RemoteManager_AddSceneValue_Int16_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Int16_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int16_t _value;

  _RemoteManager_AddSceneValue_Int16_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int16_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Int16_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Int16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Int16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValue_Int16_pargs {
 public:


  virtual ~RemoteManager_AddSceneValue_Int16_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int16_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Int16_result__isset {
  _RemoteManager_AddSceneValue_Int16_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Int16_result__isset;

class RemoteManager_AddSceneValue_Int16_result {
 public:

  RemoteManager_AddSceneValue_Int16_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValue_Int16_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValue_Int16_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_Int16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_Int16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_Int16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_Int16_presult__isset {
  _RemoteManager_AddSceneValue_Int16_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_Int16_presult__isset;

class RemoteManager_AddSceneValue_Int16_presult {
 public:


  virtual ~RemoteManager_AddSceneValue_Int16_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValue_Int16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValue_String_args__isset {
  _RemoteManager_AddSceneValue_String_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValue_String_args__isset;

class RemoteManager_AddSceneValue_String_args {
 public:

  RemoteManager_AddSceneValue_String_args() : _sceneId(0), _valueId(0), _value("") {
  }

  virtual ~RemoteManager_AddSceneValue_String_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  std::string _value;

  _RemoteManager_AddSceneValue_String_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_String_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValue_String_pargs {
 public:


  virtual ~RemoteManager_AddSceneValue_String_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_String_result__isset {
  _RemoteManager_AddSceneValue_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_String_result__isset;

class RemoteManager_AddSceneValue_String_result {
 public:

  RemoteManager_AddSceneValue_String_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValue_String_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValue_String_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValue_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValue_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValue_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValue_String_presult__isset {
  _RemoteManager_AddSceneValue_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValue_String_presult__isset;

class RemoteManager_AddSceneValue_String_presult {
 public:


  virtual ~RemoteManager_AddSceneValue_String_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValue_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValueListSelection_String_args__isset {
  _RemoteManager_AddSceneValueListSelection_String_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValueListSelection_String_args__isset;

class RemoteManager_AddSceneValueListSelection_String_args {
 public:

  RemoteManager_AddSceneValueListSelection_String_args() : _sceneId(0), _valueId(0), _value("") {
  }

  virtual ~RemoteManager_AddSceneValueListSelection_String_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  std::string _value;

  _RemoteManager_AddSceneValueListSelection_String_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValueListSelection_String_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValueListSelection_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValueListSelection_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValueListSelection_String_pargs {
 public:


  virtual ~RemoteManager_AddSceneValueListSelection_String_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValueListSelection_String_result__isset {
  _RemoteManager_AddSceneValueListSelection_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValueListSelection_String_result__isset;

class RemoteManager_AddSceneValueListSelection_String_result {
 public:

  RemoteManager_AddSceneValueListSelection_String_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValueListSelection_String_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValueListSelection_String_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValueListSelection_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValueListSelection_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValueListSelection_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValueListSelection_String_presult__isset {
  _RemoteManager_AddSceneValueListSelection_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValueListSelection_String_presult__isset;

class RemoteManager_AddSceneValueListSelection_String_presult {
 public:


  virtual ~RemoteManager_AddSceneValueListSelection_String_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValueListSelection_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_AddSceneValueListSelection_Int32_args__isset {
  _RemoteManager_AddSceneValueListSelection_Int32_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_AddSceneValueListSelection_Int32_args__isset;

class RemoteManager_AddSceneValueListSelection_Int32_args {
 public:

  RemoteManager_AddSceneValueListSelection_Int32_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_AddSceneValueListSelection_Int32_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int32_t _value;

  _RemoteManager_AddSceneValueListSelection_Int32_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int32_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_AddSceneValueListSelection_Int32_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValueListSelection_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValueListSelection_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_AddSceneValueListSelection_Int32_pargs {
 public:


  virtual ~RemoteManager_AddSceneValueListSelection_Int32_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int32_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValueListSelection_Int32_result__isset {
  _RemoteManager_AddSceneValueListSelection_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValueListSelection_Int32_result__isset;

class RemoteManager_AddSceneValueListSelection_Int32_result {
 public:

  RemoteManager_AddSceneValueListSelection_Int32_result() : success(0) {
  }

  virtual ~RemoteManager_AddSceneValueListSelection_Int32_result() throw() {}

  bool success;

  _RemoteManager_AddSceneValueListSelection_Int32_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_AddSceneValueListSelection_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_AddSceneValueListSelection_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_AddSceneValueListSelection_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_AddSceneValueListSelection_Int32_presult__isset {
  _RemoteManager_AddSceneValueListSelection_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_AddSceneValueListSelection_Int32_presult__isset;

class RemoteManager_AddSceneValueListSelection_Int32_presult {
 public:


  virtual ~RemoteManager_AddSceneValueListSelection_Int32_presult() throw() {}

  bool* success;

  _RemoteManager_AddSceneValueListSelection_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_RemoveSceneValue_args__isset {
  _RemoteManager_RemoveSceneValue_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_RemoveSceneValue_args__isset;

class RemoteManager_RemoveSceneValue_args {
 public:

  RemoteManager_RemoveSceneValue_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_RemoveSceneValue_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_RemoveSceneValue_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_RemoveSceneValue_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveSceneValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveSceneValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_RemoveSceneValue_pargs {
 public:


  virtual ~RemoteManager_RemoveSceneValue_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RemoveSceneValue_result__isset {
  _RemoteManager_RemoveSceneValue_result__isset() : success(false) {}
  bool success;
} _RemoteManager_RemoveSceneValue_result__isset;

class RemoteManager_RemoveSceneValue_result {
 public:

  RemoteManager_RemoveSceneValue_result() : success(0) {
  }

  virtual ~RemoteManager_RemoveSceneValue_result() throw() {}

  bool success;

  _RemoteManager_RemoveSceneValue_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_RemoveSceneValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_RemoveSceneValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_RemoveSceneValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_RemoveSceneValue_presult__isset {
  _RemoteManager_RemoveSceneValue_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_RemoveSceneValue_presult__isset;

class RemoteManager_RemoveSceneValue_presult {
 public:


  virtual ~RemoteManager_RemoveSceneValue_presult() throw() {}

  bool* success;

  _RemoteManager_RemoveSceneValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValues_args__isset {
  _RemoteManager_SceneGetValues_args__isset() : _sceneId(false) {}
  bool _sceneId;
} _RemoteManager_SceneGetValues_args__isset;

class RemoteManager_SceneGetValues_args {
 public:

  RemoteManager_SceneGetValues_args() : _sceneId(0) {
  }

  virtual ~RemoteManager_SceneGetValues_args() throw() {}

  int8_t _sceneId;

  _RemoteManager_SceneGetValues_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  bool operator == (const RemoteManager_SceneGetValues_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValues_pargs {
 public:


  virtual ~RemoteManager_SceneGetValues_pargs() throw() {}

  const int8_t* _sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValues_result__isset {
  _RemoteManager_SceneGetValues_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValues_result__isset;

class RemoteManager_SceneGetValues_result {
 public:

  RemoteManager_SceneGetValues_result() {
  }

  virtual ~RemoteManager_SceneGetValues_result() throw() {}

  SceneGetValuesReturnStruct success;

  _RemoteManager_SceneGetValues_result__isset __isset;

  void __set_success(const SceneGetValuesReturnStruct& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValues_presult__isset {
  _RemoteManager_SceneGetValues_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValues_presult__isset;

class RemoteManager_SceneGetValues_presult {
 public:


  virtual ~RemoteManager_SceneGetValues_presult() throw() {}

  SceneGetValuesReturnStruct* success;

  _RemoteManager_SceneGetValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueAsBool_args__isset {
  _RemoteManager_SceneGetValueAsBool_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueAsBool_args__isset;

class RemoteManager_SceneGetValueAsBool_args {
 public:

  RemoteManager_SceneGetValueAsBool_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueAsBool_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueAsBool_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsBool_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueAsBool_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueAsBool_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsBool_result__isset {
  _RemoteManager_SceneGetValueAsBool_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsBool_result__isset;

class RemoteManager_SceneGetValueAsBool_result {
 public:

  RemoteManager_SceneGetValueAsBool_result() {
  }

  virtual ~RemoteManager_SceneGetValueAsBool_result() throw() {}

  Bool_Bool success;

  _RemoteManager_SceneGetValueAsBool_result__isset __isset;

  void __set_success(const Bool_Bool& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsBool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsBool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsBool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsBool_presult__isset {
  _RemoteManager_SceneGetValueAsBool_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsBool_presult__isset;

class RemoteManager_SceneGetValueAsBool_presult {
 public:


  virtual ~RemoteManager_SceneGetValueAsBool_presult() throw() {}

  Bool_Bool* success;

  _RemoteManager_SceneGetValueAsBool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueAsByte_args__isset {
  _RemoteManager_SceneGetValueAsByte_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueAsByte_args__isset;

class RemoteManager_SceneGetValueAsByte_args {
 public:

  RemoteManager_SceneGetValueAsByte_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueAsByte_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueAsByte_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsByte_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsByte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsByte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueAsByte_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueAsByte_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsByte_result__isset {
  _RemoteManager_SceneGetValueAsByte_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsByte_result__isset;

class RemoteManager_SceneGetValueAsByte_result {
 public:

  RemoteManager_SceneGetValueAsByte_result() {
  }

  virtual ~RemoteManager_SceneGetValueAsByte_result() throw() {}

  Bool_UInt8 success;

  _RemoteManager_SceneGetValueAsByte_result__isset __isset;

  void __set_success(const Bool_UInt8& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsByte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsByte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsByte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsByte_presult__isset {
  _RemoteManager_SceneGetValueAsByte_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsByte_presult__isset;

class RemoteManager_SceneGetValueAsByte_presult {
 public:


  virtual ~RemoteManager_SceneGetValueAsByte_presult() throw() {}

  Bool_UInt8* success;

  _RemoteManager_SceneGetValueAsByte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueAsFloat_args__isset {
  _RemoteManager_SceneGetValueAsFloat_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueAsFloat_args__isset;

class RemoteManager_SceneGetValueAsFloat_args {
 public:

  RemoteManager_SceneGetValueAsFloat_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueAsFloat_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueAsFloat_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsFloat_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsFloat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsFloat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueAsFloat_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueAsFloat_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsFloat_result__isset {
  _RemoteManager_SceneGetValueAsFloat_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsFloat_result__isset;

class RemoteManager_SceneGetValueAsFloat_result {
 public:

  RemoteManager_SceneGetValueAsFloat_result() {
  }

  virtual ~RemoteManager_SceneGetValueAsFloat_result() throw() {}

  Bool_Float success;

  _RemoteManager_SceneGetValueAsFloat_result__isset __isset;

  void __set_success(const Bool_Float& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsFloat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsFloat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsFloat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsFloat_presult__isset {
  _RemoteManager_SceneGetValueAsFloat_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsFloat_presult__isset;

class RemoteManager_SceneGetValueAsFloat_presult {
 public:


  virtual ~RemoteManager_SceneGetValueAsFloat_presult() throw() {}

  Bool_Float* success;

  _RemoteManager_SceneGetValueAsFloat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueAsInt_args__isset {
  _RemoteManager_SceneGetValueAsInt_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueAsInt_args__isset;

class RemoteManager_SceneGetValueAsInt_args {
 public:

  RemoteManager_SceneGetValueAsInt_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueAsInt_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueAsInt_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsInt_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueAsInt_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueAsInt_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsInt_result__isset {
  _RemoteManager_SceneGetValueAsInt_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsInt_result__isset;

class RemoteManager_SceneGetValueAsInt_result {
 public:

  RemoteManager_SceneGetValueAsInt_result() {
  }

  virtual ~RemoteManager_SceneGetValueAsInt_result() throw() {}

  Bool_Int success;

  _RemoteManager_SceneGetValueAsInt_result__isset __isset;

  void __set_success(const Bool_Int& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsInt_presult__isset {
  _RemoteManager_SceneGetValueAsInt_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsInt_presult__isset;

class RemoteManager_SceneGetValueAsInt_presult {
 public:


  virtual ~RemoteManager_SceneGetValueAsInt_presult() throw() {}

  Bool_Int* success;

  _RemoteManager_SceneGetValueAsInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueAsShort_args__isset {
  _RemoteManager_SceneGetValueAsShort_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueAsShort_args__isset;

class RemoteManager_SceneGetValueAsShort_args {
 public:

  RemoteManager_SceneGetValueAsShort_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueAsShort_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueAsShort_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsShort_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsShort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsShort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueAsShort_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueAsShort_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsShort_result__isset {
  _RemoteManager_SceneGetValueAsShort_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsShort_result__isset;

class RemoteManager_SceneGetValueAsShort_result {
 public:

  RemoteManager_SceneGetValueAsShort_result() {
  }

  virtual ~RemoteManager_SceneGetValueAsShort_result() throw() {}

  Bool_Int16 success;

  _RemoteManager_SceneGetValueAsShort_result__isset __isset;

  void __set_success(const Bool_Int16& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsShort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsShort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsShort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsShort_presult__isset {
  _RemoteManager_SceneGetValueAsShort_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsShort_presult__isset;

class RemoteManager_SceneGetValueAsShort_presult {
 public:


  virtual ~RemoteManager_SceneGetValueAsShort_presult() throw() {}

  Bool_Int16* success;

  _RemoteManager_SceneGetValueAsShort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueAsString_args__isset {
  _RemoteManager_SceneGetValueAsString_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueAsString_args__isset;

class RemoteManager_SceneGetValueAsString_args {
 public:

  RemoteManager_SceneGetValueAsString_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueAsString_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueAsString_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsString_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueAsString_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueAsString_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsString_result__isset {
  _RemoteManager_SceneGetValueAsString_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsString_result__isset;

class RemoteManager_SceneGetValueAsString_result {
 public:

  RemoteManager_SceneGetValueAsString_result() {
  }

  virtual ~RemoteManager_SceneGetValueAsString_result() throw() {}

  Bool_String success;

  _RemoteManager_SceneGetValueAsString_result__isset __isset;

  void __set_success(const Bool_String& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueAsString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueAsString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueAsString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueAsString_presult__isset {
  _RemoteManager_SceneGetValueAsString_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueAsString_presult__isset;

class RemoteManager_SceneGetValueAsString_presult {
 public:


  virtual ~RemoteManager_SceneGetValueAsString_presult() throw() {}

  Bool_String* success;

  _RemoteManager_SceneGetValueAsString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueListSelection_String_args__isset {
  _RemoteManager_SceneGetValueListSelection_String_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueListSelection_String_args__isset;

class RemoteManager_SceneGetValueListSelection_String_args {
 public:

  RemoteManager_SceneGetValueListSelection_String_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueListSelection_String_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueListSelection_String_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueListSelection_String_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueListSelection_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueListSelection_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueListSelection_String_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueListSelection_String_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueListSelection_String_result__isset {
  _RemoteManager_SceneGetValueListSelection_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueListSelection_String_result__isset;

class RemoteManager_SceneGetValueListSelection_String_result {
 public:

  RemoteManager_SceneGetValueListSelection_String_result() {
  }

  virtual ~RemoteManager_SceneGetValueListSelection_String_result() throw() {}

  Bool_String success;

  _RemoteManager_SceneGetValueListSelection_String_result__isset __isset;

  void __set_success(const Bool_String& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueListSelection_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueListSelection_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueListSelection_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueListSelection_String_presult__isset {
  _RemoteManager_SceneGetValueListSelection_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueListSelection_String_presult__isset;

class RemoteManager_SceneGetValueListSelection_String_presult {
 public:


  virtual ~RemoteManager_SceneGetValueListSelection_String_presult() throw() {}

  Bool_String* success;

  _RemoteManager_SceneGetValueListSelection_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneGetValueListSelection_Int32_args__isset {
  _RemoteManager_SceneGetValueListSelection_Int32_args__isset() : _sceneId(false), _valueId(false) {}
  bool _sceneId;
  bool _valueId;
} _RemoteManager_SceneGetValueListSelection_Int32_args__isset;

class RemoteManager_SceneGetValueListSelection_Int32_args {
 public:

  RemoteManager_SceneGetValueListSelection_Int32_args() : _sceneId(0), _valueId(0) {
  }

  virtual ~RemoteManager_SceneGetValueListSelection_Int32_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;

  _RemoteManager_SceneGetValueListSelection_Int32_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  bool operator == (const RemoteManager_SceneGetValueListSelection_Int32_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueListSelection_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueListSelection_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneGetValueListSelection_Int32_pargs {
 public:


  virtual ~RemoteManager_SceneGetValueListSelection_Int32_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueListSelection_Int32_result__isset {
  _RemoteManager_SceneGetValueListSelection_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueListSelection_Int32_result__isset;

class RemoteManager_SceneGetValueListSelection_Int32_result {
 public:

  RemoteManager_SceneGetValueListSelection_Int32_result() {
  }

  virtual ~RemoteManager_SceneGetValueListSelection_Int32_result() throw() {}

  Bool_Int success;

  _RemoteManager_SceneGetValueListSelection_Int32_result__isset __isset;

  void __set_success(const Bool_Int& val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneGetValueListSelection_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneGetValueListSelection_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneGetValueListSelection_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneGetValueListSelection_Int32_presult__isset {
  _RemoteManager_SceneGetValueListSelection_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneGetValueListSelection_Int32_presult__isset;

class RemoteManager_SceneGetValueListSelection_Int32_presult {
 public:


  virtual ~RemoteManager_SceneGetValueListSelection_Int32_presult() throw() {}

  Bool_Int* success;

  _RemoteManager_SceneGetValueListSelection_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValue_Bool_args__isset {
  _RemoteManager_SetSceneValue_Bool_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValue_Bool_args__isset;

class RemoteManager_SetSceneValue_Bool_args {
 public:

  RemoteManager_SetSceneValue_Bool_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Bool_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  bool _value;

  _RemoteManager_SetSceneValue_Bool_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const bool val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Bool_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Bool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Bool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValue_Bool_pargs {
 public:


  virtual ~RemoteManager_SetSceneValue_Bool_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const bool* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Bool_result__isset {
  _RemoteManager_SetSceneValue_Bool_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Bool_result__isset;

class RemoteManager_SetSceneValue_Bool_result {
 public:

  RemoteManager_SetSceneValue_Bool_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Bool_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValue_Bool_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Bool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Bool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Bool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Bool_presult__isset {
  _RemoteManager_SetSceneValue_Bool_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Bool_presult__isset;

class RemoteManager_SetSceneValue_Bool_presult {
 public:


  virtual ~RemoteManager_SetSceneValue_Bool_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValue_Bool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValue_Uint8_args__isset {
  _RemoteManager_SetSceneValue_Uint8_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValue_Uint8_args__isset;

class RemoteManager_SetSceneValue_Uint8_args {
 public:

  RemoteManager_SetSceneValue_Uint8_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Uint8_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int8_t _value;

  _RemoteManager_SetSceneValue_Uint8_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int8_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Uint8_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Uint8_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Uint8_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValue_Uint8_pargs {
 public:


  virtual ~RemoteManager_SetSceneValue_Uint8_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int8_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Uint8_result__isset {
  _RemoteManager_SetSceneValue_Uint8_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Uint8_result__isset;

class RemoteManager_SetSceneValue_Uint8_result {
 public:

  RemoteManager_SetSceneValue_Uint8_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Uint8_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValue_Uint8_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Uint8_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Uint8_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Uint8_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Uint8_presult__isset {
  _RemoteManager_SetSceneValue_Uint8_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Uint8_presult__isset;

class RemoteManager_SetSceneValue_Uint8_presult {
 public:


  virtual ~RemoteManager_SetSceneValue_Uint8_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValue_Uint8_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValue_Float_args__isset {
  _RemoteManager_SetSceneValue_Float_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValue_Float_args__isset;

class RemoteManager_SetSceneValue_Float_args {
 public:

  RemoteManager_SetSceneValue_Float_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Float_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  double _value;

  _RemoteManager_SetSceneValue_Float_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const double val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Float_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Float_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Float_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValue_Float_pargs {
 public:


  virtual ~RemoteManager_SetSceneValue_Float_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const double* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Float_result__isset {
  _RemoteManager_SetSceneValue_Float_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Float_result__isset;

class RemoteManager_SetSceneValue_Float_result {
 public:

  RemoteManager_SetSceneValue_Float_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Float_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValue_Float_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Float_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Float_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Float_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Float_presult__isset {
  _RemoteManager_SetSceneValue_Float_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Float_presult__isset;

class RemoteManager_SetSceneValue_Float_presult {
 public:


  virtual ~RemoteManager_SetSceneValue_Float_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValue_Float_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValue_Int32_args__isset {
  _RemoteManager_SetSceneValue_Int32_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValue_Int32_args__isset;

class RemoteManager_SetSceneValue_Int32_args {
 public:

  RemoteManager_SetSceneValue_Int32_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Int32_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int32_t _value;

  _RemoteManager_SetSceneValue_Int32_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int32_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Int32_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValue_Int32_pargs {
 public:


  virtual ~RemoteManager_SetSceneValue_Int32_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int32_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Int32_result__isset {
  _RemoteManager_SetSceneValue_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Int32_result__isset;

class RemoteManager_SetSceneValue_Int32_result {
 public:

  RemoteManager_SetSceneValue_Int32_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Int32_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValue_Int32_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Int32_presult__isset {
  _RemoteManager_SetSceneValue_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Int32_presult__isset;

class RemoteManager_SetSceneValue_Int32_presult {
 public:


  virtual ~RemoteManager_SetSceneValue_Int32_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValue_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValue_Int16_args__isset {
  _RemoteManager_SetSceneValue_Int16_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValue_Int16_args__isset;

class RemoteManager_SetSceneValue_Int16_args {
 public:

  RemoteManager_SetSceneValue_Int16_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Int16_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int16_t _value;

  _RemoteManager_SetSceneValue_Int16_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int16_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Int16_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Int16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Int16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValue_Int16_pargs {
 public:


  virtual ~RemoteManager_SetSceneValue_Int16_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int16_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Int16_result__isset {
  _RemoteManager_SetSceneValue_Int16_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Int16_result__isset;

class RemoteManager_SetSceneValue_Int16_result {
 public:

  RemoteManager_SetSceneValue_Int16_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValue_Int16_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValue_Int16_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_Int16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_Int16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_Int16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_Int16_presult__isset {
  _RemoteManager_SetSceneValue_Int16_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_Int16_presult__isset;

class RemoteManager_SetSceneValue_Int16_presult {
 public:


  virtual ~RemoteManager_SetSceneValue_Int16_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValue_Int16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValue_String_args__isset {
  _RemoteManager_SetSceneValue_String_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValue_String_args__isset;

class RemoteManager_SetSceneValue_String_args {
 public:

  RemoteManager_SetSceneValue_String_args() : _sceneId(0), _valueId(0), _value("") {
  }

  virtual ~RemoteManager_SetSceneValue_String_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  std::string _value;

  _RemoteManager_SetSceneValue_String_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_String_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValue_String_pargs {
 public:


  virtual ~RemoteManager_SetSceneValue_String_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_String_result__isset {
  _RemoteManager_SetSceneValue_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_String_result__isset;

class RemoteManager_SetSceneValue_String_result {
 public:

  RemoteManager_SetSceneValue_String_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValue_String_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValue_String_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValue_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValue_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValue_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValue_String_presult__isset {
  _RemoteManager_SetSceneValue_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValue_String_presult__isset;

class RemoteManager_SetSceneValue_String_presult {
 public:


  virtual ~RemoteManager_SetSceneValue_String_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValue_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValueListSelection_String_args__isset {
  _RemoteManager_SetSceneValueListSelection_String_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValueListSelection_String_args__isset;

class RemoteManager_SetSceneValueListSelection_String_args {
 public:

  RemoteManager_SetSceneValueListSelection_String_args() : _sceneId(0), _valueId(0), _value("") {
  }

  virtual ~RemoteManager_SetSceneValueListSelection_String_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  std::string _value;

  _RemoteManager_SetSceneValueListSelection_String_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValueListSelection_String_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValueListSelection_String_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValueListSelection_String_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValueListSelection_String_pargs {
 public:


  virtual ~RemoteManager_SetSceneValueListSelection_String_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValueListSelection_String_result__isset {
  _RemoteManager_SetSceneValueListSelection_String_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValueListSelection_String_result__isset;

class RemoteManager_SetSceneValueListSelection_String_result {
 public:

  RemoteManager_SetSceneValueListSelection_String_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValueListSelection_String_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValueListSelection_String_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValueListSelection_String_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValueListSelection_String_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValueListSelection_String_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValueListSelection_String_presult__isset {
  _RemoteManager_SetSceneValueListSelection_String_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValueListSelection_String_presult__isset;

class RemoteManager_SetSceneValueListSelection_String_presult {
 public:


  virtual ~RemoteManager_SetSceneValueListSelection_String_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValueListSelection_String_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneValueListSelection_Int32_args__isset {
  _RemoteManager_SetSceneValueListSelection_Int32_args__isset() : _sceneId(false), _valueId(false), _value(false) {}
  bool _sceneId;
  bool _valueId;
  bool _value;
} _RemoteManager_SetSceneValueListSelection_Int32_args__isset;

class RemoteManager_SetSceneValueListSelection_Int32_args {
 public:

  RemoteManager_SetSceneValueListSelection_Int32_args() : _sceneId(0), _valueId(0), _value(0) {
  }

  virtual ~RemoteManager_SetSceneValueListSelection_Int32_args() throw() {}

  int8_t _sceneId;
  RemoteValueID _valueId;
  int32_t _value;

  _RemoteManager_SetSceneValueListSelection_Int32_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__valueId(const RemoteValueID val) {
    _valueId = val;
  }

  void __set__value(const int32_t val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneValueListSelection_Int32_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_valueId == rhs._valueId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValueListSelection_Int32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValueListSelection_Int32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneValueListSelection_Int32_pargs {
 public:


  virtual ~RemoteManager_SetSceneValueListSelection_Int32_pargs() throw() {}

  const int8_t* _sceneId;
  const RemoteValueID* _valueId;
  const int32_t* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValueListSelection_Int32_result__isset {
  _RemoteManager_SetSceneValueListSelection_Int32_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValueListSelection_Int32_result__isset;

class RemoteManager_SetSceneValueListSelection_Int32_result {
 public:

  RemoteManager_SetSceneValueListSelection_Int32_result() : success(0) {
  }

  virtual ~RemoteManager_SetSceneValueListSelection_Int32_result() throw() {}

  bool success;

  _RemoteManager_SetSceneValueListSelection_Int32_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SetSceneValueListSelection_Int32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneValueListSelection_Int32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneValueListSelection_Int32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SetSceneValueListSelection_Int32_presult__isset {
  _RemoteManager_SetSceneValueListSelection_Int32_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SetSceneValueListSelection_Int32_presult__isset;

class RemoteManager_SetSceneValueListSelection_Int32_presult {
 public:


  virtual ~RemoteManager_SetSceneValueListSelection_Int32_presult() throw() {}

  bool* success;

  _RemoteManager_SetSceneValueListSelection_Int32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_GetSceneLabel_args__isset {
  _RemoteManager_GetSceneLabel_args__isset() : _sceneId(false) {}
  bool _sceneId;
} _RemoteManager_GetSceneLabel_args__isset;

class RemoteManager_GetSceneLabel_args {
 public:

  RemoteManager_GetSceneLabel_args() : _sceneId(0) {
  }

  virtual ~RemoteManager_GetSceneLabel_args() throw() {}

  int8_t _sceneId;

  _RemoteManager_GetSceneLabel_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  bool operator == (const RemoteManager_GetSceneLabel_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetSceneLabel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetSceneLabel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_GetSceneLabel_pargs {
 public:


  virtual ~RemoteManager_GetSceneLabel_pargs() throw() {}

  const int8_t* _sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetSceneLabel_result__isset {
  _RemoteManager_GetSceneLabel_result__isset() : success(false) {}
  bool success;
} _RemoteManager_GetSceneLabel_result__isset;

class RemoteManager_GetSceneLabel_result {
 public:

  RemoteManager_GetSceneLabel_result() : success("") {
  }

  virtual ~RemoteManager_GetSceneLabel_result() throw() {}

  std::string success;

  _RemoteManager_GetSceneLabel_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RemoteManager_GetSceneLabel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_GetSceneLabel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_GetSceneLabel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_GetSceneLabel_presult__isset {
  _RemoteManager_GetSceneLabel_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_GetSceneLabel_presult__isset;

class RemoteManager_GetSceneLabel_presult {
 public:


  virtual ~RemoteManager_GetSceneLabel_presult() throw() {}

  std::string* success;

  _RemoteManager_GetSceneLabel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SetSceneLabel_args__isset {
  _RemoteManager_SetSceneLabel_args__isset() : _sceneId(false), _value(false) {}
  bool _sceneId;
  bool _value;
} _RemoteManager_SetSceneLabel_args__isset;

class RemoteManager_SetSceneLabel_args {
 public:

  RemoteManager_SetSceneLabel_args() : _sceneId(0), _value("") {
  }

  virtual ~RemoteManager_SetSceneLabel_args() throw() {}

  int8_t _sceneId;
  std::string _value;

  _RemoteManager_SetSceneLabel_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  void __set__value(const std::string& val) {
    _value = val;
  }

  bool operator == (const RemoteManager_SetSceneLabel_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    if (!(_value == rhs._value))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SetSceneLabel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneLabel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneLabel_pargs {
 public:


  virtual ~RemoteManager_SetSceneLabel_pargs() throw() {}

  const int8_t* _sceneId;
  const std::string* _value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneLabel_result {
 public:

  RemoteManager_SetSceneLabel_result() {
  }

  virtual ~RemoteManager_SetSceneLabel_result() throw() {}


  bool operator == (const RemoteManager_SetSceneLabel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteManager_SetSceneLabel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SetSceneLabel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SetSceneLabel_presult {
 public:


  virtual ~RemoteManager_SetSceneLabel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_SceneExists_args__isset {
  _RemoteManager_SceneExists_args__isset() : _sceneId(false) {}
  bool _sceneId;
} _RemoteManager_SceneExists_args__isset;

class RemoteManager_SceneExists_args {
 public:

  RemoteManager_SceneExists_args() : _sceneId(0) {
  }

  virtual ~RemoteManager_SceneExists_args() throw() {}

  int8_t _sceneId;

  _RemoteManager_SceneExists_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  bool operator == (const RemoteManager_SceneExists_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneExists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneExists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_SceneExists_pargs {
 public:


  virtual ~RemoteManager_SceneExists_pargs() throw() {}

  const int8_t* _sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneExists_result__isset {
  _RemoteManager_SceneExists_result__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneExists_result__isset;

class RemoteManager_SceneExists_result {
 public:

  RemoteManager_SceneExists_result() : success(0) {
  }

  virtual ~RemoteManager_SceneExists_result() throw() {}

  bool success;

  _RemoteManager_SceneExists_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_SceneExists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_SceneExists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_SceneExists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_SceneExists_presult__isset {
  _RemoteManager_SceneExists_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_SceneExists_presult__isset;

class RemoteManager_SceneExists_presult {
 public:


  virtual ~RemoteManager_SceneExists_presult() throw() {}

  bool* success;

  _RemoteManager_SceneExists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteManager_ActivateScene_args__isset {
  _RemoteManager_ActivateScene_args__isset() : _sceneId(false) {}
  bool _sceneId;
} _RemoteManager_ActivateScene_args__isset;

class RemoteManager_ActivateScene_args {
 public:

  RemoteManager_ActivateScene_args() : _sceneId(0) {
  }

  virtual ~RemoteManager_ActivateScene_args() throw() {}

  int8_t _sceneId;

  _RemoteManager_ActivateScene_args__isset __isset;

  void __set__sceneId(const int8_t val) {
    _sceneId = val;
  }

  bool operator == (const RemoteManager_ActivateScene_args & rhs) const
  {
    if (!(_sceneId == rhs._sceneId))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_ActivateScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ActivateScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteManager_ActivateScene_pargs {
 public:


  virtual ~RemoteManager_ActivateScene_pargs() throw() {}

  const int8_t* _sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_ActivateScene_result__isset {
  _RemoteManager_ActivateScene_result__isset() : success(false) {}
  bool success;
} _RemoteManager_ActivateScene_result__isset;

class RemoteManager_ActivateScene_result {
 public:

  RemoteManager_ActivateScene_result() : success(0) {
  }

  virtual ~RemoteManager_ActivateScene_result() throw() {}

  bool success;

  _RemoteManager_ActivateScene_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RemoteManager_ActivateScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteManager_ActivateScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteManager_ActivateScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteManager_ActivateScene_presult__isset {
  _RemoteManager_ActivateScene_presult__isset() : success(false) {}
  bool success;
} _RemoteManager_ActivateScene_presult__isset;

class RemoteManager_ActivateScene_presult {
 public:


  virtual ~RemoteManager_ActivateScene_presult() throw() {}

  bool* success;

  _RemoteManager_ActivateScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RemoteManagerClient : virtual public RemoteManagerIf {
 public:
  RemoteManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RemoteManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WriteConfig(const int32_t _homeId);
  void send_WriteConfig(const int32_t _homeId);
  void recv_WriteConfig();
  int8_t GetControllerNodeId(const int32_t _homeId);
  void send_GetControllerNodeId(const int32_t _homeId);
  int8_t recv_GetControllerNodeId();
  bool IsPrimaryController(const int32_t _homeId);
  void send_IsPrimaryController(const int32_t _homeId);
  bool recv_IsPrimaryController();
  bool IsStaticUpdateController(const int32_t _homeId);
  void send_IsStaticUpdateController(const int32_t _homeId);
  bool recv_IsStaticUpdateController();
  bool IsBridgeController(const int32_t _homeId);
  void send_IsBridgeController(const int32_t _homeId);
  bool recv_IsBridgeController();
  void GetLibraryVersion(std::string& _return, const int32_t _homeId);
  void send_GetLibraryVersion(const int32_t _homeId);
  void recv_GetLibraryVersion(std::string& _return);
  void GetLibraryTypeName(std::string& _return, const int32_t _homeId);
  void send_GetLibraryTypeName(const int32_t _homeId);
  void recv_GetLibraryTypeName(std::string& _return);
  int32_t GetSendQueueCount(const int32_t _homeId);
  void send_GetSendQueueCount(const int32_t _homeId);
  int32_t recv_GetSendQueueCount();
  int32_t GetPollInterval();
  void send_GetPollInterval();
  int32_t recv_GetPollInterval();
  void SetPollInterval(const int32_t _seconds);
  void send_SetPollInterval(const int32_t _seconds);
  void recv_SetPollInterval();
  bool EnablePoll(const RemoteValueID _valueId);
  void send_EnablePoll(const RemoteValueID _valueId);
  bool recv_EnablePoll();
  bool DisablePoll(const RemoteValueID _valueId);
  void send_DisablePoll(const RemoteValueID _valueId);
  bool recv_DisablePoll();
  bool isPolled(const RemoteValueID _valueId);
  void send_isPolled(const RemoteValueID _valueId);
  bool recv_isPolled();
  bool RefreshNodeInfo(const int32_t _homeId, const int8_t _nodeId);
  void send_RefreshNodeInfo(const int32_t _homeId, const int8_t _nodeId);
  bool recv_RefreshNodeInfo();
  bool RequestNodeState(const int32_t _homeId, const int8_t _nodeId);
  void send_RequestNodeState(const int32_t _homeId, const int8_t _nodeId);
  bool recv_RequestNodeState();
  bool RequestNodeDynamic(const int32_t _homeId, const int8_t _nodeId);
  void send_RequestNodeDynamic(const int32_t _homeId, const int8_t _nodeId);
  bool recv_RequestNodeDynamic();
  bool IsNodeListeningDevice(const int32_t _homeId, const int8_t _nodeId);
  void send_IsNodeListeningDevice(const int32_t _homeId, const int8_t _nodeId);
  bool recv_IsNodeListeningDevice();
  bool IsNodeRoutingDevice(const int32_t _homeId, const int8_t _nodeId);
  void send_IsNodeRoutingDevice(const int32_t _homeId, const int8_t _nodeId);
  bool recv_IsNodeRoutingDevice();
  int32_t GetNodeMaxBaudRate(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeMaxBaudRate(const int32_t _homeId, const int8_t _nodeId);
  int32_t recv_GetNodeMaxBaudRate();
  int8_t GetNodeVersion(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeVersion(const int32_t _homeId, const int8_t _nodeId);
  int8_t recv_GetNodeVersion();
  int8_t GetNodeSecurity(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeSecurity(const int32_t _homeId, const int8_t _nodeId);
  int8_t recv_GetNodeSecurity();
  int8_t GetNodeBasic(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeBasic(const int32_t _homeId, const int8_t _nodeId);
  int8_t recv_GetNodeBasic();
  int8_t GetNodeGeneric(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeGeneric(const int32_t _homeId, const int8_t _nodeId);
  int8_t recv_GetNodeGeneric();
  int8_t GetNodeSpecific(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeSpecific(const int32_t _homeId, const int8_t _nodeId);
  int8_t recv_GetNodeSpecific();
  void GetNodeType(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeType(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeType(std::string& _return);
  void GetNodeNeighbors(UInt32_ListByte& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeNeighbors(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeNeighbors(UInt32_ListByte& _return);
  void GetNodeManufacturerName(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeManufacturerName(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeManufacturerName(std::string& _return);
  void GetNodeProductName(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeProductName(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeProductName(std::string& _return);
  void GetNodeName(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeName(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeName(std::string& _return);
  void GetNodeLocation(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeLocation(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeLocation(std::string& _return);
  void GetNodeManufacturerId(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeManufacturerId(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeManufacturerId(std::string& _return);
  void GetNodeProductType(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeProductType(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeProductType(std::string& _return);
  void GetNodeProductId(std::string& _return, const int32_t _homeId, const int8_t _nodeId);
  void send_GetNodeProductId(const int32_t _homeId, const int8_t _nodeId);
  void recv_GetNodeProductId(std::string& _return);
  void SetNodeManufacturerName(const int32_t _homeId, const int8_t _nodeId, const std::string& _manufacturerName);
  void send_SetNodeManufacturerName(const int32_t _homeId, const int8_t _nodeId, const std::string& _manufacturerName);
  void recv_SetNodeManufacturerName();
  void SetNodeProductName(const int32_t _homeId, const int8_t _nodeId, const std::string& _productName);
  void send_SetNodeProductName(const int32_t _homeId, const int8_t _nodeId, const std::string& _productName);
  void recv_SetNodeProductName();
  void SetNodeName(const int32_t _homeId, const int8_t _nodeId, const std::string& _nodeName);
  void send_SetNodeName(const int32_t _homeId, const int8_t _nodeId, const std::string& _nodeName);
  void recv_SetNodeName();
  void SetNodeLocation(const int32_t _homeId, const int8_t _nodeId, const std::string& _location);
  void send_SetNodeLocation(const int32_t _homeId, const int8_t _nodeId, const std::string& _location);
  void recv_SetNodeLocation();
  void SetNodeOn(const int32_t _homeId, const int8_t _nodeId);
  void send_SetNodeOn(const int32_t _homeId, const int8_t _nodeId);
  void recv_SetNodeOn();
  void SetNodeOff(const int32_t _homeId, const int8_t _nodeId);
  void send_SetNodeOff(const int32_t _homeId, const int8_t _nodeId);
  void recv_SetNodeOff();
  void SetNodeLevel(const int32_t _homeId, const int8_t _nodeId, const int8_t _level);
  void send_SetNodeLevel(const int32_t _homeId, const int8_t _nodeId, const int8_t _level);
  void recv_SetNodeLevel();
  bool IsNodeInfoReceived(const int32_t _homeId, const int8_t _nodeId);
  void send_IsNodeInfoReceived(const int32_t _homeId, const int8_t _nodeId);
  bool recv_IsNodeInfoReceived();
  void GetNodeClassInformation(Bool_GetNodeClassInformation& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _commandClassId);
  void send_GetNodeClassInformation(const int32_t _homeId, const int8_t _nodeId, const int8_t _commandClassId);
  void recv_GetNodeClassInformation(Bool_GetNodeClassInformation& _return);
  void GetValueLabel(std::string& _return, const RemoteValueID _id);
  void send_GetValueLabel(const RemoteValueID _id);
  void recv_GetValueLabel(std::string& _return);
  void SetValueLabel(const RemoteValueID _id, const std::string& _value);
  void send_SetValueLabel(const RemoteValueID _id, const std::string& _value);
  void recv_SetValueLabel();
  void GetValueUnits(std::string& _return, const RemoteValueID _id);
  void send_GetValueUnits(const RemoteValueID _id);
  void recv_GetValueUnits(std::string& _return);
  void SetValueUnits(const RemoteValueID _id, const std::string& _value);
  void send_SetValueUnits(const RemoteValueID _id, const std::string& _value);
  void recv_SetValueUnits();
  void GetValueHelp(std::string& _return, const RemoteValueID _id);
  void send_GetValueHelp(const RemoteValueID _id);
  void recv_GetValueHelp(std::string& _return);
  void SetValueHelp(const RemoteValueID _id, const std::string& _value);
  void send_SetValueHelp(const RemoteValueID _id, const std::string& _value);
  void recv_SetValueHelp();
  int32_t GetValueMin(const RemoteValueID _id);
  void send_GetValueMin(const RemoteValueID _id);
  int32_t recv_GetValueMin();
  int32_t GetValueMax(const RemoteValueID _id);
  void send_GetValueMax(const RemoteValueID _id);
  int32_t recv_GetValueMax();
  bool IsValueReadOnly(const RemoteValueID _id);
  void send_IsValueReadOnly(const RemoteValueID _id);
  bool recv_IsValueReadOnly();
  bool IsValueWriteOnly(const RemoteValueID _id);
  void send_IsValueWriteOnly(const RemoteValueID _id);
  bool recv_IsValueWriteOnly();
  bool IsValueSet(const RemoteValueID _id);
  void send_IsValueSet(const RemoteValueID _id);
  bool recv_IsValueSet();
  void GetValueAsBool(Bool_Bool& _return, const RemoteValueID _id);
  void send_GetValueAsBool(const RemoteValueID _id);
  void recv_GetValueAsBool(Bool_Bool& _return);
  void GetValueAsByte(Bool_UInt8& _return, const RemoteValueID _id);
  void send_GetValueAsByte(const RemoteValueID _id);
  void recv_GetValueAsByte(Bool_UInt8& _return);
  void GetValueAsFloat(Bool_Float& _return, const RemoteValueID _id);
  void send_GetValueAsFloat(const RemoteValueID _id);
  void recv_GetValueAsFloat(Bool_Float& _return);
  void GetValueAsInt(Bool_Int& _return, const RemoteValueID _id);
  void send_GetValueAsInt(const RemoteValueID _id);
  void recv_GetValueAsInt(Bool_Int& _return);
  void GetValueAsShort(Bool_Int16& _return, const RemoteValueID _id);
  void send_GetValueAsShort(const RemoteValueID _id);
  void recv_GetValueAsShort(Bool_Int16& _return);
  void GetValueAsString(Bool_String& _return, const RemoteValueID _id);
  void send_GetValueAsString(const RemoteValueID _id);
  void recv_GetValueAsString(Bool_String& _return);
  void GetValueListSelection_String(Bool_String& _return, const RemoteValueID _id);
  void send_GetValueListSelection_String(const RemoteValueID _id);
  void recv_GetValueListSelection_String(Bool_String& _return);
  void GetValueListSelection_Int32(Bool_Int& _return, const RemoteValueID _id);
  void send_GetValueListSelection_Int32(const RemoteValueID _id);
  void recv_GetValueListSelection_Int32(Bool_Int& _return);
  void GetValueListItems(Bool_ListString& _return, const RemoteValueID _id);
  void send_GetValueListItems(const RemoteValueID _id);
  void recv_GetValueListItems(Bool_ListString& _return);
  void GetValueFloatPrecision(Bool_UInt8& _return, const RemoteValueID _id);
  void send_GetValueFloatPrecision(const RemoteValueID _id);
  void recv_GetValueFloatPrecision(Bool_UInt8& _return);
  bool SetValue_Bool(const RemoteValueID _id, const bool _value);
  void send_SetValue_Bool(const RemoteValueID _id, const bool _value);
  bool recv_SetValue_Bool();
  bool SetValue_UInt8(const RemoteValueID _id, const int8_t _value);
  void send_SetValue_UInt8(const RemoteValueID _id, const int8_t _value);
  bool recv_SetValue_UInt8();
  bool SetValue_Float(const RemoteValueID _id, const double _value);
  void send_SetValue_Float(const RemoteValueID _id, const double _value);
  bool recv_SetValue_Float();
  bool SetValue_Int32(const RemoteValueID _id, const int32_t _value);
  void send_SetValue_Int32(const RemoteValueID _id, const int32_t _value);
  bool recv_SetValue_Int32();
  bool SetValue_Int16(const RemoteValueID _id, const int16_t _value);
  void send_SetValue_Int16(const RemoteValueID _id, const int16_t _value);
  bool recv_SetValue_Int16();
  bool SetValue_String(const RemoteValueID _id, const std::string& _value);
  void send_SetValue_String(const RemoteValueID _id, const std::string& _value);
  bool recv_SetValue_String();
  bool SetValueListSelection(const RemoteValueID _id, const std::string& _selectedItem);
  void send_SetValueListSelection(const RemoteValueID _id, const std::string& _selectedItem);
  bool recv_SetValueListSelection();
  bool PressButton(const RemoteValueID _id);
  void send_PressButton(const RemoteValueID _id);
  bool recv_PressButton();
  bool ReleaseButton(const RemoteValueID _id);
  void send_ReleaseButton(const RemoteValueID _id);
  bool recv_ReleaseButton();
  int8_t GetNumSwitchPoints(const RemoteValueID _id);
  void send_GetNumSwitchPoints(const RemoteValueID _id);
  int8_t recv_GetNumSwitchPoints();
  bool SetSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes, const int8_t _setback);
  void send_SetSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes, const int8_t _setback);
  bool recv_SetSwitchPoint();
  bool RemoveSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes);
  void send_RemoveSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes);
  bool recv_RemoveSwitchPoint();
  void ClearSwitchPoints(const RemoteValueID _id);
  void send_ClearSwitchPoints(const RemoteValueID _id);
  void recv_ClearSwitchPoints();
  void GetSwitchPoint(GetSwitchPointReturnStruct& _return, const RemoteValueID _id, const int8_t _idx);
  void send_GetSwitchPoint(const RemoteValueID _id, const int8_t _idx);
  void recv_GetSwitchPoint(GetSwitchPointReturnStruct& _return);
  void SwitchAllOn(const int32_t _homeId);
  void send_SwitchAllOn(const int32_t _homeId);
  void recv_SwitchAllOn();
  void SwitchAllOff(const int32_t _homeId);
  void send_SwitchAllOff(const int32_t _homeId);
  void recv_SwitchAllOff();
  bool SetConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param, const int32_t _value, const int8_t _size);
  void send_SetConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param, const int32_t _value, const int8_t _size);
  bool recv_SetConfigParam();
  void RequestConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param);
  void send_RequestConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param);
  void recv_RequestConfigParam();
  void RequestAllConfigParams(const int32_t _homeId, const int8_t _nodeId);
  void send_RequestAllConfigParams(const int32_t _homeId, const int8_t _nodeId);
  void recv_RequestAllConfigParams();
  int8_t GetNumGroups(const int32_t _homeId, const int8_t _nodeId);
  void send_GetNumGroups(const int32_t _homeId, const int8_t _nodeId);
  int8_t recv_GetNumGroups();
  void GetAssociations(GetAssociationsReturnStruct& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx);
  void send_GetAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx);
  void recv_GetAssociations(GetAssociationsReturnStruct& _return);
  int8_t GetMaxAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx);
  void send_GetMaxAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx);
  int8_t recv_GetMaxAssociations();
  void GetGroupLabel(std::string& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx);
  void send_GetGroupLabel(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx);
  void recv_GetGroupLabel(std::string& _return);
  void AddAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId);
  void send_AddAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId);
  void recv_AddAssociation();
  void RemoveAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId);
  void send_RemoveAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId);
  void recv_RemoveAssociation();
  void ResetController(const int32_t _homeId);
  void send_ResetController(const int32_t _homeId);
  void recv_ResetController();
  void SoftReset(const int32_t _homeId);
  void send_SoftReset(const int32_t _homeId);
  void recv_SoftReset();
  int8_t GetNumScenes();
  void send_GetNumScenes();
  int8_t recv_GetNumScenes();
  void GetAllScenes(GetAllScenesReturnStruct& _return);
  void send_GetAllScenes();
  void recv_GetAllScenes(GetAllScenesReturnStruct& _return);
  int8_t CreateScene();
  void send_CreateScene();
  int8_t recv_CreateScene();
  bool RemoveScene(const int8_t _sceneId);
  void send_RemoveScene(const int8_t _sceneId);
  bool recv_RemoveScene();
  bool AddSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value);
  void send_AddSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value);
  bool recv_AddSceneValue_Bool();
  bool AddSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value);
  void send_AddSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value);
  bool recv_AddSceneValue_Uint8();
  bool AddSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value);
  void send_AddSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value);
  bool recv_AddSceneValue_Float();
  bool AddSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  void send_AddSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  bool recv_AddSceneValue_Int32();
  bool AddSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value);
  void send_AddSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value);
  bool recv_AddSceneValue_Int16();
  bool AddSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  void send_AddSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  bool recv_AddSceneValue_String();
  bool AddSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  void send_AddSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  bool recv_AddSceneValueListSelection_String();
  bool AddSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  void send_AddSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  bool recv_AddSceneValueListSelection_Int32();
  bool RemoveSceneValue(const int8_t _sceneId, const RemoteValueID _valueId);
  void send_RemoveSceneValue(const int8_t _sceneId, const RemoteValueID _valueId);
  bool recv_RemoveSceneValue();
  void SceneGetValues(SceneGetValuesReturnStruct& _return, const int8_t _sceneId);
  void send_SceneGetValues(const int8_t _sceneId);
  void recv_SceneGetValues(SceneGetValuesReturnStruct& _return);
  void SceneGetValueAsBool(Bool_Bool& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueAsBool(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueAsBool(Bool_Bool& _return);
  void SceneGetValueAsByte(Bool_UInt8& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueAsByte(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueAsByte(Bool_UInt8& _return);
  void SceneGetValueAsFloat(Bool_Float& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueAsFloat(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueAsFloat(Bool_Float& _return);
  void SceneGetValueAsInt(Bool_Int& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueAsInt(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueAsInt(Bool_Int& _return);
  void SceneGetValueAsShort(Bool_Int16& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueAsShort(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueAsShort(Bool_Int16& _return);
  void SceneGetValueAsString(Bool_String& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueAsString(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueAsString(Bool_String& _return);
  void SceneGetValueListSelection_String(Bool_String& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueListSelection_String(Bool_String& _return);
  void SceneGetValueListSelection_Int32(Bool_Int& _return, const int8_t _sceneId, const RemoteValueID _valueId);
  void send_SceneGetValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId);
  void recv_SceneGetValueListSelection_Int32(Bool_Int& _return);
  bool SetSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value);
  void send_SetSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value);
  bool recv_SetSceneValue_Bool();
  bool SetSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value);
  void send_SetSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value);
  bool recv_SetSceneValue_Uint8();
  bool SetSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value);
  void send_SetSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value);
  bool recv_SetSceneValue_Float();
  bool SetSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  void send_SetSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  bool recv_SetSceneValue_Int32();
  bool SetSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value);
  void send_SetSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value);
  bool recv_SetSceneValue_Int16();
  bool SetSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  void send_SetSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  bool recv_SetSceneValue_String();
  bool SetSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  void send_SetSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value);
  bool recv_SetSceneValueListSelection_String();
  bool SetSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  void send_SetSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value);
  bool recv_SetSceneValueListSelection_Int32();
  void GetSceneLabel(std::string& _return, const int8_t _sceneId);
  void send_GetSceneLabel(const int8_t _sceneId);
  void recv_GetSceneLabel(std::string& _return);
  void SetSceneLabel(const int8_t _sceneId, const std::string& _value);
  void send_SetSceneLabel(const int8_t _sceneId, const std::string& _value);
  void recv_SetSceneLabel();
  bool SceneExists(const int8_t _sceneId);
  void send_SceneExists(const int8_t _sceneId);
  bool recv_SceneExists();
  bool ActivateScene(const int8_t _sceneId);
  void send_ActivateScene(const int8_t _sceneId);
  bool recv_ActivateScene();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RemoteManagerProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<RemoteManagerIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (RemoteManagerProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_WriteConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetControllerNodeId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsPrimaryController(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsStaticUpdateController(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsBridgeController(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLibraryVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLibraryTypeName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSendQueueCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPollInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetPollInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnablePoll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisablePoll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isPolled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RefreshNodeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestNodeState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestNodeDynamic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsNodeListeningDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsNodeRoutingDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeMaxBaudRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeSecurity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeBasic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeGeneric(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeSpecific(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeNeighbors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeManufacturerName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeProductName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeManufacturerId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeProductType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeProductId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeManufacturerName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeProductName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeOn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeOff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNodeLevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsNodeInfoReceived(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNodeClassInformation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueLabel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValueLabel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueUnits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValueUnits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueHelp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValueHelp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueMin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueMax(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsValueReadOnly(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsValueWriteOnly(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsValueSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueAsBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueAsByte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueAsFloat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueAsInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueAsShort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueAsString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueListSelection_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueListSelection_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueListItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetValueFloatPrecision(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue_Bool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue_UInt8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue_Float(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue_Int16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValue_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetValueListSelection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PressButton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReleaseButton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumSwitchPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSwitchPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveSwitchPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ClearSwitchPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSwitchPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SwitchAllOn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SwitchAllOff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetConfigParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestConfigParam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestAllConfigParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAssociations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMaxAssociations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetGroupLabel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddAssociation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveAssociation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetController(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SoftReset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNumScenes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAllScenes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValue_Bool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValue_Uint8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValue_Float(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValue_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValue_Int16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValue_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValueListSelection_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSceneValueListSelection_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveSceneValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueAsBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueAsByte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueAsFloat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueAsInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueAsShort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueAsString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueListSelection_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneGetValueListSelection_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValue_Bool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValue_Uint8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValue_Float(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValue_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValue_Int16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValue_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValueListSelection_String(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneValueListSelection_Int32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSceneLabel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSceneLabel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SceneExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ActivateScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RemoteManagerProcessor(boost::shared_ptr<RemoteManagerIf> iface) :
    iface_(iface) {
    processMap_["WriteConfig"] = &RemoteManagerProcessor::process_WriteConfig;
    processMap_["GetControllerNodeId"] = &RemoteManagerProcessor::process_GetControllerNodeId;
    processMap_["IsPrimaryController"] = &RemoteManagerProcessor::process_IsPrimaryController;
    processMap_["IsStaticUpdateController"] = &RemoteManagerProcessor::process_IsStaticUpdateController;
    processMap_["IsBridgeController"] = &RemoteManagerProcessor::process_IsBridgeController;
    processMap_["GetLibraryVersion"] = &RemoteManagerProcessor::process_GetLibraryVersion;
    processMap_["GetLibraryTypeName"] = &RemoteManagerProcessor::process_GetLibraryTypeName;
    processMap_["GetSendQueueCount"] = &RemoteManagerProcessor::process_GetSendQueueCount;
    processMap_["GetPollInterval"] = &RemoteManagerProcessor::process_GetPollInterval;
    processMap_["SetPollInterval"] = &RemoteManagerProcessor::process_SetPollInterval;
    processMap_["EnablePoll"] = &RemoteManagerProcessor::process_EnablePoll;
    processMap_["DisablePoll"] = &RemoteManagerProcessor::process_DisablePoll;
    processMap_["isPolled"] = &RemoteManagerProcessor::process_isPolled;
    processMap_["RefreshNodeInfo"] = &RemoteManagerProcessor::process_RefreshNodeInfo;
    processMap_["RequestNodeState"] = &RemoteManagerProcessor::process_RequestNodeState;
    processMap_["RequestNodeDynamic"] = &RemoteManagerProcessor::process_RequestNodeDynamic;
    processMap_["IsNodeListeningDevice"] = &RemoteManagerProcessor::process_IsNodeListeningDevice;
    processMap_["IsNodeRoutingDevice"] = &RemoteManagerProcessor::process_IsNodeRoutingDevice;
    processMap_["GetNodeMaxBaudRate"] = &RemoteManagerProcessor::process_GetNodeMaxBaudRate;
    processMap_["GetNodeVersion"] = &RemoteManagerProcessor::process_GetNodeVersion;
    processMap_["GetNodeSecurity"] = &RemoteManagerProcessor::process_GetNodeSecurity;
    processMap_["GetNodeBasic"] = &RemoteManagerProcessor::process_GetNodeBasic;
    processMap_["GetNodeGeneric"] = &RemoteManagerProcessor::process_GetNodeGeneric;
    processMap_["GetNodeSpecific"] = &RemoteManagerProcessor::process_GetNodeSpecific;
    processMap_["GetNodeType"] = &RemoteManagerProcessor::process_GetNodeType;
    processMap_["GetNodeNeighbors"] = &RemoteManagerProcessor::process_GetNodeNeighbors;
    processMap_["GetNodeManufacturerName"] = &RemoteManagerProcessor::process_GetNodeManufacturerName;
    processMap_["GetNodeProductName"] = &RemoteManagerProcessor::process_GetNodeProductName;
    processMap_["GetNodeName"] = &RemoteManagerProcessor::process_GetNodeName;
    processMap_["GetNodeLocation"] = &RemoteManagerProcessor::process_GetNodeLocation;
    processMap_["GetNodeManufacturerId"] = &RemoteManagerProcessor::process_GetNodeManufacturerId;
    processMap_["GetNodeProductType"] = &RemoteManagerProcessor::process_GetNodeProductType;
    processMap_["GetNodeProductId"] = &RemoteManagerProcessor::process_GetNodeProductId;
    processMap_["SetNodeManufacturerName"] = &RemoteManagerProcessor::process_SetNodeManufacturerName;
    processMap_["SetNodeProductName"] = &RemoteManagerProcessor::process_SetNodeProductName;
    processMap_["SetNodeName"] = &RemoteManagerProcessor::process_SetNodeName;
    processMap_["SetNodeLocation"] = &RemoteManagerProcessor::process_SetNodeLocation;
    processMap_["SetNodeOn"] = &RemoteManagerProcessor::process_SetNodeOn;
    processMap_["SetNodeOff"] = &RemoteManagerProcessor::process_SetNodeOff;
    processMap_["SetNodeLevel"] = &RemoteManagerProcessor::process_SetNodeLevel;
    processMap_["IsNodeInfoReceived"] = &RemoteManagerProcessor::process_IsNodeInfoReceived;
    processMap_["GetNodeClassInformation"] = &RemoteManagerProcessor::process_GetNodeClassInformation;
    processMap_["GetValueLabel"] = &RemoteManagerProcessor::process_GetValueLabel;
    processMap_["SetValueLabel"] = &RemoteManagerProcessor::process_SetValueLabel;
    processMap_["GetValueUnits"] = &RemoteManagerProcessor::process_GetValueUnits;
    processMap_["SetValueUnits"] = &RemoteManagerProcessor::process_SetValueUnits;
    processMap_["GetValueHelp"] = &RemoteManagerProcessor::process_GetValueHelp;
    processMap_["SetValueHelp"] = &RemoteManagerProcessor::process_SetValueHelp;
    processMap_["GetValueMin"] = &RemoteManagerProcessor::process_GetValueMin;
    processMap_["GetValueMax"] = &RemoteManagerProcessor::process_GetValueMax;
    processMap_["IsValueReadOnly"] = &RemoteManagerProcessor::process_IsValueReadOnly;
    processMap_["IsValueWriteOnly"] = &RemoteManagerProcessor::process_IsValueWriteOnly;
    processMap_["IsValueSet"] = &RemoteManagerProcessor::process_IsValueSet;
    processMap_["GetValueAsBool"] = &RemoteManagerProcessor::process_GetValueAsBool;
    processMap_["GetValueAsByte"] = &RemoteManagerProcessor::process_GetValueAsByte;
    processMap_["GetValueAsFloat"] = &RemoteManagerProcessor::process_GetValueAsFloat;
    processMap_["GetValueAsInt"] = &RemoteManagerProcessor::process_GetValueAsInt;
    processMap_["GetValueAsShort"] = &RemoteManagerProcessor::process_GetValueAsShort;
    processMap_["GetValueAsString"] = &RemoteManagerProcessor::process_GetValueAsString;
    processMap_["GetValueListSelection_String"] = &RemoteManagerProcessor::process_GetValueListSelection_String;
    processMap_["GetValueListSelection_Int32"] = &RemoteManagerProcessor::process_GetValueListSelection_Int32;
    processMap_["GetValueListItems"] = &RemoteManagerProcessor::process_GetValueListItems;
    processMap_["GetValueFloatPrecision"] = &RemoteManagerProcessor::process_GetValueFloatPrecision;
    processMap_["SetValue_Bool"] = &RemoteManagerProcessor::process_SetValue_Bool;
    processMap_["SetValue_UInt8"] = &RemoteManagerProcessor::process_SetValue_UInt8;
    processMap_["SetValue_Float"] = &RemoteManagerProcessor::process_SetValue_Float;
    processMap_["SetValue_Int32"] = &RemoteManagerProcessor::process_SetValue_Int32;
    processMap_["SetValue_Int16"] = &RemoteManagerProcessor::process_SetValue_Int16;
    processMap_["SetValue_String"] = &RemoteManagerProcessor::process_SetValue_String;
    processMap_["SetValueListSelection"] = &RemoteManagerProcessor::process_SetValueListSelection;
    processMap_["PressButton"] = &RemoteManagerProcessor::process_PressButton;
    processMap_["ReleaseButton"] = &RemoteManagerProcessor::process_ReleaseButton;
    processMap_["GetNumSwitchPoints"] = &RemoteManagerProcessor::process_GetNumSwitchPoints;
    processMap_["SetSwitchPoint"] = &RemoteManagerProcessor::process_SetSwitchPoint;
    processMap_["RemoveSwitchPoint"] = &RemoteManagerProcessor::process_RemoveSwitchPoint;
    processMap_["ClearSwitchPoints"] = &RemoteManagerProcessor::process_ClearSwitchPoints;
    processMap_["GetSwitchPoint"] = &RemoteManagerProcessor::process_GetSwitchPoint;
    processMap_["SwitchAllOn"] = &RemoteManagerProcessor::process_SwitchAllOn;
    processMap_["SwitchAllOff"] = &RemoteManagerProcessor::process_SwitchAllOff;
    processMap_["SetConfigParam"] = &RemoteManagerProcessor::process_SetConfigParam;
    processMap_["RequestConfigParam"] = &RemoteManagerProcessor::process_RequestConfigParam;
    processMap_["RequestAllConfigParams"] = &RemoteManagerProcessor::process_RequestAllConfigParams;
    processMap_["GetNumGroups"] = &RemoteManagerProcessor::process_GetNumGroups;
    processMap_["GetAssociations"] = &RemoteManagerProcessor::process_GetAssociations;
    processMap_["GetMaxAssociations"] = &RemoteManagerProcessor::process_GetMaxAssociations;
    processMap_["GetGroupLabel"] = &RemoteManagerProcessor::process_GetGroupLabel;
    processMap_["AddAssociation"] = &RemoteManagerProcessor::process_AddAssociation;
    processMap_["RemoveAssociation"] = &RemoteManagerProcessor::process_RemoveAssociation;
    processMap_["ResetController"] = &RemoteManagerProcessor::process_ResetController;
    processMap_["SoftReset"] = &RemoteManagerProcessor::process_SoftReset;
    processMap_["GetNumScenes"] = &RemoteManagerProcessor::process_GetNumScenes;
    processMap_["GetAllScenes"] = &RemoteManagerProcessor::process_GetAllScenes;
    processMap_["CreateScene"] = &RemoteManagerProcessor::process_CreateScene;
    processMap_["RemoveScene"] = &RemoteManagerProcessor::process_RemoveScene;
    processMap_["AddSceneValue_Bool"] = &RemoteManagerProcessor::process_AddSceneValue_Bool;
    processMap_["AddSceneValue_Uint8"] = &RemoteManagerProcessor::process_AddSceneValue_Uint8;
    processMap_["AddSceneValue_Float"] = &RemoteManagerProcessor::process_AddSceneValue_Float;
    processMap_["AddSceneValue_Int32"] = &RemoteManagerProcessor::process_AddSceneValue_Int32;
    processMap_["AddSceneValue_Int16"] = &RemoteManagerProcessor::process_AddSceneValue_Int16;
    processMap_["AddSceneValue_String"] = &RemoteManagerProcessor::process_AddSceneValue_String;
    processMap_["AddSceneValueListSelection_String"] = &RemoteManagerProcessor::process_AddSceneValueListSelection_String;
    processMap_["AddSceneValueListSelection_Int32"] = &RemoteManagerProcessor::process_AddSceneValueListSelection_Int32;
    processMap_["RemoveSceneValue"] = &RemoteManagerProcessor::process_RemoveSceneValue;
    processMap_["SceneGetValues"] = &RemoteManagerProcessor::process_SceneGetValues;
    processMap_["SceneGetValueAsBool"] = &RemoteManagerProcessor::process_SceneGetValueAsBool;
    processMap_["SceneGetValueAsByte"] = &RemoteManagerProcessor::process_SceneGetValueAsByte;
    processMap_["SceneGetValueAsFloat"] = &RemoteManagerProcessor::process_SceneGetValueAsFloat;
    processMap_["SceneGetValueAsInt"] = &RemoteManagerProcessor::process_SceneGetValueAsInt;
    processMap_["SceneGetValueAsShort"] = &RemoteManagerProcessor::process_SceneGetValueAsShort;
    processMap_["SceneGetValueAsString"] = &RemoteManagerProcessor::process_SceneGetValueAsString;
    processMap_["SceneGetValueListSelection_String"] = &RemoteManagerProcessor::process_SceneGetValueListSelection_String;
    processMap_["SceneGetValueListSelection_Int32"] = &RemoteManagerProcessor::process_SceneGetValueListSelection_Int32;
    processMap_["SetSceneValue_Bool"] = &RemoteManagerProcessor::process_SetSceneValue_Bool;
    processMap_["SetSceneValue_Uint8"] = &RemoteManagerProcessor::process_SetSceneValue_Uint8;
    processMap_["SetSceneValue_Float"] = &RemoteManagerProcessor::process_SetSceneValue_Float;
    processMap_["SetSceneValue_Int32"] = &RemoteManagerProcessor::process_SetSceneValue_Int32;
    processMap_["SetSceneValue_Int16"] = &RemoteManagerProcessor::process_SetSceneValue_Int16;
    processMap_["SetSceneValue_String"] = &RemoteManagerProcessor::process_SetSceneValue_String;
    processMap_["SetSceneValueListSelection_String"] = &RemoteManagerProcessor::process_SetSceneValueListSelection_String;
    processMap_["SetSceneValueListSelection_Int32"] = &RemoteManagerProcessor::process_SetSceneValueListSelection_Int32;
    processMap_["GetSceneLabel"] = &RemoteManagerProcessor::process_GetSceneLabel;
    processMap_["SetSceneLabel"] = &RemoteManagerProcessor::process_SetSceneLabel;
    processMap_["SceneExists"] = &RemoteManagerProcessor::process_SceneExists;
    processMap_["ActivateScene"] = &RemoteManagerProcessor::process_ActivateScene;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~RemoteManagerProcessor() {}
};

class RemoteManagerMultiface : virtual public RemoteManagerIf {
 public:
  RemoteManagerMultiface(std::vector<boost::shared_ptr<RemoteManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RemoteManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RemoteManagerIf> > ifaces_;
  RemoteManagerMultiface() {}
  void add(boost::shared_ptr<RemoteManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void WriteConfig(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->WriteConfig(_homeId);
    }
  }

  int8_t GetControllerNodeId(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetControllerNodeId(_homeId);
      } else {
        ifaces_[i]->GetControllerNodeId(_homeId);
      }
    }
  }

  bool IsPrimaryController(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsPrimaryController(_homeId);
      } else {
        ifaces_[i]->IsPrimaryController(_homeId);
      }
    }
  }

  bool IsStaticUpdateController(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsStaticUpdateController(_homeId);
      } else {
        ifaces_[i]->IsStaticUpdateController(_homeId);
      }
    }
  }

  bool IsBridgeController(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsBridgeController(_homeId);
      } else {
        ifaces_[i]->IsBridgeController(_homeId);
      }
    }
  }

  void GetLibraryVersion(std::string& _return, const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetLibraryVersion(_return, _homeId);
        return;
      } else {
        ifaces_[i]->GetLibraryVersion(_return, _homeId);
      }
    }
  }

  void GetLibraryTypeName(std::string& _return, const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetLibraryTypeName(_return, _homeId);
        return;
      } else {
        ifaces_[i]->GetLibraryTypeName(_return, _homeId);
      }
    }
  }

  int32_t GetSendQueueCount(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetSendQueueCount(_homeId);
      } else {
        ifaces_[i]->GetSendQueueCount(_homeId);
      }
    }
  }

  int32_t GetPollInterval() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetPollInterval();
      } else {
        ifaces_[i]->GetPollInterval();
      }
    }
  }

  void SetPollInterval(const int32_t _seconds) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetPollInterval(_seconds);
    }
  }

  bool EnablePoll(const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->EnablePoll(_valueId);
      } else {
        ifaces_[i]->EnablePoll(_valueId);
      }
    }
  }

  bool DisablePoll(const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->DisablePoll(_valueId);
      } else {
        ifaces_[i]->DisablePoll(_valueId);
      }
    }
  }

  bool isPolled(const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->isPolled(_valueId);
      } else {
        ifaces_[i]->isPolled(_valueId);
      }
    }
  }

  bool RefreshNodeInfo(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RefreshNodeInfo(_homeId, _nodeId);
      } else {
        ifaces_[i]->RefreshNodeInfo(_homeId, _nodeId);
      }
    }
  }

  bool RequestNodeState(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RequestNodeState(_homeId, _nodeId);
      } else {
        ifaces_[i]->RequestNodeState(_homeId, _nodeId);
      }
    }
  }

  bool RequestNodeDynamic(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RequestNodeDynamic(_homeId, _nodeId);
      } else {
        ifaces_[i]->RequestNodeDynamic(_homeId, _nodeId);
      }
    }
  }

  bool IsNodeListeningDevice(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsNodeListeningDevice(_homeId, _nodeId);
      } else {
        ifaces_[i]->IsNodeListeningDevice(_homeId, _nodeId);
      }
    }
  }

  bool IsNodeRoutingDevice(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsNodeRoutingDevice(_homeId, _nodeId);
      } else {
        ifaces_[i]->IsNodeRoutingDevice(_homeId, _nodeId);
      }
    }
  }

  int32_t GetNodeMaxBaudRate(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNodeMaxBaudRate(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNodeMaxBaudRate(_homeId, _nodeId);
      }
    }
  }

  int8_t GetNodeVersion(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNodeVersion(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNodeVersion(_homeId, _nodeId);
      }
    }
  }

  int8_t GetNodeSecurity(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNodeSecurity(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNodeSecurity(_homeId, _nodeId);
      }
    }
  }

  int8_t GetNodeBasic(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNodeBasic(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNodeBasic(_homeId, _nodeId);
      }
    }
  }

  int8_t GetNodeGeneric(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNodeGeneric(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNodeGeneric(_homeId, _nodeId);
      }
    }
  }

  int8_t GetNodeSpecific(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNodeSpecific(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNodeSpecific(_homeId, _nodeId);
      }
    }
  }

  void GetNodeType(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeType(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeType(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeNeighbors(UInt32_ListByte& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeNeighbors(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeNeighbors(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeManufacturerName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeManufacturerName(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeManufacturerName(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeProductName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeProductName(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeProductName(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeName(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeName(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeName(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeLocation(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeLocation(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeLocation(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeManufacturerId(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeManufacturerId(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeManufacturerId(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeProductType(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeProductType(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeProductType(_return, _homeId, _nodeId);
      }
    }
  }

  void GetNodeProductId(std::string& _return, const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeProductId(_return, _homeId, _nodeId);
        return;
      } else {
        ifaces_[i]->GetNodeProductId(_return, _homeId, _nodeId);
      }
    }
  }

  void SetNodeManufacturerName(const int32_t _homeId, const int8_t _nodeId, const std::string& _manufacturerName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeManufacturerName(_homeId, _nodeId, _manufacturerName);
    }
  }

  void SetNodeProductName(const int32_t _homeId, const int8_t _nodeId, const std::string& _productName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeProductName(_homeId, _nodeId, _productName);
    }
  }

  void SetNodeName(const int32_t _homeId, const int8_t _nodeId, const std::string& _nodeName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeName(_homeId, _nodeId, _nodeName);
    }
  }

  void SetNodeLocation(const int32_t _homeId, const int8_t _nodeId, const std::string& _location) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeLocation(_homeId, _nodeId, _location);
    }
  }

  void SetNodeOn(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeOn(_homeId, _nodeId);
    }
  }

  void SetNodeOff(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeOff(_homeId, _nodeId);
    }
  }

  void SetNodeLevel(const int32_t _homeId, const int8_t _nodeId, const int8_t _level) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetNodeLevel(_homeId, _nodeId, _level);
    }
  }

  bool IsNodeInfoReceived(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsNodeInfoReceived(_homeId, _nodeId);
      } else {
        ifaces_[i]->IsNodeInfoReceived(_homeId, _nodeId);
      }
    }
  }

  void GetNodeClassInformation(Bool_GetNodeClassInformation& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _commandClassId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetNodeClassInformation(_return, _homeId, _nodeId, _commandClassId);
        return;
      } else {
        ifaces_[i]->GetNodeClassInformation(_return, _homeId, _nodeId, _commandClassId);
      }
    }
  }

  void GetValueLabel(std::string& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueLabel(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueLabel(_return, _id);
      }
    }
  }

  void SetValueLabel(const RemoteValueID _id, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetValueLabel(_id, _value);
    }
  }

  void GetValueUnits(std::string& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueUnits(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueUnits(_return, _id);
      }
    }
  }

  void SetValueUnits(const RemoteValueID _id, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetValueUnits(_id, _value);
    }
  }

  void GetValueHelp(std::string& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueHelp(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueHelp(_return, _id);
      }
    }
  }

  void SetValueHelp(const RemoteValueID _id, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetValueHelp(_id, _value);
    }
  }

  int32_t GetValueMin(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetValueMin(_id);
      } else {
        ifaces_[i]->GetValueMin(_id);
      }
    }
  }

  int32_t GetValueMax(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetValueMax(_id);
      } else {
        ifaces_[i]->GetValueMax(_id);
      }
    }
  }

  bool IsValueReadOnly(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsValueReadOnly(_id);
      } else {
        ifaces_[i]->IsValueReadOnly(_id);
      }
    }
  }

  bool IsValueWriteOnly(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsValueWriteOnly(_id);
      } else {
        ifaces_[i]->IsValueWriteOnly(_id);
      }
    }
  }

  bool IsValueSet(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->IsValueSet(_id);
      } else {
        ifaces_[i]->IsValueSet(_id);
      }
    }
  }

  void GetValueAsBool(Bool_Bool& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueAsBool(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueAsBool(_return, _id);
      }
    }
  }

  void GetValueAsByte(Bool_UInt8& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueAsByte(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueAsByte(_return, _id);
      }
    }
  }

  void GetValueAsFloat(Bool_Float& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueAsFloat(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueAsFloat(_return, _id);
      }
    }
  }

  void GetValueAsInt(Bool_Int& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueAsInt(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueAsInt(_return, _id);
      }
    }
  }

  void GetValueAsShort(Bool_Int16& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueAsShort(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueAsShort(_return, _id);
      }
    }
  }

  void GetValueAsString(Bool_String& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueAsString(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueAsString(_return, _id);
      }
    }
  }

  void GetValueListSelection_String(Bool_String& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueListSelection_String(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueListSelection_String(_return, _id);
      }
    }
  }

  void GetValueListSelection_Int32(Bool_Int& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueListSelection_Int32(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueListSelection_Int32(_return, _id);
      }
    }
  }

  void GetValueListItems(Bool_ListString& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueListItems(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueListItems(_return, _id);
      }
    }
  }

  void GetValueFloatPrecision(Bool_UInt8& _return, const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetValueFloatPrecision(_return, _id);
        return;
      } else {
        ifaces_[i]->GetValueFloatPrecision(_return, _id);
      }
    }
  }

  bool SetValue_Bool(const RemoteValueID _id, const bool _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValue_Bool(_id, _value);
      } else {
        ifaces_[i]->SetValue_Bool(_id, _value);
      }
    }
  }

  bool SetValue_UInt8(const RemoteValueID _id, const int8_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValue_UInt8(_id, _value);
      } else {
        ifaces_[i]->SetValue_UInt8(_id, _value);
      }
    }
  }

  bool SetValue_Float(const RemoteValueID _id, const double _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValue_Float(_id, _value);
      } else {
        ifaces_[i]->SetValue_Float(_id, _value);
      }
    }
  }

  bool SetValue_Int32(const RemoteValueID _id, const int32_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValue_Int32(_id, _value);
      } else {
        ifaces_[i]->SetValue_Int32(_id, _value);
      }
    }
  }

  bool SetValue_Int16(const RemoteValueID _id, const int16_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValue_Int16(_id, _value);
      } else {
        ifaces_[i]->SetValue_Int16(_id, _value);
      }
    }
  }

  bool SetValue_String(const RemoteValueID _id, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValue_String(_id, _value);
      } else {
        ifaces_[i]->SetValue_String(_id, _value);
      }
    }
  }

  bool SetValueListSelection(const RemoteValueID _id, const std::string& _selectedItem) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetValueListSelection(_id, _selectedItem);
      } else {
        ifaces_[i]->SetValueListSelection(_id, _selectedItem);
      }
    }
  }

  bool PressButton(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->PressButton(_id);
      } else {
        ifaces_[i]->PressButton(_id);
      }
    }
  }

  bool ReleaseButton(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ReleaseButton(_id);
      } else {
        ifaces_[i]->ReleaseButton(_id);
      }
    }
  }

  int8_t GetNumSwitchPoints(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNumSwitchPoints(_id);
      } else {
        ifaces_[i]->GetNumSwitchPoints(_id);
      }
    }
  }

  bool SetSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes, const int8_t _setback) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSwitchPoint(_id, _hours, _minutes, _setback);
      } else {
        ifaces_[i]->SetSwitchPoint(_id, _hours, _minutes, _setback);
      }
    }
  }

  bool RemoveSwitchPoint(const RemoteValueID _id, const int8_t _hours, const int8_t _minutes) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RemoveSwitchPoint(_id, _hours, _minutes);
      } else {
        ifaces_[i]->RemoveSwitchPoint(_id, _hours, _minutes);
      }
    }
  }

  void ClearSwitchPoints(const RemoteValueID _id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->ClearSwitchPoints(_id);
    }
  }

  void GetSwitchPoint(GetSwitchPointReturnStruct& _return, const RemoteValueID _id, const int8_t _idx) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetSwitchPoint(_return, _id, _idx);
        return;
      } else {
        ifaces_[i]->GetSwitchPoint(_return, _id, _idx);
      }
    }
  }

  void SwitchAllOn(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SwitchAllOn(_homeId);
    }
  }

  void SwitchAllOff(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SwitchAllOff(_homeId);
    }
  }

  bool SetConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param, const int32_t _value, const int8_t _size) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetConfigParam(_homeId, _nodeId, _param, _value, _size);
      } else {
        ifaces_[i]->SetConfigParam(_homeId, _nodeId, _param, _value, _size);
      }
    }
  }

  void RequestConfigParam(const int32_t _homeId, const int8_t _nodeId, const int8_t _param) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->RequestConfigParam(_homeId, _nodeId, _param);
    }
  }

  void RequestAllConfigParams(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->RequestAllConfigParams(_homeId, _nodeId);
    }
  }

  int8_t GetNumGroups(const int32_t _homeId, const int8_t _nodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNumGroups(_homeId, _nodeId);
      } else {
        ifaces_[i]->GetNumGroups(_homeId, _nodeId);
      }
    }
  }

  void GetAssociations(GetAssociationsReturnStruct& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetAssociations(_return, _homeId, _nodeId, _groupIdx);
        return;
      } else {
        ifaces_[i]->GetAssociations(_return, _homeId, _nodeId, _groupIdx);
      }
    }
  }

  int8_t GetMaxAssociations(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetMaxAssociations(_homeId, _nodeId, _groupIdx);
      } else {
        ifaces_[i]->GetMaxAssociations(_homeId, _nodeId, _groupIdx);
      }
    }
  }

  void GetGroupLabel(std::string& _return, const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetGroupLabel(_return, _homeId, _nodeId, _groupIdx);
        return;
      } else {
        ifaces_[i]->GetGroupLabel(_return, _homeId, _nodeId, _groupIdx);
      }
    }
  }

  void AddAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->AddAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
    }
  }

  void RemoveAssociation(const int32_t _homeId, const int8_t _nodeId, const int8_t _groupIdx, const int8_t _targetNodeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->RemoveAssociation(_homeId, _nodeId, _groupIdx, _targetNodeId);
    }
  }

  void ResetController(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->ResetController(_homeId);
    }
  }

  void SoftReset(const int32_t _homeId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SoftReset(_homeId);
    }
  }

  int8_t GetNumScenes() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->GetNumScenes();
      } else {
        ifaces_[i]->GetNumScenes();
      }
    }
  }

  void GetAllScenes(GetAllScenesReturnStruct& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetAllScenes(_return);
        return;
      } else {
        ifaces_[i]->GetAllScenes(_return);
      }
    }
  }

  int8_t CreateScene() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->CreateScene();
      } else {
        ifaces_[i]->CreateScene();
      }
    }
  }

  bool RemoveScene(const int8_t _sceneId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RemoveScene(_sceneId);
      } else {
        ifaces_[i]->RemoveScene(_sceneId);
      }
    }
  }

  bool AddSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValue_Bool(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValue_Bool(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValue_Uint8(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValue_Uint8(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValue_Float(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValue_Float(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValue_Int32(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValue_Int32(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValue_Int16(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValue_Int16(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValue_String(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValue_String(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValueListSelection_String(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValueListSelection_String(_sceneId, _valueId, _value);
      }
    }
  }

  bool AddSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->AddSceneValueListSelection_Int32(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->AddSceneValueListSelection_Int32(_sceneId, _valueId, _value);
      }
    }
  }

  bool RemoveSceneValue(const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->RemoveSceneValue(_sceneId, _valueId);
      } else {
        ifaces_[i]->RemoveSceneValue(_sceneId, _valueId);
      }
    }
  }

  void SceneGetValues(SceneGetValuesReturnStruct& _return, const int8_t _sceneId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValues(_return, _sceneId);
        return;
      } else {
        ifaces_[i]->SceneGetValues(_return, _sceneId);
      }
    }
  }

  void SceneGetValueAsBool(Bool_Bool& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueAsBool(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueAsBool(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueAsByte(Bool_UInt8& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueAsByte(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueAsByte(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueAsFloat(Bool_Float& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueAsFloat(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueAsFloat(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueAsInt(Bool_Int& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueAsInt(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueAsInt(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueAsShort(Bool_Int16& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueAsShort(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueAsShort(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueAsString(Bool_String& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueAsString(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueAsString(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueListSelection_String(Bool_String& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueListSelection_String(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueListSelection_String(_return, _sceneId, _valueId);
      }
    }
  }

  void SceneGetValueListSelection_Int32(Bool_Int& _return, const int8_t _sceneId, const RemoteValueID _valueId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->SceneGetValueListSelection_Int32(_return, _sceneId, _valueId);
        return;
      } else {
        ifaces_[i]->SceneGetValueListSelection_Int32(_return, _sceneId, _valueId);
      }
    }
  }

  bool SetSceneValue_Bool(const int8_t _sceneId, const RemoteValueID _valueId, const bool _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValue_Bool(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValue_Bool(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValue_Uint8(const int8_t _sceneId, const RemoteValueID _valueId, const int8_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValue_Uint8(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValue_Uint8(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValue_Float(const int8_t _sceneId, const RemoteValueID _valueId, const double _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValue_Float(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValue_Float(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValue_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValue_Int32(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValue_Int32(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValue_Int16(const int8_t _sceneId, const RemoteValueID _valueId, const int16_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValue_Int16(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValue_Int16(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValue_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValue_String(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValue_String(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValueListSelection_String(const int8_t _sceneId, const RemoteValueID _valueId, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValueListSelection_String(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValueListSelection_String(_sceneId, _valueId, _value);
      }
    }
  }

  bool SetSceneValueListSelection_Int32(const int8_t _sceneId, const RemoteValueID _valueId, const int32_t _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SetSceneValueListSelection_Int32(_sceneId, _valueId, _value);
      } else {
        ifaces_[i]->SetSceneValueListSelection_Int32(_sceneId, _valueId, _value);
      }
    }
  }

  void GetSceneLabel(std::string& _return, const int8_t _sceneId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetSceneLabel(_return, _sceneId);
        return;
      } else {
        ifaces_[i]->GetSceneLabel(_return, _sceneId);
      }
    }
  }

  void SetSceneLabel(const int8_t _sceneId, const std::string& _value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetSceneLabel(_sceneId, _value);
    }
  }

  bool SceneExists(const int8_t _sceneId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->SceneExists(_sceneId);
      } else {
        ifaces_[i]->SceneExists(_sceneId);
      }
    }
  }

  bool ActivateScene(const int8_t _sceneId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ActivateScene(_sceneId);
      } else {
        ifaces_[i]->ActivateScene(_sceneId);
      }
    }
  }

};

} // namespace

#endif
