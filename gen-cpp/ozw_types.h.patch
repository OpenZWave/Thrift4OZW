*** gen-cpp/ozw_types.h.orig	2012-02-28 18:11:22.654899095 +0200
--- gen-cpp/ozw_types.h.patched	2012-02-27 00:03:07.344313780 +0200
***************
*** 1,11 ****
- /**
-  * Autogenerated by Thrift Compiler (0.9.0-dev)
-  *
-  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-  *  @generated
-  */
  #ifndef ozw_TYPES_H
  #define ozw_TYPES_H
  
  #include <Thrift.h>
  #include <TApplicationException.h>
--- 1,5 ----
***************
*** 90,110 ****
    static const char* ascii_fingerprint; // = "A30F44ED1C2FF443554DFCCDE82F70EE";
    static const uint8_t binary_fingerprint[16]; // = {0xA3,0x0F,0x44,0xED,0x1C,0x2F,0xF4,0x43,0x55,0x4D,0xFC,0xCD,0xE8,0x2F,0x70,0xEE};
  
    RemoteValueID() : _homeId(0), _nodeId(0), _genre((RemoteValueGenre::type)0), _commandClassId(0), _instance(0), _valueIndex(0), _type((RemoteValueType::type)0) {
    }
! 
    virtual ~RemoteValueID() throw() {}
  
    int32_t _homeId;
    int8_t _nodeId;
    RemoteValueGenre::type _genre;
    int8_t _commandClassId;
    int8_t _instance;
    int8_t _valueIndex;
    RemoteValueType::type _type;
! 
    _RemoteValueID__isset __isset;
  
    void __set__homeId(const int32_t val) {
      _homeId = val;
    }
--- 84,119 ----
    static const char* ascii_fingerprint; // = "A30F44ED1C2FF443554DFCCDE82F70EE";
    static const uint8_t binary_fingerprint[16]; // = {0xA3,0x0F,0x44,0xED,0x1C,0x2F,0xF4,0x43,0x55,0x4D,0xFC,0xCD,0xE8,0x2F,0x70,0xEE};
  
    RemoteValueID() : _homeId(0), _nodeId(0), _genre((RemoteValueGenre::type)0), _commandClassId(0), _instance(0), _valueIndex(0), _type((RemoteValueType::type)0) {
    }
!     
    virtual ~RemoteValueID() throw() {}
  
    int32_t _homeId;
    int8_t _nodeId;
    RemoteValueGenre::type _genre;
    int8_t _commandClassId;
    int8_t _instance;
    int8_t _valueIndex;
    RemoteValueType::type _type;
!       
!   // ekarak: constructor from ValueID
!   RemoteValueID(ValueID vid) : 
!     _homeId ((int32_t) vid.GetHomeId()), 
!     _nodeId ((int8_t) vid.GetNodeId()), 
!     _genre  ((RemoteValueGenre::type) vid.GetGenre()),
!     _commandClassId((int8_t) vid.GetCommandClassId()), 
!     _instance ((int8_t) vid.GetInstance()), 
!     _valueIndex((int8_t) vid.GetIndex()),
!     _type ((RemoteValueType::type) vid.GetType()) { }
!     
!   // ekarak: converter to ValueID
!   ValueID toValueID() const {
!     return ValueID((uint32)_homeId, (uint8)_nodeId, (ValueID::ValueGenre)_genre, (uint8)_commandClassId, (uint8)_instance, (uint8)_valueIndex, (ValueID::ValueType)_type);
!   }
!   
    _RemoteValueID__isset __isset;
  
    void __set__homeId(const int32_t val) {
      _homeId = val;
    }
