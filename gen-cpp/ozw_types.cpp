/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ozw_types.h"

namespace OpenZWave {

int _kRemoteValueGenreValues[] = {
  RemoteValueGenre::ValueGenre_Basic,
  RemoteValueGenre::ValueGenre_User,
  RemoteValueGenre::ValueGenre_Config,
  RemoteValueGenre::ValueGenre_System,
  RemoteValueGenre::ValueGenre_Count
};
const char* _kRemoteValueGenreNames[] = {
  "ValueGenre_Basic",
  "ValueGenre_User",
  "ValueGenre_Config",
  "ValueGenre_System",
  "ValueGenre_Count"
};
const std::map<int, const char*> _RemoteValueGenre_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRemoteValueGenreValues, _kRemoteValueGenreNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRemoteValueTypeValues[] = {
  RemoteValueType::ValueType_Bool,
  RemoteValueType::ValueType_Byte,
  RemoteValueType::ValueType_Decimal,
  RemoteValueType::ValueType_Int,
  RemoteValueType::ValueType_List,
  RemoteValueType::ValueType_Schedule,
  RemoteValueType::ValueType_Short,
  RemoteValueType::ValueType_String,
  RemoteValueType::ValueType_Button,
  RemoteValueType::ValueType_Max
};
const char* _kRemoteValueTypeNames[] = {
  "ValueType_Bool",
  "ValueType_Byte",
  "ValueType_Decimal",
  "ValueType_Int",
  "ValueType_List",
  "ValueType_Schedule",
  "ValueType_Short",
  "ValueType_String",
  "ValueType_Button",
  "ValueType_Max"
};
const std::map<int, const char*> _RemoteValueType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kRemoteValueTypeValues, _kRemoteValueTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDriverControllerCommandValues[] = {
  DriverControllerCommand::ControllerCommand_None,
  DriverControllerCommand::ControllerCommand_AddController,
  DriverControllerCommand::ControllerCommand_AddDevice,
  DriverControllerCommand::ControllerCommand_CreateNewPrimary,
  DriverControllerCommand::ControllerCommand_ReceiveConfiguration,
  DriverControllerCommand::ControllerCommand_RemoveController,
  DriverControllerCommand::ControllerCommand_RemoveDevice,
  DriverControllerCommand::ControllerCommand_RemoveFailedNode,
  DriverControllerCommand::ControllerCommand_HasNodeFailed,
  DriverControllerCommand::ControllerCommand_ReplaceFailedNode,
  DriverControllerCommand::ControllerCommand_TransferPrimaryRole,
  DriverControllerCommand::ControllerCommand_RequestNetworkUpdate,
  DriverControllerCommand::ControllerCommand_RequestNodeNeighborUpdate,
  DriverControllerCommand::ControllerCommand_AssignReturnRoute,
  DriverControllerCommand::ControllerCommand_DeleteAllReturnRoutes,
  DriverControllerCommand::ControllerCommand_CreateButton,
  DriverControllerCommand::ControllerCommand_DeleteButton
};
const char* _kDriverControllerCommandNames[] = {
  "ControllerCommand_None",
  "ControllerCommand_AddController",
  "ControllerCommand_AddDevice",
  "ControllerCommand_CreateNewPrimary",
  "ControllerCommand_ReceiveConfiguration",
  "ControllerCommand_RemoveController",
  "ControllerCommand_RemoveDevice",
  "ControllerCommand_RemoveFailedNode",
  "ControllerCommand_HasNodeFailed",
  "ControllerCommand_ReplaceFailedNode",
  "ControllerCommand_TransferPrimaryRole",
  "ControllerCommand_RequestNetworkUpdate",
  "ControllerCommand_RequestNodeNeighborUpdate",
  "ControllerCommand_AssignReturnRoute",
  "ControllerCommand_DeleteAllReturnRoutes",
  "ControllerCommand_CreateButton",
  "ControllerCommand_DeleteButton"
};
const std::map<int, const char*> _DriverControllerCommand_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kDriverControllerCommandValues, _kDriverControllerCommandNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RemoteValueID::ascii_fingerprint = "A30F44ED1C2FF443554DFCCDE82F70EE";
const uint8_t RemoteValueID::binary_fingerprint[16] = {0xA3,0x0F,0x44,0xED,0x1C,0x2F,0xF4,0x43,0x55,0x4D,0xFC,0xCD,0xE8,0x2F,0x70,0xEE};

uint32_t RemoteValueID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_homeId);
          this->__isset._homeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_nodeId);
          this->__isset._nodeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->_genre = (RemoteValueGenre::type)ecast0;
          this->__isset._genre = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_commandClassId);
          this->__isset._commandClassId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_instance);
          this->__isset._instance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_valueIndex);
          this->__isset._valueIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->_type = (RemoteValueType::type)ecast1;
          this->__isset._type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoteValueID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RemoteValueID");
  xfer += oprot->writeFieldBegin("_homeId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_homeId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_nodeId", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->_nodeId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_genre", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->_genre);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_commandClassId", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->_commandClassId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_instance", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->_instance);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_valueIndex", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->_valueIndex);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DriverData::ascii_fingerprint = "FB78EBC5FCC9B4E153E910DEF7648158";
const uint8_t DriverData::binary_fingerprint[16] = {0xFB,0x78,0xEB,0xC5,0xFC,0xC9,0xB4,0xE1,0x53,0xE9,0x10,0xDE,0xF7,0x64,0x81,0x58};

uint32_t DriverData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_SOFCnt);
          this->__isset.s_SOFCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_ACKWaiting);
          this->__isset.s_ACKWaiting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_readAborts);
          this->__isset.s_readAborts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_badChecksum);
          this->__isset.s_badChecksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_readCnt);
          this->__isset.s_readCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_writeCnt);
          this->__isset.s_writeCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_CANCnt);
          this->__isset.s_CANCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_NAKCnt);
          this->__isset.s_NAKCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_ACKCnt);
          this->__isset.s_ACKCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_OOFCnt);
          this->__isset.s_OOFCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_dropped);
          this->__isset.s_dropped = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_retries);
          this->__isset.s_retries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_controllerReadCnt);
          this->__isset.s_controllerReadCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s_controllerWriteCnt);
          this->__isset.s_controllerWriteCnt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DriverData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DriverData");
  xfer += oprot->writeFieldBegin("s_SOFCnt", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->s_SOFCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_ACKWaiting", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->s_ACKWaiting);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_readAborts", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->s_readAborts);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_badChecksum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->s_badChecksum);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_readCnt", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->s_readCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_writeCnt", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s_writeCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_CANCnt", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->s_CANCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_NAKCnt", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->s_NAKCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_ACKCnt", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->s_ACKCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_OOFCnt", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->s_OOFCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_dropped", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->s_dropped);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_retries", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->s_retries);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_controllerReadCnt", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->s_controllerReadCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("s_controllerWriteCnt", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->s_controllerWriteCnt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* GetDriverStatisticsReturnStruct::ascii_fingerprint = "6B08952D44864D64E22DDFCB5D92B48A";
const uint8_t GetDriverStatisticsReturnStruct::binary_fingerprint[16] = {0x6B,0x08,0x95,0x2D,0x44,0x86,0x4D,0x64,0xE2,0x2D,0xDF,0xCB,0x5D,0x92,0xB4,0x8A};

uint32_t GetDriverStatisticsReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_data.read(iprot);
          this->__isset._data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDriverStatisticsReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetDriverStatisticsReturnStruct");
  xfer += oprot->writeFieldBegin("_data", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->_data.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* GetSwitchPointReturnStruct::ascii_fingerprint = "D02F029A9CC8B0BD109ADDA9910FC412";
const uint8_t GetSwitchPointReturnStruct::binary_fingerprint[16] = {0xD0,0x2F,0x02,0x9A,0x9C,0xC8,0xB0,0xBD,0x10,0x9A,0xDD,0xA9,0x91,0x0F,0xC4,0x12};

uint32_t GetSwitchPointReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->o_hours);
          this->__isset.o_hours = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->o_minutes);
          this->__isset.o_minutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->o_setback);
          this->__isset.o_setback = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSwitchPointReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetSwitchPointReturnStruct");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_hours", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->o_hours);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_minutes", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->o_minutes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_setback", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->o_setback);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_Bool::ascii_fingerprint = "403F0C4586060E367DA428DD09C59C9C";
const uint8_t Bool_Bool::binary_fingerprint[16] = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

uint32_t Bool_Bool::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->o_value);
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_Bool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_Bool");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->o_value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_UInt8::ascii_fingerprint = "A65BD4DCABE29F39F7EDB1B158641972";
const uint8_t Bool_UInt8::binary_fingerprint[16] = {0xA6,0x5B,0xD4,0xDC,0xAB,0xE2,0x9F,0x39,0xF7,0xED,0xB1,0xB1,0x58,0x64,0x19,0x72};

uint32_t Bool_UInt8::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->o_value);
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_UInt8::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_UInt8");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->o_value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_Float::ascii_fingerprint = "B799A8FF13E94F63DAEEFC9FBBD641CF";
const uint8_t Bool_Float::binary_fingerprint[16] = {0xB7,0x99,0xA8,0xFF,0x13,0xE9,0x4F,0x63,0xDA,0xEE,0xFC,0x9F,0xBB,0xD6,0x41,0xCF};

uint32_t Bool_Float::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->o_value);
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_Float::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_Float");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->o_value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_Int::ascii_fingerprint = "88440F45A63E63607868B983E4E50558";
const uint8_t Bool_Int::binary_fingerprint[16] = {0x88,0x44,0x0F,0x45,0xA6,0x3E,0x63,0x60,0x78,0x68,0xB9,0x83,0xE4,0xE5,0x05,0x58};

uint32_t Bool_Int::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->o_value);
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_Int::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_Int");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->o_value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_Int16::ascii_fingerprint = "4569DC9D7756C822FCF8EB7EFD6EF661";
const uint8_t Bool_Int16::binary_fingerprint[16] = {0x45,0x69,0xDC,0x9D,0x77,0x56,0xC8,0x22,0xFC,0xF8,0xEB,0x7E,0xFD,0x6E,0xF6,0x61};

uint32_t Bool_Int16::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->o_value);
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_Int16::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_Int16");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->o_value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_String::ascii_fingerprint = "1767FFB0CB3D9275BC64B198AB3B8A8B";
const uint8_t Bool_String::binary_fingerprint[16] = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

uint32_t Bool_String::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->o_value);
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_String::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_String");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->o_value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_ListString::ascii_fingerprint = "D41147785C488E7FFDCF1B17BF20AC0F";
const uint8_t Bool_ListString::binary_fingerprint[16] = {0xD4,0x11,0x47,0x78,0x5C,0x48,0x8E,0x7F,0xFD,0xCF,0x1B,0x17,0xBF,0x20,0xAC,0x0F};

uint32_t Bool_ListString::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->o_value.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            iprot->readListBegin(_etype5, _size2);
            this->o_value.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->o_value[_i6]);
            }
            iprot->readListEnd();
          }
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_ListString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_ListString");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->o_value.size()));
    std::vector<std::string> ::const_iterator _iter7;
    for (_iter7 = this->o_value.begin(); _iter7 != this->o_value.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UInt32_ListByte::ascii_fingerprint = "C69B8D458340D01227B2A605EFE33F77";
const uint8_t UInt32_ListByte::binary_fingerprint[16] = {0xC6,0x9B,0x8D,0x45,0x83,0x40,0xD0,0x12,0x27,0xB2,0xA6,0x05,0xEF,0xE3,0x3F,0x77};

uint32_t UInt32_ListByte::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_nodeNeighbors.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            iprot->readListBegin(_etype11, _size8);
            this->_nodeNeighbors.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readByte(this->_nodeNeighbors[_i12]);
            }
            iprot->readListEnd();
          }
          this->__isset._nodeNeighbors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UInt32_ListByte::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UInt32_ListByte");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_nodeNeighbors", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->_nodeNeighbors.size()));
    std::vector<int8_t> ::const_iterator _iter13;
    for (_iter13 = this->_nodeNeighbors.begin(); _iter13 != this->_nodeNeighbors.end(); ++_iter13)
    {
      xfer += oprot->writeByte((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Bool_GetNodeClassInformation::ascii_fingerprint = "E35E3BAE8348A954A88C096C7A63DF4B";
const uint8_t Bool_GetNodeClassInformation::binary_fingerprint[16] = {0xE3,0x5E,0x3B,0xAE,0x83,0x48,0xA9,0x54,0xA8,0x8C,0x09,0x6C,0x7A,0x63,0xDF,0x4B};

uint32_t Bool_GetNodeClassInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_className);
          this->__isset._className = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_classVersion);
          this->__isset._classVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bool_GetNodeClassInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bool_GetNodeClassInformation");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_className", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_className);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_classVersion", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->_classVersion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* GetAssociationsReturnStruct::ascii_fingerprint = "C69B8D458340D01227B2A605EFE33F77";
const uint8_t GetAssociationsReturnStruct::binary_fingerprint[16] = {0xC6,0x9B,0x8D,0x45,0x83,0x40,0xD0,0x12,0x27,0xB2,0xA6,0x05,0xEF,0xE3,0x3F,0x77};

uint32_t GetAssociationsReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->o_associations.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            iprot->readListBegin(_etype17, _size14);
            this->o_associations.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readByte(this->o_associations[_i18]);
            }
            iprot->readListEnd();
          }
          this->__isset.o_associations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetAssociationsReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetAssociationsReturnStruct");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_associations", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->o_associations.size()));
    std::vector<int8_t> ::const_iterator _iter19;
    for (_iter19 = this->o_associations.begin(); _iter19 != this->o_associations.end(); ++_iter19)
    {
      xfer += oprot->writeByte((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* GetAllScenesReturnStruct::ascii_fingerprint = "E9315D11ED9B3ADE4F14971EFD87F639";
const uint8_t GetAllScenesReturnStruct::binary_fingerprint[16] = {0xE9,0x31,0x5D,0x11,0xED,0x9B,0x3A,0xDE,0x4F,0x14,0x97,0x1E,0xFD,0x87,0xF6,0x39};

uint32_t GetAllScenesReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_sceneIds.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            iprot->readListBegin(_etype23, _size20);
            this->_sceneIds.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += iprot->readByte(this->_sceneIds[_i24]);
            }
            iprot->readListEnd();
          }
          this->__isset._sceneIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetAllScenesReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetAllScenesReturnStruct");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_sceneIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->_sceneIds.size()));
    std::vector<int8_t> ::const_iterator _iter25;
    for (_iter25 = this->_sceneIds.begin(); _iter25 != this->_sceneIds.end(); ++_iter25)
    {
      xfer += oprot->writeByte((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SceneGetValuesReturnStruct::ascii_fingerprint = "B185F1A76BEB4E1D6BC486700DAD2A95";
const uint8_t SceneGetValuesReturnStruct::binary_fingerprint[16] = {0xB1,0x85,0xF1,0xA7,0x6B,0xEB,0x4E,0x1D,0x6B,0xC4,0x86,0x70,0x0D,0xAD,0x2A,0x95};

uint32_t SceneGetValuesReturnStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retval);
          this->__isset.retval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->o_value.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            iprot->readListBegin(_etype29, _size26);
            this->o_value.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->o_value[_i30].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.o_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SceneGetValuesReturnStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SceneGetValuesReturnStruct");
  xfer += oprot->writeFieldBegin("retval", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("o_value", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->o_value.size()));
    std::vector<RemoteValueID> ::const_iterator _iter31;
    for (_iter31 = this->o_value.begin(); _iter31 != this->o_value.end(); ++_iter31)
    {
      xfer += (*_iter31).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
