#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from OpenZWave import RemoteManager
from OpenZWave.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void WriteConfig(i32 _homeId)'
  print '  byte GetControllerNodeId(i32 _homeId)'
  print '  byte GetSUCNodeId(i32 _homeId)'
  print '  bool IsPrimaryController(i32 _homeId)'
  print '  bool IsStaticUpdateController(i32 _homeId)'
  print '  bool IsBridgeController(i32 _homeId)'
  print '  string GetLibraryVersion(i32 _homeId)'
  print '  string GetLibraryTypeName(i32 _homeId)'
  print '  i32 GetSendQueueCount(i32 _homeId)'
  print '  void LogDriverStatistics(i32 _homeId)'
  print '  i32 GetControllerInterfaceType(i32 _homeId)'
  print '  string GetControllerPath(i32 _homeId)'
  print '  i32 GetPollInterval()'
  print '  void SetPollInterval(i32 _milliseconds, bool _bIntervalBetweenPolls)'
  print '  bool EnablePoll(RemoteValueID _valueId, byte _intensity)'
  print '  bool DisablePoll(RemoteValueID _valueId)'
  print '  bool isPolled(RemoteValueID _valueId)'
  print '  void SetPollIntensity(RemoteValueID _valueId, byte _intensity)'
  print '  bool RefreshNodeInfo(i32 _homeId, byte _nodeId)'
  print '  bool RequestNodeState(i32 _homeId, byte _nodeId)'
  print '  bool RequestNodeDynamic(i32 _homeId, byte _nodeId)'
  print '  bool IsNodeListeningDevice(i32 _homeId, byte _nodeId)'
  print '  bool IsNodeFrequentListeningDevice(i32 _homeId, byte _nodeId)'
  print '  bool IsNodeBeamingDevice(i32 _homeId, byte _nodeId)'
  print '  bool IsNodeRoutingDevice(i32 _homeId, byte _nodeId)'
  print '  bool IsNodeSecurityDevice(i32 _homeId, byte _nodeId)'
  print '  i32 GetNodeMaxBaudRate(i32 _homeId, byte _nodeId)'
  print '  byte GetNodeVersion(i32 _homeId, byte _nodeId)'
  print '  byte GetNodeSecurity(i32 _homeId, byte _nodeId)'
  print '  byte GetNodeBasic(i32 _homeId, byte _nodeId)'
  print '  byte GetNodeGeneric(i32 _homeId, byte _nodeId)'
  print '  byte GetNodeSpecific(i32 _homeId, byte _nodeId)'
  print '  string GetNodeType(i32 _homeId, byte _nodeId)'
  print '  UInt32_ListByte GetNodeNeighbors(i32 _homeId, byte _nodeId)'
  print '  string GetNodeManufacturerName(i32 _homeId, byte _nodeId)'
  print '  string GetNodeProductName(i32 _homeId, byte _nodeId)'
  print '  string GetNodeName(i32 _homeId, byte _nodeId)'
  print '  string GetNodeLocation(i32 _homeId, byte _nodeId)'
  print '  string GetNodeManufacturerId(i32 _homeId, byte _nodeId)'
  print '  string GetNodeProductType(i32 _homeId, byte _nodeId)'
  print '  string GetNodeProductId(i32 _homeId, byte _nodeId)'
  print '  void SetNodeManufacturerName(i32 _homeId, byte _nodeId, string _manufacturerName)'
  print '  void SetNodeProductName(i32 _homeId, byte _nodeId, string _productName)'
  print '  void SetNodeName(i32 _homeId, byte _nodeId, string _nodeName)'
  print '  void SetNodeLocation(i32 _homeId, byte _nodeId, string _location)'
  print '  void SetNodeOn(i32 _homeId, byte _nodeId)'
  print '  void SetNodeOff(i32 _homeId, byte _nodeId)'
  print '  void SetNodeLevel(i32 _homeId, byte _nodeId, byte _level)'
  print '  bool IsNodeInfoReceived(i32 _homeId, byte _nodeId)'
  print '  Bool_GetNodeClassInformation GetNodeClassInformation(i32 _homeId, byte _nodeId, byte _commandClassId)'
  print '  bool IsNodeAwake(i32 _homeId, byte _nodeId)'
  print '  bool IsNodeFailed(i32 _homeId, byte _nodeId)'
  print '  string GetNodeQueryStage(i32 _homeId, byte _nodeId)'
  print '  string GetValueLabel(RemoteValueID _id)'
  print '  void SetValueLabel(RemoteValueID _id, string _value)'
  print '  string GetValueUnits(RemoteValueID _id)'
  print '  void SetValueUnits(RemoteValueID _id, string _value)'
  print '  string GetValueHelp(RemoteValueID _id)'
  print '  void SetValueHelp(RemoteValueID _id, string _value)'
  print '  i32 GetValueMin(RemoteValueID _id)'
  print '  i32 GetValueMax(RemoteValueID _id)'
  print '  bool IsValueReadOnly(RemoteValueID _id)'
  print '  bool IsValueWriteOnly(RemoteValueID _id)'
  print '  bool IsValueSet(RemoteValueID _id)'
  print '  bool IsValuePolled(RemoteValueID _id)'
  print '  Bool_Bool GetValueAsBool(RemoteValueID _id)'
  print '  Bool_UInt8 GetValueAsByte(RemoteValueID _id)'
  print '  Bool_Float GetValueAsFloat(RemoteValueID _id)'
  print '  Bool_Int GetValueAsInt(RemoteValueID _id)'
  print '  Bool_Int16 GetValueAsShort(RemoteValueID _id)'
  print '  Bool_String GetValueAsString(RemoteValueID _id)'
  print '  Bool_String GetValueListSelection_String(RemoteValueID _id)'
  print '  Bool_Int GetValueListSelection_Int32(RemoteValueID _id)'
  print '  Bool_ListString GetValueListItems(RemoteValueID _id)'
  print '  Bool_UInt8 GetValueFloatPrecision(RemoteValueID _id)'
  print '  bool SetValue_Bool(RemoteValueID _id, bool _value)'
  print '  bool SetValue_UInt8(RemoteValueID _id, byte _value)'
  print '  bool SetValue_UInt8_UInt8(RemoteValueID _id,  _value, byte _length)'
  print '  bool SetValue_Float(RemoteValueID _id, double _value)'
  print '  bool SetValue_int32(RemoteValueID _id, i32 _value)'
  print '  bool SetValue_int16(RemoteValueID _id, i16 _value)'
  print '  bool SetValue_String(RemoteValueID _id, string _value)'
  print '  bool SetValueListSelection(RemoteValueID _id, string _selectedItem)'
  print '  bool RefreshValue(RemoteValueID _id)'
  print '  void SetChangeVerified(RemoteValueID _id, bool _verify)'
  print '  bool PressButton(RemoteValueID _id)'
  print '  bool ReleaseButton(RemoteValueID _id)'
  print '  byte GetNumSwitchPoints(RemoteValueID _id)'
  print '  bool SetSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes, byte _setback)'
  print '  bool RemoveSwitchPoint(RemoteValueID _id, byte _hours, byte _minutes)'
  print '  void ClearSwitchPoints(RemoteValueID _id)'
  print '  GetSwitchPointReturnStruct GetSwitchPoint(RemoteValueID _id, byte _idx)'
  print '  void SwitchAllOn(i32 _homeId)'
  print '  void SwitchAllOff(i32 _homeId)'
  print '  bool SetConfigParam(i32 _homeId, byte _nodeId, byte _param, i32 _value, byte _size)'
  print '  void RequestConfigParam(i32 _homeId, byte _nodeId, byte _param)'
  print '  void RequestAllConfigParams(i32 _homeId, byte _nodeId)'
  print '  byte GetNumGroups(i32 _homeId, byte _nodeId)'
  print '  GetAssociationsReturnStruct GetAssociations(i32 _homeId, byte _nodeId, byte _groupIdx)'
  print '  byte GetMaxAssociations(i32 _homeId, byte _nodeId, byte _groupIdx)'
  print '  string GetGroupLabel(i32 _homeId, byte _nodeId, byte _groupIdx)'
  print '  void AddAssociation(i32 _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId)'
  print '  void RemoveAssociation(i32 _homeId, byte _nodeId, byte _groupIdx, byte _targetNodeId)'
  print '  void ResetController(i32 _homeId)'
  print '  void SoftReset(i32 _homeId)'
  print '  bool BeginControllerCommand(i32 _homeId, DriverControllerCommand _command, bool _highPower, byte _nodeId, byte _arg)'
  print '  bool CancelControllerCommand(i32 _homeId)'
  print '  void TestNetworkNode(i32 _homeId, byte _nodeId, i32 _count)'
  print '  void TestNetwork(i32 _homeId, i32 _count)'
  print '  void HealNetworkNode(i32 _homeId, byte _nodeId, bool _doRR)'
  print '  void HealNetwork(i32 _homeId, bool _doRR)'
  print '  byte GetNumScenes()'
  print '  GetAllScenesReturnStruct GetAllScenes()'
  print '  void RemoveAllScenes(i32 _homeId)'
  print '  byte CreateScene()'
  print '  bool RemoveScene(byte _sceneId)'
  print '  bool AddSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value)'
  print '  bool AddSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value)'
  print '  bool AddSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value)'
  print '  bool AddSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, i32 _value)'
  print '  bool AddSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, i16 _value)'
  print '  bool AddSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value)'
  print '  bool AddSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value)'
  print '  bool AddSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, i32 _value)'
  print '  bool RemoveSceneValue(byte _sceneId, RemoteValueID _valueId)'
  print '  SceneGetValuesReturnStruct SceneGetValues(byte _sceneId)'
  print '  Bool_Bool SceneGetValueAsBool(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_UInt8 SceneGetValueAsByte(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_Float SceneGetValueAsFloat(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_Int SceneGetValueAsInt(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_Int16 SceneGetValueAsShort(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_String SceneGetValueAsString(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_String SceneGetValueListSelection_String(byte _sceneId, RemoteValueID _valueId)'
  print '  Bool_Int SceneGetValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId)'
  print '  bool SetSceneValue_Bool(byte _sceneId, RemoteValueID _valueId, bool _value)'
  print '  bool SetSceneValue_Uint8(byte _sceneId, RemoteValueID _valueId, byte _value)'
  print '  bool SetSceneValue_Float(byte _sceneId, RemoteValueID _valueId, double _value)'
  print '  bool SetSceneValue_Int32(byte _sceneId, RemoteValueID _valueId, i32 _value)'
  print '  bool SetSceneValue_Int16(byte _sceneId, RemoteValueID _valueId, i16 _value)'
  print '  bool SetSceneValue_String(byte _sceneId, RemoteValueID _valueId, string _value)'
  print '  bool SetSceneValueListSelection_String(byte _sceneId, RemoteValueID _valueId, string _value)'
  print '  bool SetSceneValueListSelection_Int32(byte _sceneId, RemoteValueID _valueId, i32 _value)'
  print '  string GetSceneLabel(byte _sceneId)'
  print '  void SetSceneLabel(byte _sceneId, string _value)'
  print '  bool SceneExists(byte _sceneId)'
  print '  bool ActivateScene(byte _sceneId)'
  print '  GetDriverStatisticsReturnStruct GetDriverStatistics(i32 _homeId)'
  print '  GetNodeStatisticsReturnStruct GetNodeStatistics(i32 _homeId, byte _nodeId)'
  print '  void SendAllValues()'
  print '  void ping()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RemoteManager.Client(protocol)
transport.open()

if cmd == 'WriteConfig':
  if len(args) != 1:
    print 'WriteConfig requires 1 args'
    sys.exit(1)
  pp.pprint(client.WriteConfig(eval(args[0]),))

elif cmd == 'GetControllerNodeId':
  if len(args) != 1:
    print 'GetControllerNodeId requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetControllerNodeId(eval(args[0]),))

elif cmd == 'GetSUCNodeId':
  if len(args) != 1:
    print 'GetSUCNodeId requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetSUCNodeId(eval(args[0]),))

elif cmd == 'IsPrimaryController':
  if len(args) != 1:
    print 'IsPrimaryController requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsPrimaryController(eval(args[0]),))

elif cmd == 'IsStaticUpdateController':
  if len(args) != 1:
    print 'IsStaticUpdateController requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsStaticUpdateController(eval(args[0]),))

elif cmd == 'IsBridgeController':
  if len(args) != 1:
    print 'IsBridgeController requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsBridgeController(eval(args[0]),))

elif cmd == 'GetLibraryVersion':
  if len(args) != 1:
    print 'GetLibraryVersion requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetLibraryVersion(eval(args[0]),))

elif cmd == 'GetLibraryTypeName':
  if len(args) != 1:
    print 'GetLibraryTypeName requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetLibraryTypeName(eval(args[0]),))

elif cmd == 'GetSendQueueCount':
  if len(args) != 1:
    print 'GetSendQueueCount requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetSendQueueCount(eval(args[0]),))

elif cmd == 'LogDriverStatistics':
  if len(args) != 1:
    print 'LogDriverStatistics requires 1 args'
    sys.exit(1)
  pp.pprint(client.LogDriverStatistics(eval(args[0]),))

elif cmd == 'GetControllerInterfaceType':
  if len(args) != 1:
    print 'GetControllerInterfaceType requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetControllerInterfaceType(eval(args[0]),))

elif cmd == 'GetControllerPath':
  if len(args) != 1:
    print 'GetControllerPath requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetControllerPath(eval(args[0]),))

elif cmd == 'GetPollInterval':
  if len(args) != 0:
    print 'GetPollInterval requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetPollInterval())

elif cmd == 'SetPollInterval':
  if len(args) != 2:
    print 'SetPollInterval requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetPollInterval(eval(args[0]),eval(args[1]),))

elif cmd == 'EnablePoll':
  if len(args) != 2:
    print 'EnablePoll requires 2 args'
    sys.exit(1)
  pp.pprint(client.EnablePoll(eval(args[0]),eval(args[1]),))

elif cmd == 'DisablePoll':
  if len(args) != 1:
    print 'DisablePoll requires 1 args'
    sys.exit(1)
  pp.pprint(client.DisablePoll(eval(args[0]),))

elif cmd == 'isPolled':
  if len(args) != 1:
    print 'isPolled requires 1 args'
    sys.exit(1)
  pp.pprint(client.isPolled(eval(args[0]),))

elif cmd == 'SetPollIntensity':
  if len(args) != 2:
    print 'SetPollIntensity requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetPollIntensity(eval(args[0]),eval(args[1]),))

elif cmd == 'RefreshNodeInfo':
  if len(args) != 2:
    print 'RefreshNodeInfo requires 2 args'
    sys.exit(1)
  pp.pprint(client.RefreshNodeInfo(eval(args[0]),eval(args[1]),))

elif cmd == 'RequestNodeState':
  if len(args) != 2:
    print 'RequestNodeState requires 2 args'
    sys.exit(1)
  pp.pprint(client.RequestNodeState(eval(args[0]),eval(args[1]),))

elif cmd == 'RequestNodeDynamic':
  if len(args) != 2:
    print 'RequestNodeDynamic requires 2 args'
    sys.exit(1)
  pp.pprint(client.RequestNodeDynamic(eval(args[0]),eval(args[1]),))

elif cmd == 'IsNodeListeningDevice':
  if len(args) != 2:
    print 'IsNodeListeningDevice requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeListeningDevice(eval(args[0]),eval(args[1]),))

elif cmd == 'IsNodeFrequentListeningDevice':
  if len(args) != 2:
    print 'IsNodeFrequentListeningDevice requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeFrequentListeningDevice(eval(args[0]),eval(args[1]),))

elif cmd == 'IsNodeBeamingDevice':
  if len(args) != 2:
    print 'IsNodeBeamingDevice requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeBeamingDevice(eval(args[0]),eval(args[1]),))

elif cmd == 'IsNodeRoutingDevice':
  if len(args) != 2:
    print 'IsNodeRoutingDevice requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeRoutingDevice(eval(args[0]),eval(args[1]),))

elif cmd == 'IsNodeSecurityDevice':
  if len(args) != 2:
    print 'IsNodeSecurityDevice requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeSecurityDevice(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeMaxBaudRate':
  if len(args) != 2:
    print 'GetNodeMaxBaudRate requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeMaxBaudRate(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeVersion':
  if len(args) != 2:
    print 'GetNodeVersion requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeVersion(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeSecurity':
  if len(args) != 2:
    print 'GetNodeSecurity requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeSecurity(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeBasic':
  if len(args) != 2:
    print 'GetNodeBasic requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeBasic(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeGeneric':
  if len(args) != 2:
    print 'GetNodeGeneric requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeGeneric(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeSpecific':
  if len(args) != 2:
    print 'GetNodeSpecific requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeSpecific(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeType':
  if len(args) != 2:
    print 'GetNodeType requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeType(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeNeighbors':
  if len(args) != 2:
    print 'GetNodeNeighbors requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeNeighbors(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeManufacturerName':
  if len(args) != 2:
    print 'GetNodeManufacturerName requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeManufacturerName(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeProductName':
  if len(args) != 2:
    print 'GetNodeProductName requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeProductName(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeName':
  if len(args) != 2:
    print 'GetNodeName requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeName(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeLocation':
  if len(args) != 2:
    print 'GetNodeLocation requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeLocation(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeManufacturerId':
  if len(args) != 2:
    print 'GetNodeManufacturerId requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeManufacturerId(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeProductType':
  if len(args) != 2:
    print 'GetNodeProductType requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeProductType(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeProductId':
  if len(args) != 2:
    print 'GetNodeProductId requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeProductId(eval(args[0]),eval(args[1]),))

elif cmd == 'SetNodeManufacturerName':
  if len(args) != 3:
    print 'SetNodeManufacturerName requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetNodeManufacturerName(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'SetNodeProductName':
  if len(args) != 3:
    print 'SetNodeProductName requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetNodeProductName(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'SetNodeName':
  if len(args) != 3:
    print 'SetNodeName requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetNodeName(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'SetNodeLocation':
  if len(args) != 3:
    print 'SetNodeLocation requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetNodeLocation(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'SetNodeOn':
  if len(args) != 2:
    print 'SetNodeOn requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetNodeOn(eval(args[0]),eval(args[1]),))

elif cmd == 'SetNodeOff':
  if len(args) != 2:
    print 'SetNodeOff requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetNodeOff(eval(args[0]),eval(args[1]),))

elif cmd == 'SetNodeLevel':
  if len(args) != 3:
    print 'SetNodeLevel requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetNodeLevel(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'IsNodeInfoReceived':
  if len(args) != 2:
    print 'IsNodeInfoReceived requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeInfoReceived(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeClassInformation':
  if len(args) != 3:
    print 'GetNodeClassInformation requires 3 args'
    sys.exit(1)
  pp.pprint(client.GetNodeClassInformation(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'IsNodeAwake':
  if len(args) != 2:
    print 'IsNodeAwake requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeAwake(eval(args[0]),eval(args[1]),))

elif cmd == 'IsNodeFailed':
  if len(args) != 2:
    print 'IsNodeFailed requires 2 args'
    sys.exit(1)
  pp.pprint(client.IsNodeFailed(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNodeQueryStage':
  if len(args) != 2:
    print 'GetNodeQueryStage requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeQueryStage(eval(args[0]),eval(args[1]),))

elif cmd == 'GetValueLabel':
  if len(args) != 1:
    print 'GetValueLabel requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueLabel(eval(args[0]),))

elif cmd == 'SetValueLabel':
  if len(args) != 2:
    print 'SetValueLabel requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValueLabel(eval(args[0]),args[1],))

elif cmd == 'GetValueUnits':
  if len(args) != 1:
    print 'GetValueUnits requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueUnits(eval(args[0]),))

elif cmd == 'SetValueUnits':
  if len(args) != 2:
    print 'SetValueUnits requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValueUnits(eval(args[0]),args[1],))

elif cmd == 'GetValueHelp':
  if len(args) != 1:
    print 'GetValueHelp requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueHelp(eval(args[0]),))

elif cmd == 'SetValueHelp':
  if len(args) != 2:
    print 'SetValueHelp requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValueHelp(eval(args[0]),args[1],))

elif cmd == 'GetValueMin':
  if len(args) != 1:
    print 'GetValueMin requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueMin(eval(args[0]),))

elif cmd == 'GetValueMax':
  if len(args) != 1:
    print 'GetValueMax requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueMax(eval(args[0]),))

elif cmd == 'IsValueReadOnly':
  if len(args) != 1:
    print 'IsValueReadOnly requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsValueReadOnly(eval(args[0]),))

elif cmd == 'IsValueWriteOnly':
  if len(args) != 1:
    print 'IsValueWriteOnly requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsValueWriteOnly(eval(args[0]),))

elif cmd == 'IsValueSet':
  if len(args) != 1:
    print 'IsValueSet requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsValueSet(eval(args[0]),))

elif cmd == 'IsValuePolled':
  if len(args) != 1:
    print 'IsValuePolled requires 1 args'
    sys.exit(1)
  pp.pprint(client.IsValuePolled(eval(args[0]),))

elif cmd == 'GetValueAsBool':
  if len(args) != 1:
    print 'GetValueAsBool requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueAsBool(eval(args[0]),))

elif cmd == 'GetValueAsByte':
  if len(args) != 1:
    print 'GetValueAsByte requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueAsByte(eval(args[0]),))

elif cmd == 'GetValueAsFloat':
  if len(args) != 1:
    print 'GetValueAsFloat requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueAsFloat(eval(args[0]),))

elif cmd == 'GetValueAsInt':
  if len(args) != 1:
    print 'GetValueAsInt requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueAsInt(eval(args[0]),))

elif cmd == 'GetValueAsShort':
  if len(args) != 1:
    print 'GetValueAsShort requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueAsShort(eval(args[0]),))

elif cmd == 'GetValueAsString':
  if len(args) != 1:
    print 'GetValueAsString requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueAsString(eval(args[0]),))

elif cmd == 'GetValueListSelection_String':
  if len(args) != 1:
    print 'GetValueListSelection_String requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueListSelection_String(eval(args[0]),))

elif cmd == 'GetValueListSelection_Int32':
  if len(args) != 1:
    print 'GetValueListSelection_Int32 requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueListSelection_Int32(eval(args[0]),))

elif cmd == 'GetValueListItems':
  if len(args) != 1:
    print 'GetValueListItems requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueListItems(eval(args[0]),))

elif cmd == 'GetValueFloatPrecision':
  if len(args) != 1:
    print 'GetValueFloatPrecision requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetValueFloatPrecision(eval(args[0]),))

elif cmd == 'SetValue_Bool':
  if len(args) != 2:
    print 'SetValue_Bool requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValue_Bool(eval(args[0]),eval(args[1]),))

elif cmd == 'SetValue_UInt8':
  if len(args) != 2:
    print 'SetValue_UInt8 requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValue_UInt8(eval(args[0]),eval(args[1]),))

elif cmd == 'SetValue_UInt8_UInt8':
  if len(args) != 3:
    print 'SetValue_UInt8_UInt8 requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetValue_UInt8_UInt8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetValue_Float':
  if len(args) != 2:
    print 'SetValue_Float requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValue_Float(eval(args[0]),eval(args[1]),))

elif cmd == 'SetValue_int32':
  if len(args) != 2:
    print 'SetValue_int32 requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValue_int32(eval(args[0]),eval(args[1]),))

elif cmd == 'SetValue_int16':
  if len(args) != 2:
    print 'SetValue_int16 requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValue_int16(eval(args[0]),eval(args[1]),))

elif cmd == 'SetValue_String':
  if len(args) != 2:
    print 'SetValue_String requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValue_String(eval(args[0]),args[1],))

elif cmd == 'SetValueListSelection':
  if len(args) != 2:
    print 'SetValueListSelection requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetValueListSelection(eval(args[0]),args[1],))

elif cmd == 'RefreshValue':
  if len(args) != 1:
    print 'RefreshValue requires 1 args'
    sys.exit(1)
  pp.pprint(client.RefreshValue(eval(args[0]),))

elif cmd == 'SetChangeVerified':
  if len(args) != 2:
    print 'SetChangeVerified requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetChangeVerified(eval(args[0]),eval(args[1]),))

elif cmd == 'PressButton':
  if len(args) != 1:
    print 'PressButton requires 1 args'
    sys.exit(1)
  pp.pprint(client.PressButton(eval(args[0]),))

elif cmd == 'ReleaseButton':
  if len(args) != 1:
    print 'ReleaseButton requires 1 args'
    sys.exit(1)
  pp.pprint(client.ReleaseButton(eval(args[0]),))

elif cmd == 'GetNumSwitchPoints':
  if len(args) != 1:
    print 'GetNumSwitchPoints requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetNumSwitchPoints(eval(args[0]),))

elif cmd == 'SetSwitchPoint':
  if len(args) != 4:
    print 'SetSwitchPoint requires 4 args'
    sys.exit(1)
  pp.pprint(client.SetSwitchPoint(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'RemoveSwitchPoint':
  if len(args) != 3:
    print 'RemoveSwitchPoint requires 3 args'
    sys.exit(1)
  pp.pprint(client.RemoveSwitchPoint(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ClearSwitchPoints':
  if len(args) != 1:
    print 'ClearSwitchPoints requires 1 args'
    sys.exit(1)
  pp.pprint(client.ClearSwitchPoints(eval(args[0]),))

elif cmd == 'GetSwitchPoint':
  if len(args) != 2:
    print 'GetSwitchPoint requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetSwitchPoint(eval(args[0]),eval(args[1]),))

elif cmd == 'SwitchAllOn':
  if len(args) != 1:
    print 'SwitchAllOn requires 1 args'
    sys.exit(1)
  pp.pprint(client.SwitchAllOn(eval(args[0]),))

elif cmd == 'SwitchAllOff':
  if len(args) != 1:
    print 'SwitchAllOff requires 1 args'
    sys.exit(1)
  pp.pprint(client.SwitchAllOff(eval(args[0]),))

elif cmd == 'SetConfigParam':
  if len(args) != 5:
    print 'SetConfigParam requires 5 args'
    sys.exit(1)
  pp.pprint(client.SetConfigParam(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'RequestConfigParam':
  if len(args) != 3:
    print 'RequestConfigParam requires 3 args'
    sys.exit(1)
  pp.pprint(client.RequestConfigParam(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'RequestAllConfigParams':
  if len(args) != 2:
    print 'RequestAllConfigParams requires 2 args'
    sys.exit(1)
  pp.pprint(client.RequestAllConfigParams(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNumGroups':
  if len(args) != 2:
    print 'GetNumGroups requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNumGroups(eval(args[0]),eval(args[1]),))

elif cmd == 'GetAssociations':
  if len(args) != 3:
    print 'GetAssociations requires 3 args'
    sys.exit(1)
  pp.pprint(client.GetAssociations(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'GetMaxAssociations':
  if len(args) != 3:
    print 'GetMaxAssociations requires 3 args'
    sys.exit(1)
  pp.pprint(client.GetMaxAssociations(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'GetGroupLabel':
  if len(args) != 3:
    print 'GetGroupLabel requires 3 args'
    sys.exit(1)
  pp.pprint(client.GetGroupLabel(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'AddAssociation':
  if len(args) != 4:
    print 'AddAssociation requires 4 args'
    sys.exit(1)
  pp.pprint(client.AddAssociation(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'RemoveAssociation':
  if len(args) != 4:
    print 'RemoveAssociation requires 4 args'
    sys.exit(1)
  pp.pprint(client.RemoveAssociation(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ResetController':
  if len(args) != 1:
    print 'ResetController requires 1 args'
    sys.exit(1)
  pp.pprint(client.ResetController(eval(args[0]),))

elif cmd == 'SoftReset':
  if len(args) != 1:
    print 'SoftReset requires 1 args'
    sys.exit(1)
  pp.pprint(client.SoftReset(eval(args[0]),))

elif cmd == 'BeginControllerCommand':
  if len(args) != 5:
    print 'BeginControllerCommand requires 5 args'
    sys.exit(1)
  pp.pprint(client.BeginControllerCommand(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'CancelControllerCommand':
  if len(args) != 1:
    print 'CancelControllerCommand requires 1 args'
    sys.exit(1)
  pp.pprint(client.CancelControllerCommand(eval(args[0]),))

elif cmd == 'TestNetworkNode':
  if len(args) != 3:
    print 'TestNetworkNode requires 3 args'
    sys.exit(1)
  pp.pprint(client.TestNetworkNode(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'TestNetwork':
  if len(args) != 2:
    print 'TestNetwork requires 2 args'
    sys.exit(1)
  pp.pprint(client.TestNetwork(eval(args[0]),eval(args[1]),))

elif cmd == 'HealNetworkNode':
  if len(args) != 3:
    print 'HealNetworkNode requires 3 args'
    sys.exit(1)
  pp.pprint(client.HealNetworkNode(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'HealNetwork':
  if len(args) != 2:
    print 'HealNetwork requires 2 args'
    sys.exit(1)
  pp.pprint(client.HealNetwork(eval(args[0]),eval(args[1]),))

elif cmd == 'GetNumScenes':
  if len(args) != 0:
    print 'GetNumScenes requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetNumScenes())

elif cmd == 'GetAllScenes':
  if len(args) != 0:
    print 'GetAllScenes requires 0 args'
    sys.exit(1)
  pp.pprint(client.GetAllScenes())

elif cmd == 'RemoveAllScenes':
  if len(args) != 1:
    print 'RemoveAllScenes requires 1 args'
    sys.exit(1)
  pp.pprint(client.RemoveAllScenes(eval(args[0]),))

elif cmd == 'CreateScene':
  if len(args) != 0:
    print 'CreateScene requires 0 args'
    sys.exit(1)
  pp.pprint(client.CreateScene())

elif cmd == 'RemoveScene':
  if len(args) != 1:
    print 'RemoveScene requires 1 args'
    sys.exit(1)
  pp.pprint(client.RemoveScene(eval(args[0]),))

elif cmd == 'AddSceneValue_Bool':
  if len(args) != 3:
    print 'AddSceneValue_Bool requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValue_Bool(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'AddSceneValue_Uint8':
  if len(args) != 3:
    print 'AddSceneValue_Uint8 requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValue_Uint8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'AddSceneValue_Float':
  if len(args) != 3:
    print 'AddSceneValue_Float requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValue_Float(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'AddSceneValue_Int32':
  if len(args) != 3:
    print 'AddSceneValue_Int32 requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValue_Int32(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'AddSceneValue_Int16':
  if len(args) != 3:
    print 'AddSceneValue_Int16 requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValue_Int16(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'AddSceneValue_String':
  if len(args) != 3:
    print 'AddSceneValue_String requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValue_String(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'AddSceneValueListSelection_String':
  if len(args) != 3:
    print 'AddSceneValueListSelection_String requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValueListSelection_String(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'AddSceneValueListSelection_Int32':
  if len(args) != 3:
    print 'AddSceneValueListSelection_Int32 requires 3 args'
    sys.exit(1)
  pp.pprint(client.AddSceneValueListSelection_Int32(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'RemoveSceneValue':
  if len(args) != 2:
    print 'RemoveSceneValue requires 2 args'
    sys.exit(1)
  pp.pprint(client.RemoveSceneValue(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValues':
  if len(args) != 1:
    print 'SceneGetValues requires 1 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValues(eval(args[0]),))

elif cmd == 'SceneGetValueAsBool':
  if len(args) != 2:
    print 'SceneGetValueAsBool requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueAsBool(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueAsByte':
  if len(args) != 2:
    print 'SceneGetValueAsByte requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueAsByte(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueAsFloat':
  if len(args) != 2:
    print 'SceneGetValueAsFloat requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueAsFloat(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueAsInt':
  if len(args) != 2:
    print 'SceneGetValueAsInt requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueAsInt(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueAsShort':
  if len(args) != 2:
    print 'SceneGetValueAsShort requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueAsShort(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueAsString':
  if len(args) != 2:
    print 'SceneGetValueAsString requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueAsString(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueListSelection_String':
  if len(args) != 2:
    print 'SceneGetValueListSelection_String requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueListSelection_String(eval(args[0]),eval(args[1]),))

elif cmd == 'SceneGetValueListSelection_Int32':
  if len(args) != 2:
    print 'SceneGetValueListSelection_Int32 requires 2 args'
    sys.exit(1)
  pp.pprint(client.SceneGetValueListSelection_Int32(eval(args[0]),eval(args[1]),))

elif cmd == 'SetSceneValue_Bool':
  if len(args) != 3:
    print 'SetSceneValue_Bool requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValue_Bool(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetSceneValue_Uint8':
  if len(args) != 3:
    print 'SetSceneValue_Uint8 requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValue_Uint8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetSceneValue_Float':
  if len(args) != 3:
    print 'SetSceneValue_Float requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValue_Float(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetSceneValue_Int32':
  if len(args) != 3:
    print 'SetSceneValue_Int32 requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValue_Int32(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetSceneValue_Int16':
  if len(args) != 3:
    print 'SetSceneValue_Int16 requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValue_Int16(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetSceneValue_String':
  if len(args) != 3:
    print 'SetSceneValue_String requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValue_String(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'SetSceneValueListSelection_String':
  if len(args) != 3:
    print 'SetSceneValueListSelection_String requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValueListSelection_String(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'SetSceneValueListSelection_Int32':
  if len(args) != 3:
    print 'SetSceneValueListSelection_Int32 requires 3 args'
    sys.exit(1)
  pp.pprint(client.SetSceneValueListSelection_Int32(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'GetSceneLabel':
  if len(args) != 1:
    print 'GetSceneLabel requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetSceneLabel(eval(args[0]),))

elif cmd == 'SetSceneLabel':
  if len(args) != 2:
    print 'SetSceneLabel requires 2 args'
    sys.exit(1)
  pp.pprint(client.SetSceneLabel(eval(args[0]),args[1],))

elif cmd == 'SceneExists':
  if len(args) != 1:
    print 'SceneExists requires 1 args'
    sys.exit(1)
  pp.pprint(client.SceneExists(eval(args[0]),))

elif cmd == 'ActivateScene':
  if len(args) != 1:
    print 'ActivateScene requires 1 args'
    sys.exit(1)
  pp.pprint(client.ActivateScene(eval(args[0]),))

elif cmd == 'GetDriverStatistics':
  if len(args) != 1:
    print 'GetDriverStatistics requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetDriverStatistics(eval(args[0]),))

elif cmd == 'GetNodeStatistics':
  if len(args) != 2:
    print 'GetNodeStatistics requires 2 args'
    sys.exit(1)
  pp.pprint(client.GetNodeStatistics(eval(args[0]),eval(args[1]),))

elif cmd == 'SendAllValues':
  if len(args) != 0:
    print 'SendAllValues requires 0 args'
    sys.exit(1)
  pp.pprint(client.SendAllValues())

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
